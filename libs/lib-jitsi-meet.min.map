{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/../strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/../events/events.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/../sdp-transform/lib/index.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/../lodash.clonedeep/index.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/../webpack/buildin/global.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/../sdp/sdp.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/../process/browser.js","webpack://JitsiMeetJS/../lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/../webpack/buildin/module.js","webpack://JitsiMeetJS/../sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/../bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/../async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/../rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/Worker.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/QualityController.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/../webpack/buildin/amd-options.js","webpack://JitsiMeetJS/../current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/../timers-browserify/main.js","webpack://JitsiMeetJS/../setimmediate/setImmediate.js","webpack://JitsiMeetJS/../sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","BrowserCapabilities","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","callStats","values","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","config","keepPts","rtcpFb","AUDIO","PRESENTER","VIDEO","usesAdapter","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevices","availableDevicesPollTimer","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafari","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","chromeMediaSourceId","bandwidth","firefox_fake_device","fake","screen","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","label","RTCUtils","Listenable","super","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","getTrackID","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","_newGetUserMediaWithConstraints","umDevices","_newGetDesktopMedia","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","obtainAudioAndVideoPermissions","devices","includes","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingSources","gumOptions","trackOptions","newObtainAudioAndVideoPermissions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","getTracks","applyConstraints","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","autoGainControl","noiseSuppression","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","isDeviceChangeAvailable","deviceType","mediaStream","release","url","revokeObjectURL","isDesktopSharingEnabled","setAudioOutputDevice","getAudioOutputDevice","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","rtcUtils","origAttachMediaStream","apply","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","mediaStreamMetaData","metaData","getSettings","RTC","conference","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_senderVideoConstraints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","destroy","_channelOpenListener","initializeBridgeChannel","wsUrl","BridgeChannel","_senderVideoConstraintsChanged","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","senderVideoConstraints","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","JitsiConferenceEvents","onCallEnded","setReceiverVideoConstraint","maxFrameHeight","isOpen","selectEndpoints","ids","pinEndpoint","eventType","createPeerConnection","signaling","iceConfig","isP2P","getPCConstraints","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","supportsSdpSemantics","sdpSemantics","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLastN","getSenderVideoConstraints","getLocalVideoTrack","localVideo","getLocalTracks","getLocalAudioTrack","localAudio","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","removeLocalTrack","pos","removeRemoteTracks","owner","removedTracks","pcRemovedTracks","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","getName","isOpera","isIExplorer","isNWJS","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","jitsiLocalStorage","storage","localStorage","keyName","keyValue","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","each","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","__","parameter","hdrExt","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","removeEventListener","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","_callStatsUserName","_machineId","_p8","username","UsernameGenerator","generateUsername","generateCallStatsUserName","jitsiMeetId","generateJitsiMeetId","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","getConnectionPluginDefinition","base","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","enableLipSync","rayo","supportsInsertableStreams","testing","disableE2EE","isPingSupported","_pingSupported","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","useStunTurn","p2p","getStunAndTurnCredentials","_resetState","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","f","fr","endsWith","JitsiConnectionEvents","_onPrivateMessage","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","attaching","anonymousdomain","hosts","configDomain","hostname","createRoom","roomName","onCreateResource","roomjid","customDomain","muc","mucNickname","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","MucConnectionPlugin","JingleConnectionPlugin","PingConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","argsTag","funcTag","genTag","mapTag","setTag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Uint8Array","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","getTag","isFunc","buffer","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","arrayBuffer","newValue","getMapData","getValue","cache","pairs","LARGE_ARRAY_SIZE","other","ArrayBuffer","ctorString","isLength","baseKeys","CONN_STATUS_CHANGED","_options","_resumeRetryN","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","_deferredIQs","_status","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","Events","_clearDeferredIQs","deferred","closeWebsocket","_resumeTimeout","streamManagement","getResumeToken","intervalWithJitter","fetch","timeLeft","sendIQ2","sendBeacon","resumeToken","retryTimeout","getJitterDelay","ENVIRONMENT","gumFunction","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","JitsiMeetScreenObtainer","openDesktopPicker","streamType","onGetStreamResponse","errorCallback","getDisplayMedia","applyConstraintsPromise","videoTrack","g","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","remoteDescription","usesUnifiedPlan","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","enableLayerSuspension","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","getRemoteRecvMaxFrameHeight","idealHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","replaceTransport","jingleOfferElem","originalOffer","clone","remove","newFingerprint","sendTransportAccept","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","offerIq","remoteSdp","removeSsrcInfo","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","isVideoTrack","clearRecvonlySsrc","shouldRenegotiate","newLocalSDP","setMaxBitRate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","doesVideoMuteByStreamRemove","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","finishCallback","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","binding","cwd","chdir","dir","umask","objectTag","typedArrayTags","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","isArg","isBuff","isType","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","othLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","isMasked","arrLength","seen","arrValue","othIndex","resIndex","arrayFilter","baseUnary","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","getFeatures","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_notifyVersionChanged","_identities","_features","oldVersion","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","active","getMSID","trackId","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","AudioContextImpl","E2E_RTT_CHANGED","SIM_LAYER_RIDS","TPCUtils","simulcastEncodings","scaleResolutionDownBy","simulcastStreamConstraints","_ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","_getStreamEncodings","isSimulcastOn","_insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","_setSimulcastStreamConstraints","encoding","transceiverInit","sendEncodings","addTransceiver","getTransceivers","addStream","setEncodings","sender","stopped","localSSRCs","_addedStreams","_extractPrimarySSRC","getParameters","encodings","setParameters","transceivers","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","crypto","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","_setEffectInProgress","effect","isEnabled","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","enabled","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","_onByteSentStatsReceived","bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","_trackMuteChanged","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","children","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","isDevicePermissionGranted","supported","promises","results","every","permissionStatus","isMultipleAudioInputSupported","emitEvent","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","download","Blob","href","click","getRecordingResults","getFileType","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","e2eping","E2ePing","setupRTCListeners","qualityController","QualityController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_delayedIceFailed","cancel","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","_getMediaSessions","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","setVideoMute","addAsUnmutePromises","removeAsMutePromises","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","pinParticipant","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","setAffiliation","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","nick","statsID","botType","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","supportsP2P","errorMsg","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_e2eEncryption","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","bridgeChannelType","openBridgeChannel","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","metadata","time","ua","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","prop","overallFeedback","detailedFeedback","remoteUserId","getLocalSSRC","getSSRC","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","isEqual","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","meetingId","isE2EESupported","_initializeE2EEncryption","E2EEncryption","setE2EEKey","setKey","isLobbySupported","getLobby","isMembersOnly","membersOnlyEnabled","enableLobby","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","setParticipantPropertyListener","recorderSession","logObject","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","ondevicechange","supportsLocalCandidateRttStatistics","supportsReceiverStats","RTCRtpReceiver","supportsRTTStatistics","RTCRtpTransceiver","_getChromiumBasedVersion","RTCRtpSender","createEncodedStreams","createEncodedVideoStreams","chromium","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","audioCodec","videoBitrateDownload","videoBitrateUpload","videoCodec","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localIp","networkType","currentRoundTripTime","framerateMean","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","oldValue","isAudioMuted","_isMediaTypeMuted","_getFeaturesPromise","getBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","retry","minDelay","LastRequestTracker","_lastSuccess","xmppConnection","stropheConnection","originalRawInput","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","lobby","Lobby","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","presenceUpdateTime","customJoinPresenceExtensions","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","disableDiscoInfo","getForm","form","formSubmit","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","onParticipantLeft","skipEvents","onMucMemberLeft","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","passwordSelect","lobbyRoomNode","lobbyRoomJid","grantIQ","kickIQ","onError","onNotSupported","formsubmit","setMembersOnly","sendGrantMembershipIq","grantMembership","formToSubmit","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","getMediaPresenceInfo","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","clean","onMucLeft","doReject","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","openSctp","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","opusMaxAverageBitrate","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","ConnectionPlugin","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","ack","sess","startMuted","successTime","me","iceservers","dict","credential","temp","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","task","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","end","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getPeerMediaInfo","getSSRCOwner","StropheLogger","logIncoming","logOutgoing","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","senderVideoConstraintsChanged","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","OPEN","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","videoConstraints","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","getCapabilities","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","remoteCodec","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","tpcUtils","statsinterval","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","what","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_setVideoType","setMute","getSynchronizationSources","endpoints","endpointTrackMap","mediaTrack","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","peerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","isMediaStreamInPc","findSenderByKind","findSenderByStream","findReceiverForTrack","findSenderForTrack","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","toUnifiedPlan","videoSender","preference","degradationPreference","presenterEnabled","mungeRemoteDescription","currentDescription","newHeight","encodingsEnabledState","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","hasCameraTrack","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","oaPromise","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","modifyRtxSsrcs2","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","cachedPrimarySsrc","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","primaryCname","_transformMediaIdentifiers","pcId","streamAndTrackIDs","sessionDesc","audioMLine","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","DelayedIceFailedEvent","emitIceFailed","_emitIceFailed","_delay","_onlineListener","_maybeSetDelayTimeout","_delayTimeout","enableIceRestart","_canceled","jvbConnection","jvbConnIceState","_iceFailedTimeout","_delayedIceFailedEvent","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","_e2eeCtx","E2EEContext","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_setupSenderE2EEForTrack","handleReceiver","handleSender","kJitsiE2EE","E2EEcontext","_worker","Worker","createWorkerScript","encoder","TextEncoder","postMessage","operation","encode","receiverStreams","createEncodedAudioStreams","readableStream","writableStream","senderStreams","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_propagateSendMaxFrameHeight","mediaSession","preferredReceiveMaxFrameHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","addNext","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","allSettled","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","ProxyConnectionService","jitsiConnection","otherOptions","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","shimRTCPeerConnection","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","preferredMediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter","shimChrome","shimFirefox","shimEdge","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","edgeShim","safariShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 137);\n","const XMPPEvents = {\r\n    /**\r\n     * Indicates error while adding ice candidate.\r\n     */\r\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\r\n\r\n    // Designates an event indicating that the focus has asked us to mute our\r\n    // audio.\r\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\r\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\r\n    BRIDGE_DOWN: 'xmpp.bridge_down',\r\n\r\n    /**\r\n     * Triggered when 'session-accept' is received from the responder.\r\n     */\r\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\r\n\r\n    // Designates an event indicating that an offer (e.g. Jingle\r\n    // session-initiate) was received.\r\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\r\n\r\n    // Triggered when Jicofo kills our media session, this can happen while\r\n    // we're still in the MUC, when it decides to terminate the media session.\r\n    // For example when the session is idle for too long, because we're the only\r\n    // person in the conference room.\r\n    CALL_ENDED: 'xmpp.callended.jingle',\r\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\r\n\r\n    // The conference properties (as advertised by jicofo) have changed\r\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\r\n\r\n    /**\r\n     * This event is triggered when the ICE connects for the first time.\r\n     */\r\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\r\n\r\n    // Designates an event indicating that the connection to the XMPP server\r\n    // failed.\r\n    CONNECTION_FAILED: 'xmpp.connection.failed',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // interrupted. This should go to the RTC module.\r\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // restored. This should go to the RTC module.\r\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\r\n\r\n    // Designates an event indicating that the media (ICE) connection failed.\r\n    // This should go to the RTC module.\r\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\r\n\r\n    /**\r\n     * Designates an event indicating connection status changes.\r\n     */\r\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\r\n\r\n    // Designates an event indicating that the display name of a participant\r\n    // has changed.\r\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\r\n\r\n    /**\r\n     * Chat room instance have been added to Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\r\n\r\n    /**\r\n     * Chat room instance have been removed from Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\r\n    ETHERPAD: 'xmpp.etherpad',\r\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\r\n    FOCUS_LEFT: 'xmpp.focus_left',\r\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\r\n\r\n    /**\r\n     * Event fired when 'transport-replace' Jingle message has been received,\r\n     * before the new offer is set on the PeerConnection.\r\n     */\r\n    ICE_RESTARTING: 'rtc.ice_restarting',\r\n\r\n    /**\r\n     * Event fired after the 'transport-replace' message has been processed\r\n     * and the new offer has been set successfully.\r\n     */\r\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\r\n\r\n    /**\r\n     * Designates an event indicating that we were kicked from the XMPP MUC.\r\n     * @param {boolean} isSelfPresence - whether it is for local participant\r\n     * or another participant.\r\n     * @param {string} actorJid - the jid of the participant who was initator\r\n     * of the kick.\r\n     * @param {?string} participantJid - when it is not a kick for local participant,\r\n     * this is the jid of the participant which was kicked.\r\n     */\r\n    KICKED: 'xmpp.kicked',\r\n\r\n    // Designates an event indicating that our role in the XMPP MUC has changed.\r\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\r\n\r\n    /**\r\n     * Event fired when the unique meeting id is set.\r\n     */\r\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\r\n\r\n    // Designates an event indicating that an XMPP message in the MUC was\r\n    // received.\r\n    MESSAGE_RECEIVED: 'xmpp.message_received',\r\n\r\n    // Designates an event indicating that an invite XMPP message in the MUC was\r\n    // received.\r\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\r\n\r\n    // Designates an event indicating that a private XMPP message in the MUC was\r\n    // received.\r\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\r\n\r\n    // Designates an event indicating that a bot participant type had changed\r\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\r\n\r\n    // Designates an event indicating that the XMPP MUC was destroyed.\r\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\r\n\r\n    // Designates an event indicating that we have joined the XMPP MUC.\r\n    MUC_JOINED: 'xmpp.muc_joined',\r\n\r\n    // Designates an event indicating that a participant joined the XMPP MUC.\r\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\r\n\r\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\r\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\r\n\r\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\r\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\r\n\r\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\r\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\r\n\r\n    // Designates an event indicating that local participant left the muc\r\n    MUC_LEFT: 'xmpp.muc_left',\r\n\r\n    // Designates an event indicating that the MUC role of a participant has\r\n    // changed.\r\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\r\n\r\n    // Designates an event indicating that the MUC has been locked or unlocked.\r\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\r\n\r\n    // Designates an event indicating that the MUC members only config has changed.\r\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have audio muted (or unmuted).\r\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have video muted (or unmuted).\r\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\r\n\r\n    // Designates an event indicating that the video type (e.g. 'camera' or\r\n    // 'screen') for a participant has changed.\r\n    // Note: currently this event fires every time we receive presence from\r\n    // someone (regardless of whether or not the \"video type\" changed).\r\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\r\n\r\n    /**\r\n     * Indicates that the features of the participant has been changed.\r\n     */\r\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\r\n    PASSWORD_REQUIRED: 'xmpp.password_required',\r\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\r\n\r\n    /**\r\n     * Indicates that phone number changed.\r\n     */\r\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\r\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\r\n    PRESENCE_STATUS: 'xmpp.presence_status',\r\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\r\n\r\n    // xmpp is connected and obtained user media\r\n    READY_TO_JOIN: 'xmpp.ready_to_join',\r\n\r\n    /**\r\n     * Indicates that recording state changed.\r\n     */\r\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\r\n\r\n    // Designates an event indicating that we received statistics from a\r\n    // participant in the MUC.\r\n    REMOTE_STATS: 'xmpp.remote_stats',\r\n\r\n    /**\r\n     * Indicates that the offer / answer renegotiation has failed.\r\n     */\r\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\r\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\r\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\r\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\r\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\r\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\r\n\r\n    /**\r\n     * Indicates that max users limit has been reached.\r\n     */\r\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\r\n\r\n    // Designates an event indicating that we sent an XMPP message to the MUC.\r\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\r\n\r\n    // Designates an event indicating that we sent a private XMPP message to\r\n    // a specific user of the muc.\r\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\r\n\r\n    /**\r\n     * Event fired when we do not get our 'session-accept' acknowledged by\r\n     * Jicofo. It most likely means that there is serious problem with our\r\n     * connection or XMPP server and we should reload the conference.\r\n     *\r\n     * We have seen that to happen in BOSH requests race condition when the BOSH\r\n     * request table containing the 'session-accept' was discarded by Prosody.\r\n     * Jicofo does send the RESULT immediately without any condition, so missing\r\n     * packets means that most likely it has never seen our IQ.\r\n     */\r\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\r\n\r\n    /**\r\n     * Event fired when speaker stats update message is received.\r\n     */\r\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\r\n\r\n    /**\r\n     * Event fired when conference creation timestamp is received.\r\n     */\r\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\r\n\r\n    // Designates an event indicating that we should join the conference with\r\n    // audio and/or video muted.\r\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\r\n\r\n    // Designates an event indicating that the subject of the XMPP MUC has\r\n    // changed.\r\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\r\n\r\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\r\n    // suspending detected\r\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\r\n\r\n    /**\r\n     * Notifies for transcription status changes. The event provides the\r\n     * following parameters to its listeners:\r\n     *\r\n     * @param {String} status - The new status.\r\n     */\r\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\r\n\r\n    /**\r\n     * Event fired when 'transport-info' with new ICE candidates is received.\r\n     */\r\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\r\n\r\n    /**\r\n     * Indicates that video SIP GW state changed.\r\n     *\r\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\r\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\r\n     */\r\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\r\n\r\n    /**\r\n     * Indicates that video SIP GW Session state changed.\r\n     * The statuses are any of the following statuses:\r\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\r\n     * {@see VideoSIPGWConstants}\r\n     *\r\n     * @param {options} event - {address, oldState, newState, displayName}.\r\n     */\r\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\r\n        'xmpp.videoSIPGWSessionStateChanged',\r\n\r\n    // Designates an event indicating that the local ICE connection state has\r\n    // changed.\r\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\r\n\r\n    /**\r\n     * Event which is emitted when the body in an XMPP message in the MUC\r\n     * contains JSON\r\n     */\r\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\r\n};\r\n\r\nmodule.exports = XMPPEvents;\r\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","/**\r\n * The events for the conference.\r\n */\r\n\r\n/**\r\n * Event indicates that the current conference audio input switched between audio\r\n * input states,i.e. with or without audio input.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\r\n\r\n/**\r\n * Indicates that authentication status changed.\r\n */\r\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\r\n\r\n/**\r\n * Fired just before the statistics module is disposed and it's the last chance\r\n * to submit some logs to the statistics service (ex. CallStats if enabled),\r\n * before it's disconnected.\r\n */\r\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\r\n\r\n/**\r\n * Indicates that an error occured.\r\n */\r\nexport const CONFERENCE_ERROR = 'conference.error';\r\n\r\n/**\r\n * Indicates that conference failed.\r\n */\r\nexport const CONFERENCE_FAILED = 'conference.failed';\r\n\r\n/**\r\n * Indicates that conference has been joined. The event does NOT provide any\r\n * parameters to its listeners.\r\n */\r\nexport const CONFERENCE_JOINED = 'conference.joined';\r\n\r\n/**\r\n * Indicates that conference has been left.\r\n */\r\nexport const CONFERENCE_LEFT = 'conference.left';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been established\r\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\r\n * state for the first time.\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been interrupted for some\r\n * reason.\r\n * XXX This is currently fired when the *ICE* connection is interrupted.\r\n */\r\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been restored.\r\n * XXX This is currently fired when the *ICE* connection is restored.\r\n */\r\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\r\n\r\n/**\r\n * A connection to the video bridge's data channel has been established.\r\n */\r\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\r\n\r\n/**\r\n * A user has changed it display name\r\n */\r\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\r\n\r\n/**\r\n * The dominant speaker was changed.\r\n */\r\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\r\n\r\n/**\r\n * UTC conference timestamp when first participant joined.\r\n */\r\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\r\n\r\n/**\r\n * Indicates that a message from another participant is received on data\r\n * channel.\r\n */\r\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\r\n\r\n/**\r\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\r\n *\r\n * Event emitted when conference transits, between one to one and multiparty JVB\r\n * conference. If the conference switches to P2P it's neither one to one nor\r\n * a multiparty JVB conference, but P2P (the status argument of this event will\r\n * be <tt>false</tt>).\r\n *\r\n * The first argument is a boolean which carries the previous value and\r\n * the seconds argument is a boolean with the new status. The event is emitted\r\n * only if the previous and the new values are different.\r\n *\r\n * @type {string}\r\n */\r\nexport const JVB121_STATUS = 'conference.jvb121Status';\r\n\r\n/**\r\n * You are kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n */\r\nexport const KICKED = 'conference.kicked';\r\n\r\n/**\r\n * Participant was kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n * @param {JitsiParticipant} the participant that was kicked.\r\n */\r\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\r\n\r\n/**\r\n * The Last N set is changed.\r\n *\r\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\r\n * which are leaving Last N\r\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\r\n * which are entering Last N\r\n */\r\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\r\n\r\n/**\r\n * Indicates that the room has been locked or unlocked.\r\n */\r\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\r\n\r\n/**\r\n * Indicates that the region of the media server (jitsi-videobridge) that we\r\n * are connected to changed (or was initially set).\r\n * @type {string} the region.\r\n */\r\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\r\n\r\n/**\r\n * An event(library-private) fired when a new media session is added to the conference.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\r\n\r\n/**\r\n * An event(library-private) fired when the conference switches the currently active media session.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\r\n\r\n/**\r\n * Indicates that the conference had changed to members only enabled/disabled.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running in members only mode.\r\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\r\n */\r\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\r\n\r\n/**\r\n * New text message was received.\r\n */\r\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\r\n\r\n/**\r\n * Event indicates that the current selected input device has no signal\r\n */\r\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\r\n\r\n/**\r\n * Event indicates that the current microphone used by the conference is noisy.\r\n */\r\nexport const NOISY_MIC = 'conference.noisy_mic';\r\n\r\n/**\r\n * New private text message was received.\r\n */\r\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\r\n\r\n/**\r\n * Event fired when JVB sends notification about interrupted/restored user's\r\n * ICE connection status or we detect local problem with the video track.\r\n * First argument is the ID of the participant and\r\n * the seconds is a string indicating if the connection is currently\r\n * - active - the connection is active\r\n * - inactive - the connection is inactive, was intentionally interrupted by\r\n * the bridge\r\n * - interrupted - a network problem occurred\r\n * - restoring - the connection was inactive and is restoring now\r\n *\r\n * The current status value can be obtained by calling\r\n * JitsiParticipant.getConnectionStatus().\r\n */\r\nexport const PARTICIPANT_CONN_STATUS_CHANGED\r\n    = 'conference.participant_conn_status_changed';\r\n\r\n/**\r\n * Indicates that the features of the participant has been changed.\r\n */\r\nexport const PARTCIPANT_FEATURES_CHANGED\r\n    = 'conference.partcipant_features_changed';\r\n\r\n/**\r\n * Indicates that a the value of a specific property of a specific participant\r\n * has changed.\r\n */\r\nexport const PARTICIPANT_PROPERTY_CHANGED\r\n    = 'conference.participant_property_changed';\r\n\r\n/**\r\n * Indicates that the conference has switched between JVB and P2P connections.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running on the P2P connection.\r\n */\r\nexport const P2P_STATUS = 'conference.p2pStatus';\r\n\r\n/**\r\n * Indicates that phone number changed.\r\n */\r\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\r\n\r\n/**\r\n * The conference properties changed.\r\n * @type {string}\r\n */\r\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\r\n\r\n/**\r\n * Indicates that recording state changed.\r\n */\r\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW state changed.\r\n * @param {VideoSIPGWConstants} status.\r\n */\r\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\r\n    = 'conference.videoSIPGWAvailabilityChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW Session state changed.\r\n * @param {options} event - {\r\n *     {string} address,\r\n *     {VideoSIPGWConstants} oldState,\r\n *     {VideoSIPGWConstants} newState,\r\n *     {string} displayName}\r\n * }.\r\n */\r\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\r\n    = 'conference.videoSIPGWSessionStateChanged';\r\n\r\n/**\r\n * Indicates that start muted settings changed.\r\n */\r\nexport const START_MUTED_POLICY_CHANGED\r\n    = 'conference.start_muted_policy_changed';\r\n\r\n/**\r\n * Indicates that the local user has started muted.\r\n */\r\nexport const STARTED_MUTED = 'conference.started_muted';\r\n\r\n/**\r\n * Indicates that subject of the conference has changed.\r\n */\r\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\r\n\r\n/**\r\n * Event indicates that local user is talking while he muted himself\r\n */\r\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\r\n\r\n/**\r\n * A new media track was added to the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the added JitsiTrack\r\n */\r\nexport const TRACK_ADDED = 'conference.trackAdded';\r\n\r\n/**\r\n * Audio levels of a media track ( attached to the conference) was changed.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\r\n\r\n/**\r\n * A media track ( attached to the conference) mute status was changed.\r\n * @param {JitsiParticipant|null} the participant that initiated the mute\r\n * if it is a remote mute.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\r\n\r\n/**\r\n * The media track was removed from the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the removed JitsiTrack\r\n */\r\nexport const TRACK_REMOVED = 'conference.trackRemoved';\r\n\r\n/**\r\n * Notifies for transcription status changes. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {String} status - The new status.\r\n */\r\nexport const TRANSCRIPTION_STATUS_CHANGED\r\n    = 'conference.transcriptionStatusChanged';\r\n\r\n\r\n/**\r\n * A new user joined the conference.\r\n */\r\nexport const USER_JOINED = 'conference.userJoined';\r\n\r\n/**\r\n * A user has left the conference.\r\n */\r\nexport const USER_LEFT = 'conference.userLeft';\r\n\r\n/**\r\n * User role changed.\r\n */\r\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\r\n\r\n/**\r\n * User status changed.\r\n */\r\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\r\n\r\n/**\r\n * Event indicates that the bot participant type changed.\r\n */\r\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\r\n\r\n/**\r\n * A new user joined the lobby room.\r\n */\r\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\r\n\r\n/**\r\n * A user from the lobby room has been update.\r\n */\r\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\r\n\r\n/**\r\n * A user left the lobby room.\r\n */\r\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\r\n","import BrowserCapabilities from './BrowserCapabilities';\r\n\r\nexport default new BrowserCapabilities();\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require(\"./Logger\");\r\nvar LogCollector = require(\"./LogCollector\");\r\n\r\n/**\r\n * Definition of the log method\r\n * @name log_method\r\n * @function\r\n * @param {...*} log_args the arguments to be logged\r\n */\r\n/**\r\n * The logger's transport type definition.\r\n *\r\n * @typedef {object} LoggerTransport\r\n *\r\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\r\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\r\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\r\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\r\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\r\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\r\n */\r\n\r\n/**\r\n * Map with the created loggers with ID.\r\n */\r\nvar idLoggers = {};\r\n\r\n/**\r\n * Array with the loggers without id.\r\n */\r\nvar loggers = [];\r\n\r\n/**\r\n * Log level for the lbrary.\r\n */\r\nvar curLevel = Logger.levels.TRACE;\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Adds given {@link LoggerTransport} instance to the list of global\r\n     * transports which means that it'll be used by all {@link Logger}s\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    addGlobalTransport: function(transport) {\r\n        Logger.addGlobalTransport(transport);\r\n    },\r\n    /**\r\n     * Removes given {@link LoggerTransport} instance from the list of global\r\n     * transports\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    removeGlobalTransport: function(transport) {\r\n        Logger.removeGlobalTransport(transport);\r\n    },\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    */\r\n    setGlobalOptions: function(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n    /**\r\n     * Creates new logger.\r\n     * @arguments the same as Logger constructor\r\n     */\r\n    getLogger: function(id, transports, options) {\r\n        var logger = new Logger(curLevel, id, transports, options);\r\n        if(id) {\r\n            idLoggers[id] = idLoggers[id] || [];\r\n            idLoggers[id].push(logger);\r\n        } else {\r\n            loggers.push(logger);\r\n        }\r\n        return logger;\r\n    },\r\n    /**\r\n     * Changes the log level for the existing loggers by id.\r\n     * @param level the new log level.\r\n     * @param id if specified the level will be changed only for loggers with the\r\n     * same id. Otherwise the operation will affect all loggers that don't\r\n     * have id.\r\n     */\r\n    setLogLevelById: function(level, id) {\r\n        var l = id? (idLoggers[id] || []) : loggers;\r\n        for(var i = 0; i < l.length; i++) {\r\n            l[i].setLevel(level);\r\n        }\r\n    },\r\n    /**\r\n     * Changes the log level for all existing loggers.\r\n     * @param level the new log level.\r\n     */\r\n    setLogLevel: function (level) {\r\n        curLevel = level;\r\n        var i = 0;\r\n        for(; i < loggers.length; i++) {\r\n            loggers[i].setLevel(level);\r\n        }\r\n\r\n        for(var id in idLoggers) {\r\n            var l = idLoggers[id] || [];\r\n            for(i = 0; i < l.length; i++) {\r\n                l[i].setLevel(level);\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * The supported log levels.\r\n     */\r\n    levels: Logger.levels,\r\n    /**\r\n     * Exports the <tt>LogCollector</tt>.\r\n     */\r\n    LogCollector: LogCollector\r\n};\r\n","import EventEmitter from 'events';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport analytics from './AnalyticsAdapter';\r\nimport CallStats from './CallStats';\r\nimport LocalStats from './LocalStatsCollector';\r\nimport RTPStats from './RTPStatsCollector';\r\n\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Stores all active {@link Statistics} instances.\r\n * @type {Set<Statistics>}\r\n */\r\nlet _instances;\r\n\r\n/**\r\n * True if callstats API is loaded\r\n */\r\nlet isCallstatsLoaded = false;\r\n\r\n/**\r\n * Since callstats.io is a third party, we cannot guarantee the quality of their\r\n * service. More specifically, their server may take noticeably long time to\r\n * respond. Consequently, it is in our best interest (in the sense that the\r\n * intergration of callstats.io is pretty important to us but not enough to\r\n * allow it to prevent people from joining a conference) to (1) start\r\n * downloading their API as soon as possible and (2) do the downloading\r\n * asynchronously.\r\n *\r\n * @param {StatisticsOptions} options - Options to use for downloading and\r\n * initializing callstats backend.\r\n */\r\nfunction loadCallStatsAPI(options) {\r\n    if (!isCallstatsLoaded) {\r\n        ScriptUtil.loadScript(\r\n            options.customScriptUrl\r\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ () => _initCallStatsBackend(options)\r\n        );\r\n        isCallstatsLoaded = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes Callstats backend.\r\n *\r\n * @param {StatisticsOptions} options - The options to use for initializing\r\n * callstats backend.\r\n * @private\r\n */\r\nfunction _initCallStatsBackend(options) {\r\n    if (CallStats.isBackendInitialized()) {\r\n        return;\r\n    }\r\n\r\n    if (!CallStats.initBackend({\r\n        callStatsID: options.callStatsID,\r\n        callStatsSecret: options.callStatsSecret,\r\n        userName: options.userName,\r\n        aliasName: options.aliasName,\r\n        applicationName: options.applicationName,\r\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\r\n        confID: options.confID,\r\n        siteID: options.siteID\r\n    })) {\r\n        logger.error('CallStats Backend initialization failed bad');\r\n    }\r\n}\r\n\r\n/**\r\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\r\n * \"message\" and \"constraintName\". So we need to bundle additional information\r\n * from JitsiTrackError into error passed to callstats to preserve valuable\r\n * information about error.\r\n * @param {JitsiTrackError} error\r\n */\r\nfunction formatJitsiTrackErrorForCallStats(error) {\r\n    const err = new Error();\r\n\r\n    // Just copy original stack from error\r\n    err.stack = error.stack;\r\n\r\n    // Combine name from error's name plus (possibly) name of original GUM error\r\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\r\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\r\n\r\n    // Put all constraints into this field. For constraint failed errors we will\r\n    // still know which exactly constraint failed as it will be a part of\r\n    // message.\r\n    err.constraintName = error.gum && error.gum.constraints\r\n        ? JSON.stringify(error.gum.constraints) : '';\r\n\r\n    // Just copy error's message.\r\n    err.message = error.message;\r\n\r\n    return err;\r\n}\r\n\r\n/**\r\n * Init statistic options\r\n * @param options\r\n */\r\nStatistics.init = function(options) {\r\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\r\n    if (typeof options.pcStatsInterval === 'number') {\r\n        Statistics.pcStatsInterval = options.pcStatsInterval;\r\n    }\r\n\r\n    if (typeof options.audioLevelsInterval === 'number') {\r\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\r\n    }\r\n\r\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\r\n};\r\n\r\n/**\r\n * The options to configure Statistics.\r\n * @typedef {Object} StatisticsOptions\r\n * @property {string} applicationName - The application name to pass to\r\n * callstats.\r\n * @property {string} aliasName - The alias name to use when initializing callstats.\r\n * @property {string} userName - The user name to use when initializing callstats.\r\n * @property {string} confID - The callstats conference ID to use.\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} customScriptUrl - A custom lib url to use when downloading\r\n * callstats library.\r\n * @property {string} roomName - The room name we are currently in.\r\n */\r\n/**\r\n *\r\n * @param xmpp\r\n * @param {StatisticsOptions} options - The options to use creating the\r\n * Statistics.\r\n */\r\nexport default function Statistics(xmpp, options) {\r\n    /**\r\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\r\n     * collect RTP statistics for each peerconnection.\r\n     * @type {Map<string, RTPStats}\r\n     */\r\n    this.rtpStatsMap = new Map();\r\n    this.eventEmitter = new EventEmitter();\r\n    this.xmpp = xmpp;\r\n    this.options = options || {};\r\n\r\n    this.callStatsIntegrationEnabled\r\n        = this.options.callStatsID && this.options.callStatsSecret\r\n\r\n            // Even though AppID and AppSecret may be specified, the integration\r\n            // of callstats.io may be disabled because of globally-disallowed\r\n            // requests to any third parties.\r\n            && (Statistics.disableThirdPartyRequests !== true);\r\n    if (this.callStatsIntegrationEnabled) {\r\n        this.callStatsApplicationLogsDisabled\r\n            = this.options.callStatsApplicationLogsDisabled;\r\n        if (browser.isReactNative()) {\r\n            _initCallStatsBackend(this.options);\r\n        } else {\r\n            loadCallStatsAPI(this.options);\r\n        }\r\n\r\n        if (!this.options.confID) {\r\n            logger.warn('\"confID\" is not defined');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores {@link CallStats} instances for each\r\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\r\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\r\n     * @type {Map<number, CallStats>}\r\n     */\r\n    this.callsStatsInstances = new Map();\r\n\r\n    Statistics.instances.add(this);\r\n}\r\nStatistics.audioLevelsEnabled = false;\r\nStatistics.audioLevelsInterval = 200;\r\nStatistics.pcStatsInterval = 10000;\r\nStatistics.disableThirdPartyRequests = false;\r\nStatistics.analytics = analytics;\r\n\r\nObject.defineProperty(Statistics, 'instances', {\r\n    /**\r\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\r\n     * initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<Statistics>}\r\n     */\r\n    get() {\r\n        if (!_instances) {\r\n            _instances = new Set();\r\n        }\r\n\r\n        return _instances;\r\n    }\r\n});\r\n\r\n/**\r\n * Starts collecting RTP stats for given peerconnection.\r\n * @param {TraceablePeerConnection} peerconnection\r\n */\r\nStatistics.prototype.startRemoteStats = function(peerconnection) {\r\n    this.stopRemoteStats(peerconnection);\r\n\r\n    try {\r\n        const rtpStats\r\n            = new RTPStats(\r\n                peerconnection,\r\n                Statistics.audioLevelsInterval,\r\n                Statistics.pcStatsInterval,\r\n                this.eventEmitter);\r\n\r\n        rtpStats.start(Statistics.audioLevelsEnabled);\r\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\r\n    } catch (e) {\r\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\r\n    }\r\n};\r\n\r\nStatistics.localStats = [];\r\n\r\nStatistics.startLocalStats = function(stream, callback) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\r\n        callback);\r\n\r\n    this.localStats.push(localStats);\r\n    localStats.start();\r\n};\r\n\r\nStatistics.prototype.addAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.removeAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.addConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        listener);\r\n};\r\n\r\nStatistics.prototype.addByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\r\n        listener);\r\n};\r\n\r\nStatistics.prototype.dispose = function() {\r\n    try {\r\n        // NOTE Before reading this please see the comment in stopCallStats...\r\n        //\r\n        // Here we prevent from emitting the event twice in case it will be\r\n        // triggered from stopCallStats.\r\n        // If the event is triggered from here it means that the logs will not\r\n        // be submitted anyway (because there is no CallStats instance), but\r\n        // we're doing that for the sake of some kind of consistency.\r\n        if (!this.callsStatsInstances.size) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        for (const callStats of this.callsStatsInstances.values()) {\r\n            this.stopCallStats(callStats.tpc);\r\n        }\r\n        for (const tpcId of this.rtpStatsMap.keys()) {\r\n            this._stopRemoteStats(tpcId);\r\n        }\r\n        if (this.eventEmitter) {\r\n            this.eventEmitter.removeAllListeners();\r\n        }\r\n    } finally {\r\n        Statistics.instances.delete(this);\r\n    }\r\n};\r\n\r\nStatistics.stopLocalStats = function(stream) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < Statistics.localStats.length; i++) {\r\n        if (Statistics.localStats[i].stream === stream) {\r\n            const localStats = Statistics.localStats.splice(i, 1);\r\n\r\n            localStats[0].stop();\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Stops remote RTP stats for given peerconnection ID.\r\n * @param {string} tpcId {@link TraceablePeerConnection.id}\r\n * @private\r\n */\r\nStatistics.prototype._stopRemoteStats = function(tpcId) {\r\n    const rtpStats = this.rtpStatsMap.get(tpcId);\r\n\r\n    if (rtpStats) {\r\n        rtpStats.stop();\r\n        this.rtpStatsMap.delete(tpcId);\r\n    }\r\n};\r\n\r\n/**\r\n * Stops collecting RTP stats for given peerconnection\r\n * @param {TraceablePeerConnection} tpc\r\n */\r\nStatistics.prototype.stopRemoteStats = function(tpc) {\r\n    this._stopRemoteStats(tpc.id);\r\n};\r\n\r\n// CALSTATS METHODS\r\n\r\n/**\r\n * Initializes the callstats.io API.\r\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\r\n * instance for which CalStats will be started.\r\n * @param {string} remoteUserID\r\n */\r\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\r\n    if (!this.callStatsIntegrationEnabled) {\r\n        return;\r\n    } else if (this.callsStatsInstances.has(tpc.id)) {\r\n        logger.error('CallStats instance for ${tpc} exists already');\r\n\r\n        return;\r\n    }\r\n\r\n    logger.info(`Starting CallStats for ${tpc}...`);\r\n\r\n    const newInstance\r\n        = new CallStats(\r\n            tpc,\r\n            {\r\n                confID: this.options.confID,\r\n                remoteUserID\r\n            });\r\n\r\n    this.callsStatsInstances.set(tpc.id, newInstance);\r\n};\r\n\r\n/**\r\n * Obtains the list of *all* {@link CallStats} instances collected from every\r\n * valid {@link Statistics} instance.\r\n * @return {Set<CallStats>}\r\n * @private\r\n */\r\nStatistics._getAllCallStatsInstances = function() {\r\n    const csInstances = new Set();\r\n\r\n    for (const statistics of Statistics.instances) {\r\n        for (const cs of statistics.callsStatsInstances.values()) {\r\n            csInstances.add(cs);\r\n        }\r\n    }\r\n\r\n    return csInstances;\r\n};\r\n\r\n/**\r\n * Removes the callstats.io instances.\r\n */\r\nStatistics.prototype.stopCallStats = function(tpc) {\r\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (callStatsInstance) {\r\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\r\n        // able to submit the last log batch from jitsi-meet to CallStats. After\r\n        // recent changes we dispose the CallStats earlier\r\n        // (before Statistics.dispose), so we need to emit this event here to\r\n        // give this last chance for final log batch submission.\r\n        //\r\n        // Eventually there should be a separate module called \"log storage\"\r\n        // which should emit proper events when it's underlying\r\n        // CallStats instance is going away.\r\n        if (this.callsStatsInstances.size === 1) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        this.callsStatsInstances.delete(tpc.id);\r\n\r\n        // The fabric needs to be terminated when being stopped\r\n        callStatsInstance.sendTerminateEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nStatistics.prototype.isCallstatsEnabled = function() {\r\n    return this.callStatsIntegrationEnabled;\r\n};\r\n\r\n/**\r\n * Logs either resume or hold event for the given peer connection.\r\n * @param {TraceablePeerConnection} tpc the connection for which event will be\r\n * reported\r\n * @param {boolean} isResume true for resume or false for hold\r\n */\r\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendResumeOrHoldEvent(isResume);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats and analytics (if present) for ice connection failed\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendIceConnectionFailedEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats for mute events\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n * @param {boolean} muted true for muted and false for not muted\r\n * @param {String} type \"audio\"/\"video\"\r\n */\r\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\r\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\r\n\r\n    CallStats.sendMuteEvent(muted, type, instance);\r\n};\r\n\r\n/**\r\n * Notifies CallStats for screen sharing events\r\n * @param start {boolean} true for starting screen sharing and\r\n * false for not stopping\r\n * @param {string|null} ssrc - optional ssrc value, used only when\r\n * starting screen sharing.\r\n */\r\nStatistics.prototype.sendScreenSharingEvent\r\n    = function(start, ssrc) {\r\n        for (const cs of this.callsStatsInstances.values()) {\r\n            cs.sendScreenSharingEvent(start, ssrc);\r\n        }\r\n    };\r\n\r\n/**\r\n * Notifies the statistics module that we are now the dominant speaker of the\r\n * conference.\r\n * @param {String} roomJid - The room jid where the speaker event occurred.\r\n */\r\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\r\n    for (const cs of this.callsStatsInstances.values()) {\r\n        cs.sendDominantSpeakerEvent();\r\n    }\r\n\r\n    // xmpp send dominant speaker event\r\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\r\n};\r\n\r\n/**\r\n * Notifies about active device.\r\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\r\n *      their data\r\n */\r\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\r\n    }\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Lets the underlying statistics module know where is given SSRC rendered by\r\n * providing renderer tag ID.\r\n * @param {TraceablePeerConnection} tpc the connection to which the stream\r\n * belongs to\r\n * @param {number} ssrc the SSRC of the stream\r\n * @param {boolean} isLocal\r\n * @param {string} userId\r\n * @param {string} usageLabel  meaningful usage label of this stream like\r\n *        'microphone', 'camera' or 'screen'.\r\n * @param {string} containerId the id of media 'audio' or 'video' tag which\r\n *        renders the stream.\r\n */\r\nStatistics.prototype.associateStreamWithVideoTag = function(\r\n        tpc,\r\n        ssrc,\r\n        isLocal,\r\n        userId,\r\n        usageLabel,\r\n        containerId) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            userId,\r\n            usageLabel,\r\n            containerId);\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Notifies CallStats that getUserMedia failed.\r\n *\r\n * @param {Error} e error to send\r\n */\r\nStatistics.sendGetUserMediaFailed = function(e) {\r\n    const error\r\n        = e instanceof JitsiTrackError\r\n            ? formatJitsiTrackErrorForCallStats(e) : e;\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendGetUserMediaFailed(error, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendGetUserMediaFailed(error, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create offer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateOfferFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create answer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\r\n */\r\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateAnswerFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set local description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetLocalDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set remote description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetRemoteDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to add ICE candidate.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendAddIceCandidateFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Adds to CallStats an application log.\r\n *\r\n * @param {String} m a log message to send or an {Error} object to be reported\r\n */\r\nStatistics.sendLog = function(m) {\r\n    const globalSubSet = new Set();\r\n\r\n    // FIXME we don't want to duplicate logs over P2P instance, but\r\n    // here we should go over instances and call this method for each\r\n    // unique conference ID rather than selecting the first one.\r\n    // We don't have such use case though, so leaving as is for now.\r\n    for (const stats of Statistics.instances) {\r\n        if (stats.callStatsApplicationLogsDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (stats.callsStatsInstances.size) {\r\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\r\n        }\r\n    }\r\n\r\n    if (globalSubSet.size) {\r\n        for (const csPerStats of globalSubSet) {\r\n            CallStats.sendApplicationLog(m, csPerStats);\r\n        }\r\n    } else {\r\n        CallStats.sendApplicationLog(m, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats.\r\n *\r\n * @param overall an integer between 1 and 5 indicating the user's rating.\r\n * @param comment the comment from the user.\r\n * @returns {Promise} Resolves when callstats feedback has been submitted\r\n * successfully.\r\n */\r\nStatistics.prototype.sendFeedback = function(overall, comment) {\r\n    // Statistics.analytics.sendEvent is currently fire and forget, without\r\n    // confirmation of successful send.\r\n    Statistics.analytics.sendEvent(\r\n        FEEDBACK,\r\n        {\r\n            rating: overall,\r\n            comment\r\n        });\r\n\r\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\r\n};\r\n\r\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\r\n\r\n/**\r\n * Reports global error to CallStats.\r\n *\r\n * @param {Error} error\r\n */\r\nStatistics.reportGlobalError = function(error) {\r\n    if (error instanceof JitsiTrackError && error.gum) {\r\n        Statistics.sendGetUserMediaFailed(error);\r\n    } else {\r\n        Statistics.sendLog(error);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends event to analytics and logs a message to the logger/console. Console\r\n * messages might also be logged to callstats automatically.\r\n *\r\n * @param {string | Object} event the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event (if an event\r\n * name as opposed to an event object is provided).\r\n */\r\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\r\n    if (!event) {\r\n        logger.warn('No event or event name given.');\r\n\r\n        return;\r\n    }\r\n\r\n    let eventToLog;\r\n\r\n    // Also support an API with a single object as an event.\r\n    if (typeof event === 'object') {\r\n        eventToLog = event;\r\n    } else {\r\n        eventToLog = {\r\n            name: event,\r\n            properties\r\n        };\r\n    }\r\n\r\n    logger.log(JSON.stringify(eventToLog));\r\n\r\n    // We do this last, because it may modify the object which is passed.\r\n    this.analytics.sendEvent(event, properties);\r\n};\r\n\r\n/**\r\n * Sends event to analytics.\r\n *\r\n * @param {string | Object} eventName the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event\r\n */\r\nStatistics.sendAnalytics = function(eventName, properties = {}) {\r\n    this.analytics.sendEvent(eventName, properties);\r\n};\r\n","const RTCEvents = {\r\n    /**\r\n     * Indicates error while create answer call.\r\n     */\r\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\r\n\r\n    /**\r\n     * Indicates error while create offer call.\r\n     */\r\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\r\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\r\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\r\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\r\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\r\n\r\n    /**\r\n     * Event emitted when the user granted a permission for the camera / mic.\r\n     * Used to keep track of the granted permissions on browsers which don't\r\n     * support the Permissions API.\r\n     */\r\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\r\n\r\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\r\n\r\n    /**\r\n     * Event emitted when {@link RTC.setLastN} method is called to update with\r\n     * the new value set.\r\n     * The first argument is the value passed to {@link RTC.setLastN}.\r\n     */\r\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\r\n\r\n    /**\r\n     * Event emitted when ssrc for a local track is extracted and stored\r\n     * in {@link TraceablePeerConnection}.\r\n     * @param {JitsiLocalTrack} track which ssrc was updated\r\n     * @param {string} ssrc that was stored\r\n     */\r\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\r\n\r\n    /**\r\n     * The max enabled resolution of a local video track was changed.\r\n     */\r\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\r\n\r\n    TRACK_ATTACHED: 'rtc.track_attached',\r\n\r\n    /**\r\n     * Event fired when we remote track is added to the conference.\r\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\r\n     **/\r\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\r\n\r\n    /**\r\n     * Indicates that the remote track has been removed from the conference.\r\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\r\n     */\r\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\r\n\r\n    /**\r\n     * Indicates error while set local description.\r\n     */\r\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\r\n\r\n    /**\r\n     * Indicates error while set remote description.\r\n     */\r\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\r\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\r\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\r\n\r\n    /**\r\n     * Indicates that the list with available devices will change.\r\n     */\r\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\r\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\r\n\r\n    /**\r\n     * Indicates that a message from another participant is received on\r\n     * data channel.\r\n     */\r\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\r\n};\r\n\r\nmodule.exports = RTCEvents;\r\n","/**\r\n * This class exports constants and factory methods related to the analytics\r\n * API provided by AnalyticsAdapter. In order for entries in a database to be\r\n * somewhat easily traceable back to the code which produced them, events sent\r\n * through analytics should be defined here.\r\n *\r\n * Since the AnalyticsAdapter API can be used in different ways, for some events\r\n * it is more convenient to just define the event name as a constant. For other\r\n * events a factory function is easier.\r\n *\r\n * A general approach for adding a new event:\r\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\r\n * operational.\r\n * 2. Determine whether the event is related to other existing events, and\r\n * which fields are desired to be set: name, action, actionSubject, source.\r\n * 3. If the name is sufficient (the other fields are not important), use a\r\n * constant. Otherwise use a factory function.\r\n *\r\n * Note that the AnalyticsAdapter uses the events passed to its functions for\r\n * its own purposes, and might modify them. Because of this, factory functions\r\n * should create new objects.\r\n *\r\n */\r\n\r\n/**\r\n * The constant which identifies an event of type \"operational\".\r\n * @type {string}\r\n */\r\nexport const TYPE_OPERATIONAL = 'operational';\r\n\r\n/**\r\n * The constant which identifies an event of type \"page\".\r\n * @type {string}\r\n */\r\nexport const TYPE_PAGE = 'page';\r\n\r\n/**\r\n * The constant which identifies an event of type \"track\".\r\n * @type {string}\r\n */\r\nexport const TYPE_TRACK = 'track';\r\n\r\n/**\r\n * The constant which identifies an event of type \"ui\".\r\n * @type {string}\r\n */\r\nexport const TYPE_UI = 'ui';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that the Jingle session\r\n * was restarted (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_RESTART = 'restart';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-accept\r\n * timed out (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * not arrived within a timeout (the value is specified in\r\n * the {@link JingleSessionPC}.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\r\n\r\n/**\r\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\r\n * the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_RECEIVED\r\n    = 'transport-replace.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * succeeded (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_SUCCESS\r\n    = 'transport-replace.success';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\r\n * because the mandatory requirements were not met.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_DECLINED = 'decline';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a connection was\r\n * established (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_ESTABLISHED = 'established';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that something failed.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_FAILED = 'failed';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a switch to\r\n * jitsi-videobridge happened.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\r\n\r\n/**\r\n * The name of an event which indicates an available device. We send one such\r\n * event per available device once when the available devices are first known,\r\n * and every time that they change\r\n * @type {string}\r\n *\r\n * Properties:\r\n *      audio_input_device_count: the number of audio input devices available at\r\n *          the time the event was sent.\r\n *      audio_output_device_count: the number of audio output devices available\r\n *          at the time the event was sent.\r\n *      video_input_device_count: the number of video input devices available at\r\n *          the time the event was sent.\r\n *      video_output_device_count: the number of video output devices available\r\n *          at the time the event was sent.\r\n *      device_id: an identifier of the device described in this event.\r\n *      device_group_id:\r\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\r\n *          'videooutput'.\r\n *      device_label: a string which describes the device.\r\n */\r\nexport const AVAILABLE_DEVICE = 'available.device';\r\n\r\n/**\r\n * This appears to be fired only in certain cases when the XMPP connection\r\n * disconnects (and it was intentional?). It is currently never observed to\r\n * fire in production.\r\n *\r\n * TODO: document\r\n *\r\n * Properties:\r\n *      message: an error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\r\n\r\n/**\r\n * Indicates that the user of the application provided feedback in terms of a\r\n * rating (an integer from 1 to 5) and an optional comment.\r\n * Properties:\r\n *      value: the user's rating (an integer from 1 to 5)\r\n *      comment: the user's comment\r\n */\r\nexport const FEEDBACK = 'feedback';\r\n\r\n/**\r\n * Indicates the duration of a particular phase of the ICE connectivity\r\n * establishment.\r\n *\r\n * Properties:\r\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\r\n *      value: the duration in milliseconds.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      initiator: whether the local Jingle peer is the initiator or responder\r\n *          in the Jingle session. XXX we probably actually care about the ICE\r\n *          role (controlling vs controlled), and we assume that this correlates\r\n *          with the Jingle initiator.\r\n */\r\nexport const ICE_DURATION = 'ice.duration';\r\n\r\n/**\r\n * Indicates the difference in milliseconds between the ICE establishment time\r\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\r\n * P2P connection took 10ms more than JVB connection to establish).\r\n *\r\n * Properties:\r\n *      value: the difference in establishment durations in milliseconds.\r\n *\r\n */\r\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\r\n    = 'ice.establishment.duration.diff';\r\n\r\n/**\r\n * Indicates that the ICE state has changed.\r\n *\r\n * Properties:\r\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\r\n *          'completed', etc).\r\n *      value: the time in milliseconds (as reported by\r\n *          window.performance.now()) that the state change occurred.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      signalingState: The signaling state of the associated PeerConnection\r\n *      reconnect: whether the associated Jingle session is in the process of\r\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\r\n */\r\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\r\n\r\n/**\r\n * Indicates that no bytes have been sent for the track.\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n */\r\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\r\n\r\n/**\r\n * Indicates that a track was unmuted (?).\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      trackType: the type of the track ('local' or 'remote').\r\n *      value: TODO: document\r\n */\r\nexport const TRACK_UNMUTED = 'track.unmuted';\r\n\r\n/**\r\n * Creates an operational event which indicates that we have received a\r\n * \"bridge down\" event from jicofo.\r\n */\r\nexport const createBridgeDownEvent = function() {\r\n    const bridgeDown = 'bridge.down';\r\n\r\n    return {\r\n        action: bridgeDown,\r\n        actionSubject: bridgeDown,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the XMPP connection failed\r\n * @param errorType TODO\r\n * @param errorMessage TODO\r\n * @param detail connection failed details.\r\n */\r\nexport const createConnectionFailedEvent\r\n    = function(errorType, errorMessage, details) {\r\n        return {\r\n            type: TYPE_OPERATIONAL,\r\n            action: 'connection.failed',\r\n            attributes: {\r\n                'error_type': errorType,\r\n                'error_message': errorMessage,\r\n                ...details\r\n            }\r\n        };\r\n    };\r\n\r\n/**\r\n * Creates a conference event.\r\n *\r\n * @param {string} action - The action of the event.\r\n * @param {Object} attributes - The attributes to be added to the event.\r\n * @returns {{type: string, source: string, action: string, attributes: object}}\r\n */\r\nexport function createConferenceEvent(action, attributes) {\r\n    return {\r\n        action,\r\n        attributes,\r\n        source: 'conference',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an operational event which indicates that a particular connection\r\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\r\n * state).\r\n *\r\n * @param stage the stage which was reached\r\n * @param attributes additional attributes for the event. This should be an\r\n * object with a \"value\" property indicating a timestamp in milliseconds\r\n * relative to the beginning of the document's lifetime.\r\n *\r\n */\r\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\r\n    const action = 'connection.stage.reached';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: stage,\r\n        attributes,\r\n        source: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an operational event for the end-to-end round trip time to a\r\n * specific remote participant.\r\n * @param participantId the ID of the remote participant.\r\n * @param region the region of the remote participant\r\n * @param rtt the rtt\r\n */\r\nexport const createE2eRttEvent = function(participantId, region, rtt) {\r\n    const attributes = {\r\n        'participant_id': participantId,\r\n        region,\r\n        rtt\r\n    };\r\n\r\n    return {\r\n        attributes,\r\n        name: 'e2e_rtt',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the focus has left the MUC.\r\n */\r\nexport const createFocusLeftEvent = function() {\r\n    const action = 'focus.left';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to a getUserMedia call.\r\n *\r\n * @param action the type of the result that the event represents: 'error',\r\n * 'success', 'warning', etc.\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'get.user.media',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to remote participant connection status changes.\r\n *\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\r\n    const action = 'duration';\r\n\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'peer.conn.status',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a Jingle-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createJingleEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'jingle',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that a local track was not able to read\r\n * data from its source (a camera or a microphone).\r\n *\r\n * @param mediaType {String} the media type of the local track ('audio' or\r\n * 'video').\r\n */\r\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\r\n    return {\r\n        attributes: {\r\n            'media_type': mediaType,\r\n            value\r\n        },\r\n        action: 'track.no.data.from.source',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a p2p-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createP2PEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'p2p',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Indicates that we received a remote command to mute.\r\n */\r\nexport const createRemotelyMutedEvent = function() {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'remotely.muted'\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains RTP statistics such as RTT and packet loss.\r\n *\r\n * All average RTP stats are currently reported under 1 event name, but with\r\n * different properties that allows to distinguish between a P2P call, a\r\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\r\n *\r\n * The structure of the event is:\r\n *\r\n * {\r\n *      p2p: true,\r\n *      conferenceSize: 2,\r\n *      localCandidateType: \"relay\",\r\n *      remoteCandidateType: \"relay\",\r\n *      transportType: \"udp\",\r\n *\r\n *      // Average RTT of 200ms\r\n *      \"rtt.avg\": 200,\r\n *      \"rtt.samples\": \"[100, 200, 300]\",\r\n *\r\n *      // Average packet loss of 10%\r\n *      \"packet.loss.avg\": 10,\r\n *      \"packet.loss.samples\": '[5, 10, 15]'\r\n *\r\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\r\n *      // The e2e RTT through jvb is 15ms shorter:\r\n *      \"rtt.diff\": 15,\r\n *\r\n *      // End-to-end RTT through JVB is ms.\r\n *      \"end2end.rtt.avg\" = 100\r\n * }\r\n *\r\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\r\n * and not JSON arrays, as events' attributes can not be nested. The samples are\r\n * currently included for debug purposes only and can be removed anytime soon\r\n * from the structure.\r\n *\r\n * Also note that not all of values are present in each event, as values are\r\n * obtained and calculated as part of different process/event pipe. For example\r\n * {@link ConnectionAvgStats} instances are doing the reports for each\r\n * {@link TraceablePeerConnection} and work independently from the main stats\r\n * pipe.\r\n */\r\nexport const createRtpStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtp.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the round trip time (RTT) to a set of\r\n * regions.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createRttByRegionEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtt.by.region',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the local and remote ICE candidate types\r\n * for the transport that is currently selected.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createTransportStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'transport.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\r\n * the local audio levels and the remote audio levels that triggered the event).\r\n *\r\n * @param {string} userID - The user id of the affected participant.\r\n * @param {*} localAudioLevels - The local audio levels.\r\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\r\n */\r\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'audio.output.problem',\r\n        attributes: {\r\n            userID,\r\n            localAudioLevels,\r\n            remoteAudioLevels\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an event which contains an information related to the bridge channel close event.\r\n *\r\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\r\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\r\n */\r\nexport const createBridgeChannelClosedEvent = function(code, reason) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'bridge-channel.error',\r\n        attributes: {\r\n            code,\r\n            reason\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates the Time To First Media (TTFM).\r\n * It is measured in milliseconds relative to the beginning of the document's\r\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\r\n * the following:\r\n * 1. The delay due to getUserMedia()\r\n * 2. The period between the MUC being joined and the reception of the Jingle\r\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\r\n * session until there are at least 2 participants in the room.\r\n *\r\n * @param attributes the attributes to add to the event. Currently used fields:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      muted: whether the track has ever been muted (?)\r\n *      value: the TTMF in milliseconds.\r\n */\r\nexport const createTtfmEvent = function(attributes) {\r\n    return createConnectionStageReachedEvent('ttfm', attributes);\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport browser from '../browser';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nconst SDPUtil = {\r\n    filterSpecialChars(text) {\r\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\r\n        // \"\", etc.) \"contain\" special chars.\r\n        // eslint-disable-next-line no-useless-escape\r\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\r\n    },\r\n    iceparams(mediadesc, sessiondesc) {\r\n        let data = null;\r\n        let pwd, ufrag;\r\n\r\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\r\n                && (pwd\r\n                    = SDPUtil.findLine(\r\n                        mediadesc,\r\n                        'a=ice-pwd:',\r\n                        sessiondesc))) {\r\n            data = {\r\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\r\n                pwd: SDPUtil.parseICEPwd(pwd)\r\n            };\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICEUfrag(line) {\r\n        return line.substring(12);\r\n    },\r\n    buildICEUfrag(frag) {\r\n        return `a=ice-ufrag:${frag}`;\r\n    },\r\n    parseICEPwd(line) {\r\n        return line.substring(10);\r\n    },\r\n    buildICEPwd(pwd) {\r\n        return `a=ice-pwd:${pwd}`;\r\n    },\r\n    parseMID(line) {\r\n        return line.substring(6);\r\n    },\r\n    parseMLine(line) {\r\n        const data = {};\r\n        const parts = line.substring(2).split(' ');\r\n\r\n        data.media = parts.shift();\r\n        data.port = parts.shift();\r\n        data.proto = parts.shift();\r\n        if (parts[parts.length - 1] === '') { // trailing whitespace\r\n            parts.pop();\r\n        }\r\n        data.fmt = parts;\r\n\r\n        return data;\r\n    },\r\n    buildMLine(mline) {\r\n        return (\r\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\r\n                mline.fmt.join(' ')}`);\r\n    },\r\n    parseRTPMap(line) {\r\n        const data = {};\r\n        let parts = line.substring(9).split(' ');\r\n\r\n        data.id = parts.shift();\r\n        parts = parts[0].split('/');\r\n        data.name = parts.shift();\r\n        data.clockrate = parts.shift();\r\n        data.channels = parts.length ? parts.shift() : '1';\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\r\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\r\n     * @returns [SCTP port number, protocol, streams]\r\n     */\r\n    parseSCTPMap(line) {\r\n        const parts = line.substring(10).split(' ');\r\n        const sctpPort = parts[0];\r\n        const protocol = parts[1];\r\n\r\n        // Stream count is optional\r\n        const streamCount = parts.length > 2 ? parts[2] : null;\r\n\r\n\r\n        return [ sctpPort, protocol, streamCount ];// SCTP port\r\n    },\r\n    buildRTPMap(el) {\r\n        let line\r\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\r\n                el.getAttribute('clockrate')}`;\r\n\r\n        if (el.getAttribute('channels')\r\n            && el.getAttribute('channels') !== '1') {\r\n            line += `/${el.getAttribute('channels')}`;\r\n        }\r\n\r\n        return line;\r\n    },\r\n    parseCrypto(line) {\r\n        const data = {};\r\n        const parts = line.substring(9).split(' ');\r\n\r\n        data.tag = parts.shift();\r\n        data['crypto-suite'] = parts.shift();\r\n        data['key-params'] = parts.shift();\r\n        if (parts.length) {\r\n            data['session-params'] = parts.join(' ');\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseFingerprint(line) { // RFC 4572\r\n        const data = {};\r\n        const parts = line.substring(14).split(' ');\r\n\r\n        data.hash = parts.shift();\r\n        data.fingerprint = parts.shift();\r\n\r\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\r\n        return data;\r\n    },\r\n    parseFmtp(line) {\r\n        const data = [];\r\n        let parts = line.split(' ');\r\n\r\n        parts.shift();\r\n        parts = parts.join(' ').split(';');\r\n        for (let i = 0; i < parts.length; i++) {\r\n            let key = parts[i].split('=')[0];\r\n\r\n            while (key.length && key[0] === ' ') {\r\n                key = key.substring(1);\r\n            }\r\n            const value = parts[i].split('=')[1];\r\n\r\n            if (key && value) {\r\n                data.push({ name: key,\r\n                    value });\r\n            } else if (key) {\r\n                // rfc 4733 (DTMF) style stuff\r\n                data.push({ name: '',\r\n                    value: key });\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICECandidate(line) {\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n        candidate.generation = 0; // default value, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(\r\n                    `parseICECandidate not translating \"${\r\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    buildICECandidate(cand) {\r\n        let line = [\r\n            `a=candidate:${cand.foundation}`,\r\n            cand.component,\r\n            cand.protocol,\r\n            cand.priority,\r\n            cand.ip,\r\n            cand.port,\r\n            'typ',\r\n            cand.type\r\n        ].join(' ');\r\n\r\n        line += ' ';\r\n        switch (cand.type) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.hasOwnAttribute('rel-addr')\r\n                    && cand.hasOwnAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand['rel-addr'];\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand['rel-port'];\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (cand.hasOwnAttribute('tcptype')) {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.tcptype;\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\r\n\r\n        return line;\r\n    },\r\n    parseSSRC(desc) {\r\n        // proprietary mapping of a=ssrc lines\r\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\r\n        // on google docs and parse according to that\r\n        const data = new Map();\r\n        const lines = desc.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\r\n                // FIXME: Use regex to smartly find the ssrc.\r\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\r\n\r\n                if (!data.get(ssrc)) {\r\n                    data.set(ssrc, []);\r\n                }\r\n\r\n                data.get(ssrc).push(lines[i]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseRTCPFB(line) {\r\n        const parts = line.substr(10).split(' ');\r\n        const data = {};\r\n\r\n        data.pt = parts.shift();\r\n        data.type = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    parseExtmap(line) {\r\n        const parts = line.substr(9).split(' ');\r\n        const data = {};\r\n\r\n        data.value = parts.shift();\r\n        if (data.value.indexOf('/') === -1) {\r\n            data.direction = 'both';\r\n        } else {\r\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\r\n            data.value = data.value.substr(0, data.value.indexOf('/'));\r\n        }\r\n        data.uri = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    findLine(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                return lines[i];\r\n            }\r\n        }\r\n        if (!sessionpart) {\r\n            return false;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                return lines[j];\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    findLines(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n        const needles = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                needles.push(lines[i]);\r\n            }\r\n        }\r\n        if (needles.length || !sessionpart) {\r\n            return needles;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                needles.push(lines[j]);\r\n            }\r\n        }\r\n\r\n        return needles;\r\n    },\r\n    candidateToJingle(line) {\r\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\r\n        // generation 0\r\n        //      <candidate component=... foundation=... generation=... id=...\r\n        // ip=... network=... port=... priority=... protocol=... type=.../>\r\n        if (line.indexOf('candidate:') === 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = `a=${line}`;\r\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\r\n            logger.log(\r\n                'parseCandidate called with a line that is not a candidate'\r\n                    + ' line');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = line.substring(0, line.length - 2);\r\n        }\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        if (elems[6] !== 'typ') {\r\n            logger.log('did not find typ in the right place');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n\r\n        candidate.generation = '0'; // default, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    candidateFromJingle(cand) {\r\n        let line = 'a=candidate:';\r\n\r\n        line += cand.getAttribute('foundation');\r\n        line += ' ';\r\n        line += cand.getAttribute('component');\r\n        line += ' ';\r\n\r\n        let protocol = cand.getAttribute('protocol');\r\n\r\n        // use tcp candidates for FF\r\n\r\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\r\n            protocol = 'tcp';\r\n        }\r\n\r\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\r\n        line += ' ';\r\n        line += cand.getAttribute('priority');\r\n        line += ' ';\r\n        line += cand.getAttribute('ip');\r\n        line += ' ';\r\n        line += cand.getAttribute('port');\r\n        line += ' ';\r\n        line += 'typ';\r\n        line += ` ${cand.getAttribute('type')}`;\r\n        line += ' ';\r\n        switch (cand.getAttribute('type')) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.getAttribute('rel-addr')\r\n                    && cand.getAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-addr');\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-port');\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (protocol.toLowerCase() === 'tcp') {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.getAttribute('tcptype');\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.getAttribute('generation') || '0';\r\n\r\n        return `${line}\\r\\n`;\r\n    },\r\n\r\n    /**\r\n     * Parse the 'most' primary video ssrc from the given m line\r\n     * @param {object} mLine object as parsed from transform.parse\r\n     * @return {number} the primary video ssrc from the given m line\r\n     */\r\n    parsePrimaryVideoSsrc(videoMLine) {\r\n        const numSsrcs = videoMLine.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n            .length;\r\n        const numGroups\r\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\r\n\r\n        if (numSsrcs > 1 && numGroups === 0) {\r\n            // Ambiguous, can't figure out the primary\r\n            return;\r\n        }\r\n        let primarySsrc = null;\r\n\r\n        if (numSsrcs === 1) {\r\n            primarySsrc = videoMLine.ssrcs[0].id;\r\n        } else if (numSsrcs === 2) {\r\n            // Can figure it out if there's an FID group\r\n            const fidGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'FID');\r\n\r\n            if (fidGroup) {\r\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\r\n            }\r\n        } else if (numSsrcs >= 3) {\r\n            // Can figure it out if there's a sim group\r\n            const simGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\r\n            }\r\n        }\r\n\r\n        return primarySsrc;\r\n    },\r\n\r\n    /**\r\n     * Generate an ssrc\r\n     * @returns {number} an ssrc\r\n     */\r\n    generateSsrc() {\r\n        return RandomUtil.randomInt(1, 0xffffffff);\r\n    },\r\n\r\n    /**\r\n     * Get an attribute for the given ssrc with the given attributeName\r\n     *  from the given mline\r\n     * @param {object} mLine an mLine object as parsed from transform.parse\r\n     * @param {number} ssrc the ssrc for which an attribute is desired\r\n     * @param {string} attributeName the name of the desired attribute\r\n     * @returns {string} the value corresponding to the given ssrc\r\n     *  and attributeName\r\n     */\r\n    getSsrcAttribute(mLine, ssrc, attributeName) {\r\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\r\n            const ssrcLine = mLine.ssrcs[i];\r\n\r\n            if (ssrcLine.id === ssrc\r\n                && ssrcLine.attribute === attributeName) {\r\n                return ssrcLine.value;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Parses the ssrcs from the group sdp line and\r\n     *  returns them as a list of numbers\r\n     * @param {object} the ssrcGroup object as parsed from\r\n     *  sdp-transform\r\n     * @returns {list<number>} a list of the ssrcs in the group\r\n     *  parsed as numbers\r\n     */\r\n    parseGroupSsrcs(ssrcGroup) {\r\n        return ssrcGroup\r\n            .ssrcs\r\n            .split(' ')\r\n            .map(ssrcStr => parseInt(ssrcStr, 10));\r\n    },\r\n\r\n    /**\r\n     * Get the mline of the given type from the given sdp\r\n     * @param {object} sdp sdp as parsed from transform.parse\r\n     * @param {string} type the type of the desired mline (e.g. \"video\")\r\n     * @returns {object} a media object\r\n     */\r\n    getMedia(sdp, type) {\r\n        return sdp.media.find(m => m.type === type);\r\n    },\r\n\r\n    /**\r\n     * Extracts the ICE username fragment from an SDP string.\r\n     * @param {string} sdp the SDP in raw text format\r\n     */\r\n    getUfrag(sdp) {\r\n        const ufragLines\r\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\r\n\r\n        if (ufragLines.length > 0) {\r\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the given codecName as the preferred codec by\r\n     *  moving it to the beginning of the payload types\r\n     *  list (modifies the given mline in place).  If there\r\n     *  are multiple options within the same codec (multiple h264\r\n     *  profiles, for instance), this will prefer the first one\r\n     *  that is found.\r\n     * @param {object} videoMLine the video mline object from\r\n     *  an sdp as parsed by transform.parse\r\n     * @param {string} codecName the name of the preferred codec\r\n     */\r\n    preferVideoCodec(videoMLine, codecName) {\r\n        let payloadType = null;\r\n\r\n        if (!videoMLine || !codecName) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\r\n            const rtp = videoMLine.rtp[i];\r\n\r\n            if (rtp.codec\r\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\r\n                payloadType = rtp.payload;\r\n                break;\r\n            }\r\n        }\r\n        if (payloadType) {\r\n            // Call toString() on payloads to get around an issue within\r\n            // SDPTransform that sets payloads as a number, instead of a string,\r\n            // when there is only one payload.\r\n            const payloadTypes\r\n                = videoMLine.payloads\r\n                    .toString()\r\n                    .split(' ')\r\n                    .map(p => parseInt(p, 10));\r\n            const payloadIndex = payloadTypes.indexOf(payloadType);\r\n\r\n            payloadTypes.splice(payloadIndex, 1);\r\n            payloadTypes.unshift(payloadType);\r\n            videoMLine.payloads = payloadTypes.join(' ');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Strips the given codec from the given mline. All related RTX payload\r\n     * types are also stripped. If the resulting mline would have no codecs,\r\n     * it's disabled.\r\n     *\r\n     * @param {object} videoMLine the video mline object from an sdp as parsed\r\n     * by transform.parse.\r\n     * @param {string} codecName the name of the codec which will be stripped.\r\n     */\r\n    stripVideoCodec(videoMLine, codecName) {\r\n        if (!videoMLine || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const removePts = [];\r\n\r\n        for (const rtp of videoMLine.rtp) {\r\n            if (rtp.codec\r\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\r\n                removePts.push(rtp.payload);\r\n            }\r\n        }\r\n\r\n        if (removePts.length > 0) {\r\n            // We also need to remove the payload types that are related to RTX\r\n            // for the codecs we want to disable.\r\n            const rtxApts = removePts.map(item => `apt=${item}`);\r\n            const rtxPts = videoMLine.fmtp.filter(\r\n                item => rtxApts.indexOf(item.config) !== -1);\r\n\r\n            removePts.push(...rtxPts.map(item => item.payload));\r\n\r\n            // Call toString() on payloads to get around an issue within\r\n            // SDPTransform that sets payloads as a number, instead of a string,\r\n            // when there is only one payload.\r\n            const allPts = videoMLine.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(Number);\r\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\r\n\r\n            if (keepPts.length === 0) {\r\n                // There are no other video codecs, disable the stream.\r\n                videoMLine.port = 0;\r\n                videoMLine.direction = 'inactive';\r\n                videoMLine.payloads = '*';\r\n            } else {\r\n                videoMLine.payloads = keepPts.join(' ');\r\n            }\r\n\r\n            videoMLine.rtp = videoMLine.rtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            videoMLine.fmtp = videoMLine.fmtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            if (videoMLine.rtcpFb) {\r\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\r\n                    item => keepPts.indexOf(item.payload) !== -1);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default SDPUtil;\r\n","/**\r\n * The audio type.\r\n */\r\nexport const AUDIO = 'audio';\r\n\r\n/**\r\n * The presenter type.\r\n */\r\nexport const PRESENTER = 'presenter';\r\n\r\n/**\r\n * The video type.\r\n */\r\nexport const VIDEO = 'video';\r\n","/* global\r\n          __filename,\r\n          MediaStreamTrack,\r\n          RTCIceCandidate: true,\r\n          RTCPeerConnection,\r\n          RTCSessionDescription: true\r\n*/\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport clonedeep from 'lodash.clonedeep';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport Resolutions from '../../service/RTC/Resolutions';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\n\r\nimport screenObtainer from './ScreenObtainer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Require adapter only for certain browsers. This is being done for\r\n// react-native, which has its own shims, and while browsers are being migrated\r\n// over to use adapter's shims.\r\nif (browser.usesAdapter()) {\r\n    require('webrtc-adapter');\r\n}\r\n\r\nconst eventEmitter = new EventEmitter();\r\n\r\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\r\n\r\n/**\r\n * Default resolution to obtain for video tracks if no resolution is specified.\r\n * This default is used for old gum flow only, as new gum flow uses\r\n * {@link DEFAULT_CONSTRAINTS}.\r\n */\r\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\r\n\r\n/**\r\n * Default devices to obtain when no specific devices are specified. This\r\n * default is used for old gum flow only.\r\n */\r\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\r\n\r\n/**\r\n * Default MediaStreamConstraints to use for calls to getUserMedia.\r\n *\r\n * @private\r\n */\r\nconst DEFAULT_CONSTRAINTS = {\r\n    video: {\r\n        height: {\r\n            ideal: 720,\r\n            max: 720,\r\n            min: 240\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * The default frame rate for Screen Sharing.\r\n */\r\nconst SS_DEFAULT_FRAME_RATE = 5;\r\n\r\n// Currently audio output device change is supported only in Chrome and\r\n// default output always has 'default' device ID\r\nlet audioOutputDeviceId = 'default'; // default device\r\n// whether user has explicitly set a device to use\r\nlet audioOutputChanged = false;\r\n\r\n// Disables all audio processing\r\nlet disableAP = false;\r\n\r\n// Disables Acoustic Echo Cancellation\r\nlet disableAEC = false;\r\n\r\n// Disables Noise Suppression\r\nlet disableNS = false;\r\n\r\n// Disables Automatic Gain Control\r\nlet disableAGC = false;\r\n\r\n// Disables Highpass Filter\r\nlet disableHPF = false;\r\n\r\nconst featureDetectionAudioEl = document.createElement('audio');\r\nconst isAudioOutputDeviceChangeAvailable\r\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\r\n\r\nlet availableDevices;\r\nlet availableDevicesPollTimer;\r\n\r\n/**\r\n * Initialize wrapper function for enumerating devices.\r\n * TODO: remove this, it should no longer be needed.\r\n *\r\n * @returns {?Function}\r\n */\r\nfunction initEnumerateDevicesWithCallback() {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\r\n        return callback => {\r\n            navigator.mediaDevices.enumerateDevices()\r\n                .then(callback, () => callback([]));\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param constraints\r\n * @param isNewStyleConstraintsSupported\r\n * @param resolution\r\n */\r\nfunction setResolutionConstraints(\r\n        constraints,\r\n        isNewStyleConstraintsSupported,\r\n        resolution) {\r\n    if (Resolutions[resolution]) {\r\n        if (isNewStyleConstraintsSupported) {\r\n            constraints.video.width = {\r\n                ideal: Resolutions[resolution].width\r\n            };\r\n            constraints.video.height = {\r\n                ideal: Resolutions[resolution].height\r\n            };\r\n        }\r\n\r\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\r\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\r\n    }\r\n\r\n    if (constraints.video.mandatory.minWidth) {\r\n        constraints.video.mandatory.maxWidth\r\n            = constraints.video.mandatory.minWidth;\r\n    }\r\n\r\n    if (constraints.video.mandatory.minHeight) {\r\n        constraints.video.mandatory.maxHeight\r\n            = constraints.video.mandatory.minHeight;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {string[]} um required user media types\r\n *\r\n * @param {Object} [options={}] optional parameters\r\n * @param {string} options.resolution\r\n * @param {number} options.bandwidth\r\n * @param {number} options.fps\r\n * @param {string} options.desktopStream\r\n * @param {string} options.cameraDeviceId\r\n * @param {string} options.micDeviceId\r\n * @param {CameraFacingMode} options.facingMode\r\n * @param {bool} firefox_fake_device\r\n * @param {Object} options.frameRate - used only for dekstop sharing.\r\n * @param {Object} options.frameRate.min - Minimum fps\r\n * @param {Object} options.frameRate.max - Maximum fps\r\n * @param {bool}   options.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n */\r\nfunction getConstraints(um, options = {}) {\r\n    const constraints = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n\r\n    // Don't mix new and old style settings for Chromium as this leads\r\n    // to TypeError in new Chromium versions. @see\r\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\r\n    // This is a temporary solution, in future we will fully split old and\r\n    // new style constraints when new versions of Chromium and Firefox will\r\n    // have stable support of new constraints format. For more information\r\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\r\n    const isNewStyleConstraintsSupported\r\n        = browser.isFirefox()\r\n            || browser.isSafari()\r\n            || browser.isReactNative();\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        // same behaviour as true\r\n        constraints.video = { mandatory: {},\r\n            optional: [] };\r\n\r\n        if (options.cameraDeviceId) {\r\n            if (isNewStyleConstraintsSupported) {\r\n                // New style of setting device id.\r\n                constraints.video.deviceId = options.cameraDeviceId;\r\n            }\r\n\r\n            // Old style.\r\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\r\n        } else {\r\n            // Prefer the front i.e. user-facing camera (to the back i.e.\r\n            // environment-facing camera, for example).\r\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\r\n            // but this probably needs to be decided when updating other\r\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            if (isNewStyleConstraintsSupported) {\r\n                constraints.video.facingMode = facingMode;\r\n            }\r\n            constraints.video.optional.push({\r\n                facingMode\r\n            });\r\n        }\r\n\r\n        if (options.minFps || options.maxFps || options.fps) {\r\n            // for some cameras it might be necessary to request 30fps\r\n            // so they choose 30fps mjpg over 10fps yuy2\r\n            if (options.minFps || options.fps) {\r\n                // Fall back to options.fps for backwards compatibility\r\n                options.minFps = options.minFps || options.fps;\r\n                constraints.video.mandatory.minFrameRate = options.minFps;\r\n            }\r\n            if (options.maxFps) {\r\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\r\n            }\r\n        }\r\n\r\n        setResolutionConstraints(\r\n            constraints, isNewStyleConstraintsSupported, options.resolution);\r\n    }\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (browser.isReactNative()) {\r\n            // The react-native-webrtc project that we're currently using\r\n            // expects the audio constraint to be a boolean.\r\n            constraints.audio = true;\r\n        } else if (browser.isFirefox()) {\r\n            if (options.micDeviceId) {\r\n                constraints.audio = {\r\n                    mandatory: {},\r\n                    deviceId: options.micDeviceId, // new style\r\n                    optional: [ {\r\n                        sourceId: options.micDeviceId // old style\r\n                    } ] };\r\n            } else {\r\n                constraints.audio = true;\r\n            }\r\n        } else {\r\n            // same behaviour as true\r\n            constraints.audio = { mandatory: {},\r\n                optional: [] };\r\n            if (options.micDeviceId) {\r\n                if (isNewStyleConstraintsSupported) {\r\n                    // New style of setting device id.\r\n                    constraints.audio.deviceId = options.micDeviceId;\r\n                }\r\n\r\n                // Old style.\r\n                constraints.audio.optional.push({\r\n                    sourceId: options.micDeviceId\r\n                });\r\n            }\r\n\r\n            // if it is good enough for hangouts...\r\n            constraints.audio.optional.push(\r\n                { echoCancellation: !disableAEC && !disableAP },\r\n                { googEchoCancellation: !disableAEC && !disableAP },\r\n                { googAutoGainControl: !disableAGC && !disableAP },\r\n                { googNoiseSuppression: !disableNS && !disableAP },\r\n                { googHighpassFilter: !disableHPF && !disableAP },\r\n                { googNoiseSuppression2: !disableNS && !disableAP },\r\n                { googEchoCancellation2: !disableAEC && !disableAP },\r\n                { googAutoGainControl2: !disableAGC && !disableAP }\r\n            );\r\n        }\r\n    }\r\n    if (um.indexOf('screen') >= 0) {\r\n        if (browser.isChrome()) {\r\n            constraints.video = {\r\n                mandatory: getSSConstraints({\r\n                    ...options,\r\n                    source: 'screen'\r\n                }),\r\n                optional: []\r\n            };\r\n\r\n        } else if (browser.isFirefox()) {\r\n            constraints.video = {\r\n                mozMediaSource: 'window',\r\n                mediaSource: 'window',\r\n                frameRate: options.frameRate || {\r\n                    min: SS_DEFAULT_FRAME_RATE,\r\n                    max: SS_DEFAULT_FRAME_RATE\r\n                }\r\n            };\r\n\r\n        } else {\r\n            const errmsg\r\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\r\n                    + ' and Firefox';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg);\r\n        }\r\n    }\r\n    if (um.indexOf('desktop') >= 0) {\r\n        constraints.video = {\r\n            mandatory: getSSConstraints({\r\n                ...options,\r\n                source: 'desktop'\r\n            }),\r\n            optional: []\r\n        };\r\n\r\n        // Audio screen sharing for electron only works for screen type devices.\r\n        // i.e. when the user shares the whole desktop.\r\n        if (browser.isElectron() && options.screenShareAudio\r\n            && (options.desktopStream.indexOf('screen') >= 0)) {\r\n\r\n            // Provide constraints as described by the electron desktop capturer\r\n            // documentation here:\r\n            // https://www.electronjs.org/docs/api/desktop-capturer\r\n            constraints.audio = { mandatory: {\r\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\r\n            } };\r\n\r\n            delete constraints.video.mandatory.chromeMediaSourceId;\r\n        }\r\n    }\r\n\r\n    if (options.bandwidth) {\r\n        if (!constraints.video) {\r\n            // same behaviour as true\r\n            constraints.video = { mandatory: {},\r\n                optional: [] };\r\n        }\r\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\r\n    }\r\n\r\n    // we turn audio for both audio and video tracks, the fake audio & video\r\n    // seems to work only when enabled in one getUserMedia call, we cannot get\r\n    // fake audio separate by fake video this later can be a problem with some\r\n    // of the tests\r\n    if (browser.isFirefox() && options.firefox_fake_device) {\r\n        // seems to be fixed now, removing this experimental fix, as having\r\n        // multiple audio tracks brake the tests\r\n        // constraints.audio = true;\r\n        constraints.fake = true;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Creates a constraints object to be passed into a call to getUserMedia.\r\n *\r\n * @param {Array} um - An array of user media types to get. The accepted\r\n * types are \"video\", \"audio\", and \"desktop.\"\r\n * @param {Object} options - Various values to be added to the constraints.\r\n * @param {string} options.cameraDeviceId - The device id for the video\r\n * capture device to get video from.\r\n * @param {Object} options.constraints - Default constraints object to use\r\n * as a base for the returned constraints.\r\n * @param {Object} options.desktopStream - The desktop source id from which\r\n * to capture a desktop sharing video.\r\n * @param {string} options.facingMode - Which direction the camera is\r\n * pointing to.\r\n * @param {string} options.micDeviceId - The device id for the audio capture\r\n * device to get audio from.\r\n * @param {Object} options.frameRate - used only for dekstop sharing.\r\n * @param {Object} options.frameRate.min - Minimum fps\r\n * @param {Object} options.frameRate.max - Maximum fps\r\n * @private\r\n * @returns {Object}\r\n */\r\nfunction newGetConstraints(um = [], options = {}) {\r\n    // Create a deep copy of the constraints to avoid any modification of\r\n    // the passed in constraints object.\r\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        if (!constraints.video) {\r\n            constraints.video = {};\r\n        }\r\n\r\n        // Override the constraints on Safari because of the following webkit bug.\r\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\r\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\r\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\r\n        if (browser.isSafari()) {\r\n            if (constraints.video.height && constraints.video.height.ideal) {\r\n                constraints.video.height = { ideal: clonedeep(constraints.video.height.ideal) };\r\n            } else {\r\n                logger.warn('Ideal camera height missing, camera may not start properly');\r\n            }\r\n            if (constraints.video.width && constraints.video.width.ideal) {\r\n                constraints.video.width = { ideal: clonedeep(constraints.video.width.ideal) };\r\n            } else {\r\n                logger.warn('Ideal camera width missing, camera may not start properly');\r\n            }\r\n        }\r\n        if (options.cameraDeviceId) {\r\n            constraints.video.deviceId = options.cameraDeviceId;\r\n        } else {\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            constraints.video.facingMode = facingMode;\r\n        }\r\n    } else {\r\n        constraints.video = false;\r\n    }\r\n\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\r\n            constraints.audio = {};\r\n        }\r\n\r\n        // Use the standard audio constraints on non-chromium browsers.\r\n        if (browser.isFirefox() || browser.isSafari()) {\r\n            constraints.audio = {\r\n                deviceId: options.micDeviceId,\r\n                autoGainControl: !disableAGC && !disableAP,\r\n                echoCancellation: !disableAEC && !disableAP,\r\n                noiseSuppression: !disableNS && !disableAP\r\n            };\r\n        } else {\r\n            // NOTE(brian): the new-style ('advanced' instead of 'optional')\r\n            // doesn't seem to carry through the googXXX constraints\r\n            // Changing back to 'optional' here (even with video using\r\n            // the 'advanced' style) allows them to be passed through\r\n            // but also requires the device id to capture to be set in optional\r\n            // as sourceId otherwise the constraints are considered malformed.\r\n            if (!constraints.audio.optional) {\r\n                constraints.audio.optional = [];\r\n            }\r\n            constraints.audio.optional.push(\r\n                { sourceId: options.micDeviceId },\r\n                { echoCancellation: !disableAEC && !disableAP },\r\n                { googEchoCancellation: !disableAEC && !disableAP },\r\n                { googAutoGainControl: !disableAGC && !disableAP },\r\n                { googNoiseSuppression: !disableNS && !disableAP },\r\n                { googHighpassFilter: !disableHPF && !disableAP },\r\n                { googNoiseSuppression2: !disableNS && !disableAP },\r\n                { googEchoCancellation2: !disableAEC && !disableAP },\r\n                { googAutoGainControl2: !disableAGC && !disableAP }\r\n            );\r\n        }\r\n    } else {\r\n        constraints.audio = false;\r\n    }\r\n\r\n    if (um.indexOf('desktop') >= 0) {\r\n        if (!constraints.video || typeof constraints.video === 'boolean') {\r\n            constraints.video = {};\r\n        }\r\n\r\n        constraints.video = {\r\n            mandatory: getSSConstraints({\r\n                ...options,\r\n                source: 'desktop'\r\n            })\r\n        };\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Generates GUM constraints for screen sharing.\r\n *\r\n * @param {Object} options - The options passed to\r\n * <tt>obtainAudioAndVideoPermissions</tt>.\r\n * @returns {Object} - GUM constraints.\r\n *\r\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\r\n * should make it work for all use cases.\r\n */\r\nfunction getSSConstraints(options = {}) {\r\n    const {\r\n        desktopStream,\r\n        frameRate = {\r\n            min: SS_DEFAULT_FRAME_RATE,\r\n            max: SS_DEFAULT_FRAME_RATE\r\n        }\r\n    } = options;\r\n    const { max, min } = frameRate;\r\n\r\n    const constraints = {\r\n        chromeMediaSource: options.source,\r\n        maxWidth: window.screen.width,\r\n        maxHeight: window.screen.height\r\n    };\r\n\r\n    if (typeof min === 'number') {\r\n        constraints.minFrameRate = min;\r\n    }\r\n\r\n    if (typeof max === 'number') {\r\n        constraints.maxFrameRate = max;\r\n    }\r\n\r\n    if (typeof desktopStream !== 'undefined') {\r\n        constraints.chromeMediaSourceId = desktopStream;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Generates constraints for screen sharing when using getDisplayMedia.\r\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\r\n *\r\n * @returns {Object} - MediaTrackConstraints constraints.\r\n */\r\nfunction getTrackSSConstraints(options = {}) {\r\n    // we used to set height and width in the constraints, but this can lead\r\n    // to inconsistencies if the browser is on a lower resolution screen\r\n    // and we share a screen with bigger resolution, so they are now not set\r\n    const constraints = {\r\n        frameRate: SS_DEFAULT_FRAME_RATE\r\n    };\r\n    const { desktopSharingFrameRate } = options;\r\n\r\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\r\n        constraints.frameRate = desktopSharingFrameRate.max;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Updates the granted permissions based on the options we requested and the\r\n * streams we received.\r\n * @param um the options we requested to getUserMedia.\r\n * @param stream the stream we received from calling getUserMedia.\r\n */\r\nfunction updateGrantedPermissions(um, stream) {\r\n    const audioTracksReceived\r\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\r\n    const videoTracksReceived\r\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\r\n    const grantedPermissions = {};\r\n\r\n    if (um.indexOf('video') !== -1) {\r\n        grantedPermissions.video = videoTracksReceived;\r\n    }\r\n    if (um.indexOf('audio') !== -1) {\r\n        grantedPermissions.audio = audioTracksReceived;\r\n    }\r\n\r\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\r\n}\r\n\r\n/**\r\n * Checks if new list of available media devices differs from previous one.\r\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\r\n * @returns {boolean} - true if list is different, false otherwise.\r\n */\r\nfunction compareAvailableMediaDevices(newDevices) {\r\n    if (newDevices.length !== availableDevices.length) {\r\n        return true;\r\n    }\r\n\r\n    /* eslint-disable newline-per-chained-call */\r\n\r\n    return (\r\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\r\n            !== availableDevices\r\n                .map(mediaDeviceInfoToJSON).sort().join(''));\r\n\r\n    /* eslint-enable newline-per-chained-call */\r\n\r\n    /**\r\n     *\r\n     * @param info\r\n     */\r\n    function mediaDeviceInfoToJSON(info) {\r\n        return JSON.stringify({\r\n            kind: info.kind,\r\n            deviceId: info.deviceId,\r\n            groupId: info.groupId,\r\n            label: info.label,\r\n            facing: info.facing\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Sends analytics event with the passed device list.\r\n *\r\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\r\n * available devices.\r\n * @returns {void}\r\n */\r\nfunction sendDeviceListToAnalytics(deviceList) {\r\n    const audioInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audioinput').length;\r\n    const audioOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\r\n    const videoInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videoinput').length;\r\n    const videoOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videooutput').length;\r\n\r\n    deviceList.forEach(device => {\r\n        const attributes = {\r\n            'audio_input_device_count': audioInputDeviceCount,\r\n            'audio_output_device_count': audioOutputDeviceCount,\r\n            'video_input_device_count': videoInputDeviceCount,\r\n            'video_output_device_count': videoOutputDeviceCount,\r\n            'device_id': device.deviceId,\r\n            'device_group_id': device.groupId,\r\n            'device_kind': device.kind,\r\n            'device_label': device.label\r\n        };\r\n\r\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\r\n    });\r\n}\r\n\r\n/**\r\n * Event handler for the 'devicechange' event.\r\n *\r\n * @param {MediaDeviceInfo[]} devices - list of media devices.\r\n * @emits RTCEvents.DEVICE_LIST_CHANGED\r\n */\r\nfunction onMediaDevicesListChanged(devicesReceived) {\r\n    availableDevices = devicesReceived.slice(0);\r\n    logger.info(\r\n        'list of media devices has changed:',\r\n        availableDevices);\r\n\r\n    sendDeviceListToAnalytics(availableDevices);\r\n\r\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\r\n\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\r\n}\r\n\r\n/**\r\n * Handles the newly created Media Streams.\r\n * @param streams the new Media Streams\r\n * @param resolution the resolution of the video streams\r\n * @returns {*[]} object that describes the new streams\r\n */\r\nfunction handleLocalStream(streams, resolution) {\r\n    let audioStream, desktopStream, videoStream;\r\n    const res = [];\r\n\r\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\r\n    // the browser, its capabilities, etc. and has taken the decision whether to\r\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\r\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\r\n    // the specified streams and figure out what we've received based on\r\n    // obtainAudioAndVideoPermissions' decision.\r\n    if (streams) {\r\n        // As mentioned above, certian types of browser (e.g. Chrome) support\r\n        // (with a result which meets our requirements expressed bellow) calling\r\n        // getUserMedia once for both audio and video.\r\n        const audioVideo = streams.audioVideo;\r\n\r\n        if (audioVideo) {\r\n            const audioTracks = audioVideo.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                audioStream = new MediaStream();\r\n                for (let i = 0; i < audioTracks.length; i++) {\r\n                    audioStream.addTrack(audioTracks[i]);\r\n                }\r\n            }\r\n\r\n            const videoTracks = audioVideo.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                videoStream = new MediaStream();\r\n                for (let j = 0; j < videoTracks.length; j++) {\r\n                    videoStream.addTrack(videoTracks[j]);\r\n                }\r\n            }\r\n        } else {\r\n            // On other types of browser (e.g. Firefox) we choose (namely,\r\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\r\n            // (type).\r\n            audioStream = streams.audio;\r\n            videoStream = streams.video;\r\n        }\r\n\r\n        desktopStream = streams.desktop;\r\n    }\r\n\r\n    if (desktopStream) {\r\n        const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n        res.push({\r\n            stream,\r\n            sourceId,\r\n            sourceType,\r\n            track: stream.getVideoTracks()[0],\r\n            mediaType: MediaType.VIDEO,\r\n            videoType: VideoType.DESKTOP\r\n        });\r\n    }\r\n    if (audioStream) {\r\n        res.push({\r\n            stream: audioStream,\r\n            track: audioStream.getAudioTracks()[0],\r\n            mediaType: MediaType.AUDIO,\r\n            videoType: null\r\n        });\r\n    }\r\n    if (videoStream) {\r\n        res.push({\r\n            stream: videoStream,\r\n            track: videoStream.getVideoTracks()[0],\r\n            mediaType: MediaType.VIDEO,\r\n            videoType: VideoType.CAMERA,\r\n            resolution\r\n        });\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\r\n * source of a video element that tries to be browser-agnostic through feature\r\n * checking. Note though that it was not completely clear from the predating\r\n * browser-specific implementations what &quot;videoSrc&quot; was because one\r\n * implementation of {@link RTCUtils#getVideoSrc} would return\r\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\r\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\r\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\r\n * appear to be used anywhere. Generally, the implementation will try to follow\r\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\r\n * properties of the specified <tt>element</tt> taking into account vender\r\n * prefixes.\r\n *\r\n * @param element the element whose video source/src is to be set to the\r\n * specified <tt>stream</tt>\r\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\r\n * source/src of <tt>element</tt>\r\n */\r\nfunction defaultSetVideoSrc(element, stream) {\r\n    // srcObject\r\n    let srcObjectPropertyName = 'srcObject';\r\n\r\n    if (!(srcObjectPropertyName in element)) {\r\n        srcObjectPropertyName = 'mozSrcObject';\r\n        if (!(srcObjectPropertyName in element)) {\r\n            srcObjectPropertyName = null;\r\n        }\r\n    }\r\n    if (srcObjectPropertyName) {\r\n        element[srcObjectPropertyName] = stream;\r\n\r\n        return;\r\n    }\r\n\r\n    // src\r\n    let src;\r\n\r\n    if (stream) {\r\n        src = stream.jitsiObjectURL;\r\n\r\n        // Save the created URL for stream so we can reuse it and not keep\r\n        // creating URLs.\r\n        if (!src) {\r\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\r\n        }\r\n    }\r\n    element.src = src || '';\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass RTCUtils extends Listenable {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super(eventEmitter);\r\n    }\r\n\r\n    /**\r\n     * Depending on the browser, sets difference instance methods for\r\n     * interacting with user media and adds methods to native WebRTC-related\r\n     * objects. Also creates an instance variable for peer connection\r\n     * constraints.\r\n     *\r\n     * @param {Object} options\r\n     * @returns {void}\r\n     */\r\n    init(options = {}) {\r\n        if (typeof options.disableAEC === 'boolean') {\r\n            disableAEC = options.disableAEC;\r\n            logger.info(`Disable AEC: ${disableAEC}`);\r\n        }\r\n        if (typeof options.disableNS === 'boolean') {\r\n            disableNS = options.disableNS;\r\n            logger.info(`Disable NS: ${disableNS}`);\r\n        }\r\n        if (typeof options.disableAP === 'boolean') {\r\n            disableAP = options.disableAP;\r\n            logger.info(`Disable AP: ${disableAP}`);\r\n        }\r\n        if (typeof options.disableAGC === 'boolean') {\r\n            disableAGC = options.disableAGC;\r\n            logger.info(`Disable AGC: ${disableAGC}`);\r\n        }\r\n        if (typeof options.disableHPF === 'boolean') {\r\n            disableHPF = options.disableHPF;\r\n            logger.info(`Disable HPF: ${disableHPF}`);\r\n        }\r\n\r\n        availableDevices = undefined;\r\n        window.clearInterval(availableDevicesPollTimer);\r\n        availableDevicesPollTimer = undefined;\r\n\r\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\r\n\r\n        if (browser.usesNewGumFlow()) {\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    if (element) {\r\n                        element.srcObject = stream;\r\n                    }\r\n                });\r\n\r\n            this.getStreamID = ({ id }) => id;\r\n            this.getTrackID = ({ id }) => id;\r\n        } else if (browser.isChromiumBased() // this is chrome < 61\r\n                || browser.isReactNative()) {\r\n\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    defaultSetVideoSrc(element, stream);\r\n\r\n                    return element;\r\n                });\r\n\r\n            this.getStreamID = function({ id }) {\r\n                // A. MediaStreams from FF endpoints have the characters '{' and\r\n                // '}' that make jQuery choke.\r\n                // B. The react-native-webrtc implementation that we use at the\r\n                // time of this writing returns a number for the id of\r\n                // MediaStream. Let's just say that a number contains no special\r\n                // characters.\r\n                return (\r\n                    typeof id === 'number'\r\n                        ? id\r\n                        : SDPUtil.filterSpecialChars(id));\r\n            };\r\n            this.getTrackID = ({ id }) => id;\r\n\r\n            if (!MediaStream.prototype.getVideoTracks) {\r\n                MediaStream.prototype.getVideoTracks = function() {\r\n                    return this.videoTracks;\r\n                };\r\n            }\r\n            if (!MediaStream.prototype.getAudioTracks) {\r\n                MediaStream.prototype.getAudioTracks = function() {\r\n                    return this.audioTracks;\r\n                };\r\n            }\r\n        } else {\r\n            const message = 'Endpoint does not appear to be WebRTC-capable';\r\n\r\n            logger.error(message);\r\n            throw new Error(message);\r\n        }\r\n\r\n        this._initPCConstraints();\r\n\r\n        screenObtainer.init(\r\n            options,\r\n            this.getUserMediaWithConstraints.bind(this));\r\n\r\n        if (this.isDeviceListAvailable()) {\r\n            this.enumerateDevices(ds => {\r\n                availableDevices = ds.splice(0);\r\n\r\n                logger.debug('Available devices: ', availableDevices);\r\n                sendDeviceListToAnalytics(availableDevices);\r\n\r\n                eventEmitter.emit(\r\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\r\n                    availableDevices);\r\n\r\n\r\n                // Use a shared callback to handle both the devicechange event\r\n                // and the polling implementations. This prevents duplication\r\n                // and works around a chrome bug (verified to occur on 68) where\r\n                // devicechange fires twice in a row, which can cause async post\r\n                // devicechange processing to collide.\r\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\r\n                    if (compareAvailableMediaDevices(pds)) {\r\n                        onMediaDevicesListChanged(pds);\r\n                    }\r\n                });\r\n\r\n                if (browser.supportsDeviceChangeEvent()) {\r\n                    navigator.mediaDevices.addEventListener(\r\n                        'devicechange',\r\n                        updateKnownDevices);\r\n                } else {\r\n                    // Periodically poll enumerateDevices() method to check if\r\n                    // list of media devices has changed.\r\n                    availableDevicesPollTimer = window.setInterval(\r\n                        updateKnownDevices,\r\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates instance objects for peer connection constraints both for p2p\r\n     * and outside of p2p.\r\n     */\r\n    _initPCConstraints() {\r\n        if (browser.isFirefox()) {\r\n            this.pcConstraints = {};\r\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\r\n            this.pcConstraints = { optional: [\r\n                { googHighStartBitrate: 0 },\r\n                { googPayloadPadding: true },\r\n                { googScreencastMinBitrate: 100 },\r\n                { googCpuOveruseDetection: true },\r\n                { googCpuOveruseEncodeUsage: true },\r\n                { googCpuUnderuseThreshold: 55 },\r\n                { googCpuOveruseThreshold: 85 }\r\n            ] };\r\n\r\n            this.p2pPcConstraints\r\n                = JSON.parse(JSON.stringify(this.pcConstraints));\r\n        }\r\n\r\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n    * @param {string[]} um required user media types\r\n    * @param {Object} [options] optional parameters\r\n    * @param {string} options.resolution\r\n    * @param {number} options.bandwidth\r\n    * @param {number} options.fps\r\n    * @param {string} options.desktopStream\r\n    * @param {string} options.cameraDeviceId\r\n    * @param {string} options.micDeviceId\r\n    * @param {Object} options.frameRate - used only for dekstop sharing.\r\n    * @param {Object} options.frameRate.min - Minimum fps\r\n    * @param {Object} options.frameRate.max - Maximum fps\r\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\r\n    * enable system audio screen sharing.\r\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\r\n    * on failure.\r\n    **/\r\n    getUserMediaWithConstraints(um, options = {}) {\r\n        const constraints = getConstraints(um, options);\r\n\r\n        logger.info('Get media constraints', constraints);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n            .then(stream => {\r\n                logger.log('onUserMediaSuccess');\r\n                updateGrantedPermissions(um, stream);\r\n                resolve(stream);\r\n            })\r\n            .catch(error => {\r\n                logger.warn('Failed to get access to local media. '\r\n                    + ` ${error} ${constraints} `);\r\n                updateGrantedPermissions(um, undefined);\r\n                reject(new JitsiTrackError(error, constraints, um));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquires a media stream via getUserMedia that\r\n     * matches the given constraints\r\n     *\r\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\r\n     * @param {Object} constraints - Stream specifications to use.\r\n     * @returns {Promise}\r\n     */\r\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(stream => {\r\n                    logger.log('onUserMediaSuccess');\r\n                    updateGrantedPermissions(umDevices, stream);\r\n                    resolve(stream);\r\n                })\r\n                .catch(error => {\r\n                    logger.warn('Failed to get access to local media. '\r\n                        + ` ${error} ${constraints} `);\r\n                    updateGrantedPermissions(umDevices, undefined);\r\n                    reject(new JitsiTrackError(error, constraints, umDevices));\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquire a display stream via the screenObtainer. This requires extra\r\n     * logic compared to use screenObtainer versus normal device capture logic\r\n     * in RTCUtils#_newGetUserMediaWithConstraints.\r\n     *\r\n     * @param {Object} options\r\n     * @param {string[]} options.desktopSharingSources\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {Promise} A promise which will be resolved with an object which\r\n     * contains the acquired display stream. If desktop sharing is not supported\r\n     * then a rejected promise will be returned.\r\n     */\r\n    _newGetDesktopMedia(options) {\r\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\r\n            return Promise.reject(\r\n                new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            screenObtainer.obtainStream(\r\n                this._parseDesktopSharingOptions(options),\r\n                stream => {\r\n                    resolve(stream);\r\n                },\r\n                error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {Object} [options] optional parameters\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    obtainAudioAndVideoPermissions(options = {}) {\r\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\r\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\r\n\r\n        const requestingDesktop = options.devices.includes('desktop');\r\n\r\n        if (requestingDesktop && !screenObtainer.isSupported()) {\r\n            return Promise.reject(\r\n                new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return this._getAudioAndVideoStreams(options).then(streams =>\r\n            handleLocalStream(streams, options.resolution));\r\n    }\r\n\r\n    /**\r\n     * Performs one call to getUserMedia for audio and/or video and another call\r\n     * for desktop.\r\n     *\r\n     * @param {Object} options - An object describing how the gUM request should\r\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\r\n     * @returns {*} Promise object that will receive the new JitsiTracks on\r\n     * success or a JitsiTrackError on failure.\r\n     */\r\n    _getAudioAndVideoStreams(options) {\r\n        const requestingDesktop = options.devices.includes('desktop');\r\n\r\n        options.devices = options.devices.filter(device =>\r\n            device !== 'desktop');\r\n\r\n        const gumPromise = options.devices.length\r\n            ? this.getUserMediaWithConstraints(options.devices, options)\r\n            : Promise.resolve(null);\r\n\r\n        return gumPromise\r\n            .then(avStream => {\r\n                // If any requested devices are missing, call gum again in\r\n                // an attempt to obtain the actual error. For example, the\r\n                // requested video device is missing or permission was\r\n                // denied.\r\n                const missingTracks\r\n                    = this._getMissingTracks(options.devices, avStream);\r\n\r\n                if (missingTracks.length) {\r\n                    this.stopMediaStream(avStream);\r\n\r\n                    return this.getUserMediaWithConstraints(\r\n                        missingTracks, options)\r\n\r\n                        // GUM has already failed earlier and this success\r\n                        // handling should not be reached.\r\n                        .then(() => Promise.reject(new JitsiTrackError(\r\n                            { name: 'UnknownError' },\r\n                            getConstraints(options.devices, options),\r\n                            missingTracks)));\r\n                }\r\n\r\n                return avStream;\r\n            })\r\n            .then(audioVideo => {\r\n                if (!requestingDesktop) {\r\n                    return { audioVideo };\r\n                }\r\n\r\n                if (options.desktopSharingSourceDevice) {\r\n                    this.stopMediaStream(audioVideo);\r\n\r\n                    throw new Error('Using a camera as screenshare source is'\r\n                        + 'not supported on this browser.');\r\n                }\r\n\r\n                return new Promise((resolve, reject) => {\r\n                    screenObtainer.obtainStream(\r\n                        this._parseDesktopSharingOptions(options),\r\n                        desktop => resolve({\r\n                            audioVideo,\r\n                            desktop\r\n                        }),\r\n                        error => {\r\n                            if (audioVideo) {\r\n                                this.stopMediaStream(audioVideo);\r\n                            }\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Private utility for determining if the passed in MediaStream contains\r\n     * tracks of the type(s) specified in the requested devices.\r\n     *\r\n     * @param {string[]} requestedDevices - The track types that are expected to\r\n     * be includes in the stream.\r\n     * @param {MediaStream} stream - The MediaStream to check if it has the\r\n     * expected track types.\r\n     * @returns {string[]} An array of string with the missing track types. The\r\n     * array will be empty if all requestedDevices are found in the stream.\r\n     */\r\n    _getMissingTracks(requestedDevices = [], stream) {\r\n        const missingDevices = [];\r\n\r\n        const audioDeviceRequested = requestedDevices.includes('audio');\r\n        const audioTracksReceived\r\n            = stream && stream.getAudioTracks().length > 0;\r\n\r\n        if (audioDeviceRequested && !audioTracksReceived) {\r\n            missingDevices.push('audio');\r\n        }\r\n\r\n        const videoDeviceRequested = requestedDevices.includes('video');\r\n        const videoTracksReceived\r\n            = stream && stream.getVideoTracks().length > 0;\r\n\r\n        if (videoDeviceRequested && !videoTracksReceived) {\r\n            missingDevices.push('video');\r\n        }\r\n\r\n        return missingDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns an object formatted for specifying desktop sharing parameters.\r\n     *\r\n     * @param {Object} options - Takes in the same options object as\r\n     * {@link obtainAudioAndVideoPermissions}.\r\n     * @returns {Object}\r\n     */\r\n    _parseDesktopSharingOptions(options) {\r\n        return {\r\n            desktopSharingSources: options.desktopSharingSources,\r\n            gumOptions: {\r\n                frameRate: options.desktopSharingFrameRate\r\n            },\r\n            trackOptions: getTrackSSConstraints(options)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets streams from specified device types. This function intentionally\r\n     * ignores errors for upstream to catch and handle instead.\r\n     *\r\n     * @param {Object} options - A hash describing what devices to get and\r\n     * relevant constraints.\r\n     * @param {string[]} options.devices - The types of media to capture. Valid\r\n     * values are \"desktop\", \"audio\", and \"video\".\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @param {String} options.desktopSharingSourceDevice - The device id or\r\n     * label for a video input source that should be used for screensharing.\r\n     * @returns {Promise} The promise, when successful, will return an array of\r\n     * meta data for the requested device type, which includes the stream and\r\n     * track. If an error occurs, it will be deferred to the caller for\r\n     * handling.\r\n     */\r\n    newObtainAudioAndVideoPermissions(options) {\r\n        logger.info('Using the new gUM flow');\r\n\r\n        const mediaStreamsMetaData = [];\r\n\r\n        // Declare private functions to be used in the promise chain below.\r\n        // These functions are declared in the scope of this function because\r\n        // they are not being used anywhere else, so only this function needs to\r\n        // know about them.\r\n\r\n        /**\r\n         * Executes a request for desktop media if specified in options.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestDesktopDevice = function() {\r\n            const umDevices = options.devices || [];\r\n            const isDesktopDeviceRequested\r\n                = umDevices.indexOf('desktop') !== -1;\r\n\r\n            if (!isDesktopDeviceRequested) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const {\r\n                desktopSharingSourceDevice,\r\n                desktopSharingSources,\r\n                desktopSharingFrameRate\r\n            } = options;\r\n\r\n            // Attempt to use a video input device as a screenshare source if\r\n            // the option is defined.\r\n            if (desktopSharingSourceDevice) {\r\n                const matchingDevice\r\n                    = availableDevices && availableDevices.find(device =>\r\n                        device.kind === 'videoinput'\r\n                            && (device.deviceId === desktopSharingSourceDevice\r\n                            || device.label === desktopSharingSourceDevice));\r\n\r\n                if (!matchingDevice) {\r\n                    return Promise.reject(new JitsiTrackError(\r\n                        { name: 'ConstraintNotSatisfiedError' },\r\n                        {},\r\n                        [ desktopSharingSourceDevice ]\r\n                    ));\r\n                }\r\n\r\n                const requestedDevices = [ 'video' ];\r\n\r\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\r\n                // get constraints for the desktop stream.\r\n                const { gumOptions, trackOptions }\r\n                    = this._parseDesktopSharingOptions(options);\r\n\r\n                const constraints = {\r\n                    video: {\r\n                        ...gumOptions,\r\n                        deviceId: matchingDevice.deviceId\r\n                    }\r\n                };\r\n\r\n                return this._newGetUserMediaWithConstraints(\r\n                    requestedDevices, constraints)\r\n                    .then(stream => {\r\n                        const track = stream && stream.getTracks()[0];\r\n                        const applyConstrainsPromise\r\n                            = track && track.applyConstraints\r\n                                ? track.applyConstraints(trackOptions)\r\n                                : Promise.resolve();\r\n\r\n                        return applyConstrainsPromise\r\n                            .then(() => {\r\n                                return {\r\n                                    sourceType: 'device',\r\n                                    stream\r\n                                };\r\n                            });\r\n                    });\r\n            }\r\n\r\n            return this._newGetDesktopMedia({\r\n                desktopSharingSources,\r\n                desktopSharingFrameRate\r\n            });\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Creates a meta data object about the passed in desktopStream and\r\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\r\n         * returned later.\r\n         *\r\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\r\n         * capture.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\r\n            if (!desktopStream) {\r\n                return;\r\n            }\r\n\r\n            const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n            const desktopAudioTracks = stream.getAudioTracks();\r\n\r\n            if (desktopAudioTracks.length) {\r\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopAudioStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopAudioStream.getAudioTracks()[0]\r\n                });\r\n            }\r\n\r\n            const desktopVideoTracks = stream.getVideoTracks();\r\n\r\n            if (desktopVideoTracks.length) {\r\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopVideoStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopVideoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.DESKTOP\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Executes a request for audio and/or video, as specified in options.\r\n         * By default both audio and video will be captured if options.devices\r\n         * is not defined.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestCaptureDevices = function() {\r\n            const umDevices = options.devices || [ 'audio', 'video' ];\r\n            const requestedCaptureDevices = umDevices.filter(device =>\r\n                device === 'audio'\r\n                || (device === 'video' && browser.supportsVideo()));\r\n\r\n            if (!requestedCaptureDevices.length) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const constraints = newGetConstraints(\r\n                requestedCaptureDevices, options);\r\n\r\n            logger.info('Got media constraints: ', constraints);\r\n\r\n            return this._newGetUserMediaWithConstraints(\r\n                requestedCaptureDevices, constraints);\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Splits the passed in media stream into separate audio and video\r\n         * streams and creates meta data objects for each and pushes them to the\r\n         * internal array mediaStreamsMetaData to be returned later.\r\n         *\r\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\r\n         * video track.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddAVTracks = function(avStream) {\r\n            if (!avStream) {\r\n                return;\r\n            }\r\n\r\n            const audioTracks = avStream.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                const audioStream = new MediaStream(audioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: audioStream,\r\n                    track: audioStream.getAudioTracks()[0],\r\n                    effects: options.effects\r\n                });\r\n            }\r\n\r\n            const videoTracks = avStream.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                const videoStream = new MediaStream(videoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: videoStream,\r\n                    track: videoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.CAMERA,\r\n                    effects: options.effects\r\n                });\r\n            }\r\n        };\r\n\r\n        return maybeRequestDesktopDevice()\r\n            .then(maybeCreateAndAddDesktopTrack)\r\n            .then(maybeRequestCaptureDevices)\r\n            .then(maybeCreateAndAddAVTracks)\r\n            .then(() => mediaStreamsMetaData)\r\n            .catch(error => {\r\n                mediaStreamsMetaData.forEach(({ stream }) => {\r\n                    this.stopMediaStream(stream);\r\n                });\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks whether it is possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {boolean} {@code true} if the device listing is available;\r\n     * {@code false}, otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return Boolean(\r\n            navigator.mediaDevices\r\n                && navigator.mediaDevices.enumerateDevices);\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @params {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return deviceType === 'output' || deviceType === 'audiooutput'\r\n            ? isAudioOutputDeviceChangeAvailable\r\n            : true;\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param mediaStream MediaStream object to stop.\r\n     */\r\n    stopMediaStream(mediaStream) {\r\n        if (!mediaStream) {\r\n            return;\r\n        }\r\n\r\n        mediaStream.getTracks().forEach(track => {\r\n            if (track.stop) {\r\n                track.stop();\r\n            }\r\n        });\r\n\r\n        // leave stop for implementation still using it\r\n        if (mediaStream.stop) {\r\n            mediaStream.stop();\r\n        }\r\n\r\n        // The MediaStream implementation of the react-native-webrtc project has\r\n        // an explicit release method that is to be invoked in order to release\r\n        // used resources such as memory.\r\n        if (mediaStream.release) {\r\n            mediaStream.release();\r\n        }\r\n\r\n        // if we have done createObjectURL, lets clean it\r\n        const url = mediaStream.jitsiObjectURL;\r\n\r\n        if (url) {\r\n            delete mediaStream.jitsiObjectURL;\r\n            URL.revokeObjectURL(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return screenObtainer.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\r\n     *      device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        if (!this.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        return featureDetectionAudioEl.setSinkId(deviceId)\r\n            .then(() => {\r\n                audioOutputDeviceId = deviceId;\r\n                audioOutputChanged = true;\r\n\r\n                logger.log(`Audio output device set to ${deviceId}`);\r\n\r\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                    deviceId);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return audioOutputDeviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {Array} list of available media devices.\r\n     */\r\n    getCurrentlyAvailableMediaDevices() {\r\n        return availableDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    getEventDataForActiveDevice(device) {\r\n        const deviceList = [];\r\n        const deviceData = {\r\n            'deviceId': device.deviceId,\r\n            'kind': device.kind,\r\n            'label': device.label,\r\n            'groupId': device.groupId\r\n        };\r\n\r\n        deviceList.push(deviceData);\r\n\r\n        return { deviceList };\r\n    }\r\n\r\n    /**\r\n     * Configures the given PeerConnection constraints to either enable or\r\n     * disable (according to the value of the 'enable' parameter) the\r\n     * 'googSuspendBelowMinBitrate' option.\r\n     * @param constraints the constraints on which to operate.\r\n     * @param enable {boolean} whether to enable or disable the suspend video\r\n     * option.\r\n     */\r\n    setSuspendVideo(constraints, enable) {\r\n        if (!constraints.optional) {\r\n            constraints.optional = [];\r\n        }\r\n\r\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\r\n        // that the elements of constraints.optional contain a single property).\r\n        constraints.optional\r\n            = constraints.optional.filter(\r\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\r\n\r\n        if (enable) {\r\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\r\n        }\r\n    }\r\n}\r\n\r\nconst rtcUtils = new RTCUtils();\r\n\r\n/**\r\n * Wraps original attachMediaStream function to set current audio output device\r\n * if this is supported.\r\n * @param {Function} origAttachMediaStream\r\n * @returns {Function}\r\n */\r\nfunction wrapAttachMediaStream(origAttachMediaStream) {\r\n    return function(element, stream) {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\r\n\r\n        if (stream\r\n                && rtcUtils.isDeviceChangeAvailable('output')\r\n                && stream.getAudioTracks\r\n                && stream.getAudioTracks().length\r\n\r\n                // we skip setting audio output if there was no explicit change\r\n                && audioOutputChanged) {\r\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\r\n                .catch(function(ex) {\r\n                    const err\r\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\r\n\r\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\r\n                        promise: this, // eslint-disable-line no-invalid-this\r\n                        reason: err\r\n                    });\r\n\r\n                    logger.warn(\r\n                        'Failed to set audio output device for the element.'\r\n                            + ' Default audio output device will be used'\r\n                            + ' instead',\r\n                        element,\r\n                        err);\r\n                });\r\n        }\r\n\r\n        return res;\r\n    };\r\n}\r\n\r\nexport default rtcUtils;\r\n","/**\r\n * This utility class defines custom onerror and onunhandledrejection functions.\r\n * The custom error handlers respect the previously-defined error handlers.\r\n * GlobalOnErrorHandler class provides utilities to add many custom error\r\n * handlers and to execute the error handlers directly.\r\n */\r\n\r\n\r\n/**\r\n * List with global error handlers that will be executed.\r\n */\r\nconst handlers = [];\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnErrorHandler = window.onerror;\r\n\r\n/**\r\n * Custom error handler that calls the old global error handler and executes\r\n * all handlers that were previously added.\r\n */\r\nfunction JitsiGlobalErrorHandler(...args) {\r\n    handlers.forEach(handler => handler(...args));\r\n    oldOnErrorHandler && oldOnErrorHandler(...args);\r\n}\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnUnhandledRejection = window.onunhandledrejection;\r\n\r\n/**\r\n * Custom handler that calls the old global handler and executes all handlers\r\n * that were previously added. This handler handles rejected Promises.\r\n */\r\nfunction JitsiGlobalUnhandledRejection(event) {\r\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\r\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\r\n}\r\n\r\n// Setting the custom error handlers.\r\nwindow.onerror = JitsiGlobalErrorHandler;\r\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\r\n\r\nconst GlobalOnErrorHandler = {\r\n    /**\r\n     * Adds new error handlers.\r\n     * @param handler the new handler.\r\n     */\r\n    addHandler(handler) {\r\n        handlers.push(handler);\r\n    },\r\n\r\n    /**\r\n     * Calls the global error handler if there is one.\r\n     * @param error the error to pass to the error handler\r\n     */\r\n    callErrorHandler(error) {\r\n        const errHandler = window.onerror;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(null, null, null, null, error);\r\n    },\r\n\r\n    /**\r\n     * Calls the global rejection handler if there is one.\r\n     * @param error the error to pass to the rejection handler.\r\n     */\r\n    callUnhandledRejectionHandler(error) {\r\n        const errHandler = window.onunhandledrejection;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(error);\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = GlobalOnErrorHandler;\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport { safeCounterIncrement } from '../util/MathUtil';\r\n\r\nimport BridgeChannel from './BridgeChannel';\r\nimport JitsiLocalTrack from './JitsiLocalTrack';\r\nimport RTCUtils from './RTCUtils';\r\nimport TraceablePeerConnection from './TraceablePeerConnection';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The counter used to generated id numbers assigned to peer connections\r\n * @type {number}\r\n */\r\nlet peerConnectionIdCounter = 0;\r\n\r\n/**\r\n * The counter used to generate id number for the local\r\n * <code>MediaStreamTrack</code>s.\r\n * @type {number}\r\n */\r\nlet rtcTrackIdCounter = 0;\r\n\r\n/**\r\n *\r\n * @param tracksInfo\r\n * @param options\r\n */\r\nfunction createLocalTracks(tracksInfo, options) {\r\n    const newTracks = [];\r\n    let deviceId = null;\r\n\r\n    tracksInfo.forEach(trackInfo => {\r\n        if (trackInfo.mediaType === MediaType.AUDIO) {\r\n            deviceId = options.micDeviceId;\r\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\r\n            deviceId = options.cameraDeviceId;\r\n        }\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n        const localTrack = new JitsiLocalTrack({\r\n            ...trackInfo,\r\n            deviceId,\r\n            facingMode: options.facingMode,\r\n            rtcId: rtcTrackIdCounter,\r\n            effects: options.effects\r\n        });\r\n\r\n        newTracks.push(localTrack);\r\n    });\r\n\r\n    return newTracks;\r\n}\r\n\r\n/**\r\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\r\n * about MedieaTracks.\r\n *\r\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\r\n * MediaTrack instances. Each can look like:\r\n * {{\r\n *     stream: MediaStream instance that holds a track with audio or video,\r\n *     track: MediaTrack within the MediaStream,\r\n *     videoType: \"camera\" or \"desktop\" or falsy,\r\n *     sourceId: ID of the desktopsharing source,\r\n *     sourceType: The desktopsharing source type,\r\n *     effects: Array of effect types\r\n * }}\r\n */\r\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\r\n    return mediaStreamMetaData.map(metaData => {\r\n        const {\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType,\r\n            effects\r\n        } = metaData;\r\n\r\n        const { deviceId, facingMode } = track.getSettings();\r\n\r\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\r\n        // so RTC does not need to handle ID management. This move would be\r\n        // safer to do once the old createLocalTracks is removed.\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n\r\n        return new JitsiLocalTrack({\r\n            deviceId,\r\n            facingMode,\r\n            mediaType: track.kind,\r\n            rtcId: rtcTrackIdCounter,\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType: videoType || null,\r\n            effects\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default class RTC extends Listenable {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param options\r\n     */\r\n    constructor(conference, options = {}) {\r\n        super();\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of active <tt>TraceablePeerConnection</tt>.\r\n         * @type {Map.<number, TraceablePeerConnection>}\r\n         */\r\n        this.peerConnections = new Map();\r\n\r\n        this.localTracks = [];\r\n\r\n        this.options = options;\r\n\r\n        // BridgeChannel instance.\r\n        // @private\r\n        // @type {BridgeChannel}\r\n        this._channel = null;\r\n\r\n        /**\r\n         * The value specified to the last invocation of setLastN before the\r\n         * channel completed opening. If non-null, the value will be sent\r\n         * through a channel (once) as soon as it opens and will then be\r\n         * discarded.\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this._lastN = -1;\r\n\r\n        /**\r\n         * Defines the last N endpoints list. It can be null or an array once\r\n         * initialised with a channel last N event.\r\n         * @type {Array<string>|null}\r\n         * @private\r\n         */\r\n        this._lastNEndpoints = null;\r\n\r\n        /*\r\n         * Holds the sender video constraints signaled from the bridge.\r\n         */\r\n        this._senderVideoConstraints = {};\r\n\r\n        /**\r\n         * The number representing the maximum video height the local client\r\n         * should receive from the bridge.\r\n         *\r\n         * @type {number|undefined}\r\n         * @private\r\n         */\r\n        this._maxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\r\n         * no user is pinned.\r\n         * @type {string|null}\r\n         * @private\r\n         */\r\n        this._pinnedEndpoint = null;\r\n\r\n        /**\r\n         * The endpoint IDs of currently selected participants.\r\n         *\r\n         * @type {Array}\r\n         * @private\r\n         */\r\n        this._selectedEndpoints = [];\r\n\r\n        // The last N change listener.\r\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\r\n\r\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\r\n        this._updateAudioOutputForAudioTracks\r\n            = this._updateAudioOutputForAudioTracks.bind(this);\r\n\r\n        // Switch audio output device on all remote audio tracks. Local audio\r\n        // tracks handle this event by themselves.\r\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._updateAudioOutputForAudioTracks\r\n            );\r\n\r\n            RTCUtils.addListener(\r\n                RTCEvents.DEVICE_LIST_CHANGED,\r\n                this._onDeviceListChanged\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes any listeners and stored state from this {@code RTC} instance.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        RTCUtils.removeListener(\r\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n            this._updateAudioOutputForAudioTracks\r\n        );\r\n\r\n        RTCUtils.removeListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            this._onDeviceListChanged\r\n        );\r\n\r\n        this.removeListener(\r\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n            this._lastNChangeListener\r\n        );\r\n\r\n        if (this._channelOpenListener) {\r\n            this.removeListener(\r\n                RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exposes the private helper for converting a WebRTC MediaStream to a\r\n     * JitsiLocalTrack.\r\n     *\r\n     * @param {Array<Object>} tracksInfo\r\n     * @returns {Array<JitsiLocalTrack>}\r\n     */\r\n    static newCreateLocalTracks(tracksInfo) {\r\n        return _newCreateLocalTracks(tracksInfo);\r\n    }\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {object} [options] Optional parameters.\r\n     * @param {array} options.devices The devices that will be requested.\r\n     * @param {string} options.resolution Resolution constraints.\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    static obtainAudioAndVideoPermissions(options) {\r\n        const usesNewGumFlow = browser.usesNewGumFlow();\r\n        const obtainMediaPromise = usesNewGumFlow\r\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\r\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\r\n\r\n        return obtainMediaPromise.then(tracksInfo => {\r\n            if (usesNewGumFlow) {\r\n                return _newCreateLocalTracks(tracksInfo);\r\n            }\r\n\r\n            return createLocalTracks(tracksInfo, options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the bridge channel of this instance.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     */\r\n    initializeBridgeChannel(peerconnection, wsUrl) {\r\n        this._channel = new BridgeChannel(\r\n            peerconnection, wsUrl, this.eventEmitter, this._senderVideoConstraintsChanged.bind(this));\r\n\r\n        this._channelOpenListener = () => {\r\n            // When the channel becomes available, tell the bridge about\r\n            // video selections so that it can do adaptive simulcast,\r\n            // we want the notification to trigger even if userJid\r\n            // is undefined, or null.\r\n            try {\r\n                this._channel.sendPinnedEndpointMessage(\r\n                    this._pinnedEndpoint);\r\n                this._channel.sendSelectedEndpointsMessage(\r\n                    this._selectedEndpoints);\r\n\r\n                if (typeof this._maxFrameHeight !== 'undefined') {\r\n                    this._channel.sendReceiverVideoConstraintMessage(\r\n                        this._maxFrameHeight);\r\n                }\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    `Cannot send selected(${this._selectedEndpoint})`\r\n                    + `pinned(${this._pinnedEndpoint})`\r\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\r\n                    error);\r\n            }\r\n\r\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener);\r\n            this._channelOpenListener = null;\r\n\r\n            // If setLastN was invoked before the bridge channel completed\r\n            // opening, apply the specified value now that the channel\r\n            // is open. NOTE that -1 is the default value assumed by both\r\n            // RTC module and the JVB.\r\n            if (this._lastN !== -1) {\r\n                this._channel.sendSetLastNMessage(this._lastN);\r\n            }\r\n        };\r\n\r\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\r\n            this._channelOpenListener);\r\n\r\n        // Add Last N change listener.\r\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n            this._lastNChangeListener);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the list of known audio and video devices has\r\n     * been updated. Attempts to update the known available audio output\r\n     * devices.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onDeviceListChanged() {\r\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the sender video constraints signaled from the bridge have changed.\r\n     *\r\n     * @param {Object} senderVideoConstraints the sender video constraints from the bridge.\r\n     * @private\r\n     */\r\n    _senderVideoConstraintsChanged(senderVideoConstraints) {\r\n        this._senderVideoConstraints = senderVideoConstraints;\r\n        this.eventEmitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Receives events when Last N had changed.\r\n     * @param {array} lastNEndpoints The new Last N endpoints.\r\n     * @private\r\n     */\r\n    _onLastNChanged(lastNEndpoints = []) {\r\n        const oldLastNEndpoints = this._lastNEndpoints || [];\r\n        let leavingLastNEndpoints = [];\r\n        let enteringLastNEndpoints = [];\r\n\r\n        this._lastNEndpoints = lastNEndpoints;\r\n\r\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\r\n            id => !this.isInLastN(id));\r\n\r\n        enteringLastNEndpoints = lastNEndpoints.filter(\r\n            id => oldLastNEndpoints.indexOf(id) === -1);\r\n\r\n        this.conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            leavingLastNEndpoints,\r\n            enteringLastNEndpoints);\r\n    }\r\n\r\n    /**\r\n     * Should be called when current media session ends and after the\r\n     * PeerConnection has been closed using PeerConnection.close() method.\r\n     */\r\n    onCallEnded() {\r\n        if (this._channel) {\r\n            // The BridgeChannel is not explicitly closed as the PeerConnection\r\n            // is closed on call ended which triggers datachannel onclose\r\n            // events. If using a WebSocket, the channel must be closed since\r\n            // it is not managed by the PeerConnection.\r\n            // The reference is cleared to disable any logic related to the\r\n            // channel.\r\n            if (this._channel && this._channel.mode === 'websocket') {\r\n                this._channel.close();\r\n            }\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum video size the local participant should receive from\r\n     * remote participants. Will cache the value and send it through the channel\r\n     * once it is created.\r\n     *\r\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\r\n     * this receiver is willing to receive.\r\n     * @returns {void}\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        this._maxFrameHeight = maxFrameHeight;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participants with the given ids to be the selected\r\n     * participants in order to always receive video for this participant (even\r\n     * when last n is enabled). If there is no channel we store it and send it\r\n     * through the channel once it is created.\r\n     *\r\n     * @param {Array<string>} ids - The user ids.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     * @returns {void}\r\n     */\r\n    selectEndpoints(ids) {\r\n        this._selectedEndpoints = ids;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendSelectedEndpointsMessage(ids);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participant with the given id to be the pinned participant in\r\n     * order to always receive video for this participant (even when last n is\r\n     * enabled).\r\n     * @param {stirng} id The user id.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     */\r\n    pinEndpoint(id) {\r\n        // Cache the value if channel is missing, till we open it.\r\n        this._pinnedEndpoint = id;\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendPinnedEndpointMessage(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static addListener(eventType, listener) {\r\n        RTCUtils.addListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static removeListener(eventType, listener) {\r\n        RTCUtils.removeListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param options\r\n     */\r\n    static init(options = {}) {\r\n        this.options = options;\r\n\r\n        return RTCUtils.init(this.options);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>TraceablePeerConnection</tt>\r\n     * @param {SignalingLayer} signaling The signaling layer that will\r\n     *      provide information about the media or participants which is not\r\n     *      carried over SDP.\r\n     * @param {object} iceConfig An object describing the ICE config like\r\n     *      defined in the WebRTC specification.\r\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\r\n     *      in a peer to peer type of session.\r\n     * @param {object} options The config options.\r\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\r\n     * enabled on the PeerConnection.\r\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\r\n     *      the simulcast.\r\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\r\n     *      RTX.\r\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n     *      disabled by removing it from the SDP.\r\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\r\n     *      preferred over other video codecs.\r\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n     * @return {TraceablePeerConnection}\r\n     */\r\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\r\n        const pcConstraints = RTC.getPCConstraints(isP2P);\r\n\r\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\r\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\r\n\r\n            Statistics.analytics.addPermanentProperties(\r\n                { abtestSuspendVideo: options.abtestSuspendVideo });\r\n        }\r\n\r\n        // FIXME: We should rename iceConfig to pcConfig.\r\n\r\n        if (options.enableInsertableStreams) {\r\n            logger.debug('E2EE - setting insertable streams constraints');\r\n            iceConfig.encodedInsertableStreams = true;\r\n            iceConfig.forceEncodedAudioInsertableStreams = true; // legacy, to be removed in M85.\r\n            iceConfig.forceEncodedVideoInsertableStreams = true; // legacy, to be removed in M85.\r\n        }\r\n\r\n        if (browser.supportsSdpSemantics()) {\r\n            iceConfig.sdpSemantics = 'plan-b';\r\n        }\r\n\r\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\r\n        // The default policy generates separate ice candidates for audio and video connections.\r\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\r\n        iceConfig.bundlePolicy = 'max-bundle';\r\n\r\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\r\n\r\n        const newConnection\r\n            = new TraceablePeerConnection(\r\n                this,\r\n                peerConnectionIdCounter,\r\n                signaling,\r\n                iceConfig, pcConstraints,\r\n                isP2P, options);\r\n\r\n        this.peerConnections.set(newConnection.id, newConnection);\r\n\r\n        return newConnection;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Removed given peer connection from this RTC module instance.\r\n     * @param {TraceablePeerConnection} traceablePeerConnection\r\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\r\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\r\n     * this RTC instance.\r\n     */\r\n    _removePeerConnection(traceablePeerConnection) {\r\n        const id = traceablePeerConnection.id;\r\n\r\n        if (this.peerConnections.has(id)) {\r\n            // NOTE Remote tracks are not removed here.\r\n            this.peerConnections.delete(id);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    addLocalTrack(track) {\r\n        if (!track) {\r\n            throw new Error('track must not be null nor undefined');\r\n        }\r\n\r\n        this.localTracks.push(track);\r\n\r\n        track.conference = this.conference;\r\n    }\r\n\r\n    /**\r\n     * Returns the current value for \"lastN\" - the amount of videos are going\r\n     * to be delivered. When set to -1 for unlimited or all available videos.\r\n     * @return {number}\r\n     */\r\n    getLastN() {\r\n        return this._lastN;\r\n    }\r\n\r\n    /**\r\n     * @return {Object} The sender video constraints signaled from the brridge.\r\n     */\r\n    getSenderVideoConstraints() {\r\n        return this._senderVideoConstraints;\r\n    }\r\n\r\n    /**\r\n     * Get local video track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalVideoTrack() {\r\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\r\n\r\n\r\n        return localVideo.length ? localVideo[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Get local audio track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalAudioTrack() {\r\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n\r\n        return localAudio.length ? localAudio[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the local tracks of the given media type, or all local tracks if\r\n     * no specific type is given.\r\n     * @param {MediaType} [mediaType] Optional media type filter.\r\n     * (audio or video).\r\n     */\r\n    getLocalTracks(mediaType) {\r\n        let tracks = this.localTracks.slice();\r\n\r\n        if (mediaType !== undefined) {\r\n            tracks = tracks.filter(\r\n                track => track.getType() === mediaType);\r\n        }\r\n\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * Obtains all remote tracks currently known to this RTC module instance.\r\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\r\n     *      by their media type if this argument is specified.\r\n     * @return {Array<JitsiRemoteTrack>}\r\n     */\r\n    getRemoteTracks(mediaType) {\r\n        let remoteTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\r\n\r\n            if (pcRemoteTracks) {\r\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\r\n            }\r\n        }\r\n\r\n        return remoteTracks;\r\n    }\r\n\r\n    /**\r\n     * Set mute for all local audio streams attached to the conference.\r\n     * @param value The mute value.\r\n     * @returns {Promise}\r\n     */\r\n    setAudioMute(value) {\r\n        const mutePromises = [];\r\n\r\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\r\n            // this is a Promise\r\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\r\n        });\r\n\r\n        // We return a Promise from all Promises so we can wait for their\r\n        // execution.\r\n        return Promise.all(mutePromises);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    removeLocalTrack(track) {\r\n        const pos = this.localTracks.indexOf(track);\r\n\r\n        if (pos === -1) {\r\n            return;\r\n        }\r\n\r\n        this.localTracks.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n     * (resource part of the JID). Returns array of removed tracks.\r\n     *\r\n     * @param {string} Owner The resource part of the MUC JID.\r\n     * @returns {JitsiRemoteTrack[]}\r\n     */\r\n    removeRemoteTracks(owner) {\r\n        let removedTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\r\n\r\n            removedTracks = removedTracks.concat(pcRemovedTracks);\r\n        }\r\n\r\n        logger.debug(\r\n            `Removed remote tracks for ${owner}`\r\n                + ` count: ${removedTracks.length}`);\r\n\r\n        return removedTracks;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    static getPCConstraints(isP2P) {\r\n        const pcConstraints\r\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\r\n\r\n        if (!pcConstraints) {\r\n            return {};\r\n        }\r\n\r\n        return JSON.parse(JSON.stringify(pcConstraints));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param elSelector\r\n     * @param stream\r\n     */\r\n    static attachMediaStream(elSelector, stream) {\r\n        return RTCUtils.attachMediaStream(elSelector, stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given stream.\r\n     * @param {MediaStream} stream\r\n     */\r\n    static getStreamID(stream) {\r\n        return RTCUtils.getStreamID(stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given track.\r\n     * @param {MediaStreamTrack} track\r\n     */\r\n    static getTrackID(track) {\r\n        return RTCUtils.getTrackID(track);\r\n    }\r\n\r\n    /**\r\n     * Returns true if retrieving the the list of input devices is supported\r\n     * and false if not.\r\n     */\r\n    static isDeviceListAvailable() {\r\n        return RTCUtils.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] Type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    static isDeviceChangeAvailable(deviceType) {\r\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    static isWebRtcSupported() {\r\n        return browser.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    static getAudioOutputDevice() {\r\n        return RTCUtils.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {array} list of available media devices.\r\n     */\r\n    static getCurrentlyAvailableMediaDevices() {\r\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    static getEventDataForActiveDevice(device) {\r\n        return RTCUtils.getEventDataForActiveDevice(device);\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId Id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices().\r\n     * @returns {Promise} resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    static setAudioOutputDevice(deviceId) {\r\n        return RTCUtils.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\r\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\r\n     * \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStream(stream) {\r\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\r\n     * ID is considered a valid \"user\" stream which means that it's not a\r\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {string} streamId The id of WebRTC MediaStream.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStreamById(streamId) {\r\n        return streamId && streamId !== 'mixedmslabel'\r\n            && streamId !== 'default';\r\n    }\r\n\r\n    /**\r\n     * Allows to receive list of available cameras/microphones.\r\n     * @param {function} callback Would receive array of devices as an\r\n     *      argument.\r\n     */\r\n    static enumerateDevices(callback) {\r\n        RTCUtils.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param {MediaStream} mediaStream MediaStream object to stop.\r\n     */\r\n    static stopMediaStream(mediaStream) {\r\n        RTCUtils.stopMediaStream(mediaStream);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    static isDesktopSharingEnabled() {\r\n        return RTCUtils.isDesktopSharingEnabled();\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened bridge channel.\r\n     */\r\n    closeBridgeChannel() {\r\n        if (this._channel) {\r\n            this._channel.close();\r\n            this._channel = null;\r\n\r\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                this._lastNChangeListener);\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {number} ssrc\r\n     * @param {number} audioLevel\r\n     * @param {boolean} isLocal\r\n     */\r\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        const track = tpc.getTrackBySSRC(ssrc);\r\n\r\n        if (!track) {\r\n            return;\r\n        } else if (!track.isAudioTrack()) {\r\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\r\n\r\n            return;\r\n        } else if (track.isLocal() !== isLocal) {\r\n            logger.error(\r\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\r\n        }\r\n\r\n        track.setAudioLevel(audioLevel, tpc);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Sends message via the bridge channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     *      message. If \"\" the message will be sent to all participants.\r\n     * @param {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails or there is no data channel created.\r\n     */\r\n    sendChannelMessage(to, payload) {\r\n        if (this._channel) {\r\n            this._channel.sendMessage(to, payload);\r\n        } else {\r\n            throw new Error('Channel support is disabled!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects a new value for \"lastN\". The requested amount of videos are going\r\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n     * all available videos.\r\n     * @param {number} value the new value for lastN.\r\n     */\r\n    setLastN(value) {\r\n        if (this._lastN !== value) {\r\n            this._lastN = value;\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendSetLastNMessage(value);\r\n            }\r\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if the endpoint id is currently included in the last N.\r\n     * @param {string} id The endpoint id that we check for last N.\r\n     * @returns {boolean} true if the endpoint id is in the last N or if we\r\n     * don't have bridge channel support, otherwise we return false.\r\n     */\r\n    isInLastN(id) {\r\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\r\n            || this._lastNEndpoints.indexOf(id) > -1;\r\n    }\r\n\r\n    /**\r\n     * Updates the target audio output device for all remote audio tracks.\r\n     *\r\n     * @param {string} deviceId - The device id of the audio ouput device to\r\n     * use for all remote tracks.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _updateAudioOutputForAudioTracks(deviceId) {\r\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const track of remoteAudioTracks) {\r\n            track.setAudioOutput(deviceId);\r\n        }\r\n    }\r\n}\r\n","/* global module */\r\n/**\r\n * Enumeration of the video types\r\n * @type {{CAMERA: string, DESKTOP: string}}\r\n */\r\nconst VideoType = {\r\n    /**\r\n     * The camera video type.\r\n     */\r\n    CAMERA: 'camera',\r\n\r\n    /**\r\n     * The desktop video type.\r\n     */\r\n    DESKTOP: 'desktop'\r\n};\r\n\r\nmodule.exports = VideoType;\r\n","/**\r\n * The errors for the JitsiTrack objects.\r\n */\r\n\r\n/**\r\n * An error which indicates that some of requested constraints in\r\n * getUserMedia call were not satisfied.\r\n */\r\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\r\n\r\n/**\r\n * A generic error which indicates an error occurred while selecting\r\n * a DesktopCapturerSource from the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_ERROR\r\n    = 'gum.electron_desktop_picker_error';\r\n\r\n/**\r\n * An error which indicates a custom desktop picker could not be detected\r\n * for the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\r\n    = 'gum.electron_desktop_picker_not_found';\r\n\r\n/**\r\n * Generic getUserMedia error.\r\n */\r\nexport const GENERAL = 'gum.general';\r\n\r\n/**\r\n * An error which indicates that requested device was not found.\r\n */\r\nexport const NOT_FOUND = 'gum.not_found';\r\n\r\n/**\r\n * An error which indicates that user denied permission to share requested\r\n * device.\r\n */\r\nexport const PERMISSION_DENIED = 'gum.permission_denied';\r\n\r\n/**\r\n * Generic error for screensharing failure.\r\n */\r\nexport const SCREENSHARING_GENERIC_ERROR\r\n    = 'gum.screensharing_generic_error';\r\n\r\n/**\r\n * An error which indicates that user canceled screen sharing window\r\n * selection dialog.\r\n */\r\nexport const SCREENSHARING_USER_CANCELED\r\n    = 'gum.screensharing_user_canceled';\r\n\r\n/**\r\n * An error which indicates that track has been already disposed and cannot\r\n * be longer used.\r\n */\r\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\r\n\r\n/**\r\n * An error which indicates that track has no MediaStream associated.\r\n */\r\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\r\n\r\n/**\r\n * An error which indicates that requested video resolution is not supported\r\n * by a webcam.\r\n */\r\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\r\n","/**\r\n * The media track was removed to the conference.\r\n */\r\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\r\n\r\n/**\r\n * Audio levels of a this track was changed.\r\n * The first argument is a number with audio level value in range [0, 1].\r\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\r\n * connection which measured the audio level (one audio track can be added\r\n * to multiple peer connection at the same time). This argument is optional for\r\n * local tracks for which we can measure audio level without the peer\r\n * connection (the value will be <tt>undefined</tt>).\r\n *\r\n * NOTE The second argument should be treated as library internal and can be\r\n * removed at any time.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\r\n\r\n/**\r\n * The audio output of the track was changed.\r\n */\r\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\r\n\r\n/**\r\n * A media track mute status was changed.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\r\n\r\n/**\r\n * The video type(\"camera\" or \"desktop\") of the track was changed.\r\n */\r\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\r\n\r\n/**\r\n * Indicates that the track is not receiving any data even though we expect it\r\n * to receive data (i.e. the stream is not stopped).\r\n */\r\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\r\n\r\n/**\r\n * Indicates that the local audio track is not receiving any audio input from\r\n * the microphone that is currently selected.\r\n */\r\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\r\n","/**\r\n * The errors for the conference.\r\n */\r\n\r\n/**\r\n * Indicates that client must be authenticated to create the conference.\r\n */\r\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\r\n\r\n/**\r\n * Indicates that chat error occurred.\r\n */\r\nexport const CHAT_ERROR = 'conference.chatError';\r\n\r\n/**\r\n * Indicates that conference has been destroyed.\r\n */\r\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\r\n\r\n/**\r\n * Indicates that max users limit has been reached.\r\n */\r\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\r\n\r\n/**\r\n * Indicates that a connection error occurred when trying to join a conference.\r\n */\r\nexport const CONNECTION_ERROR = 'conference.connectionError';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference.\r\n */\r\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference, only approved members are allowed to join.\r\n */\r\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\r\n\r\n/**\r\n * Indicates that a connection error is due to denied access to the room,\r\n * occurred after joining a lobby room and access is denied by the room moderators.\r\n */\r\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\r\n\r\n/**\r\n * Indicates that focus error happened.\r\n */\r\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\r\n\r\n/**\r\n * Indicates that focus left the conference.\r\n */\r\nexport const FOCUS_LEFT = 'conference.focusLeft';\r\n\r\n/**\r\n * Indicates that graceful shutdown happened.\r\n */\r\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\r\n\r\n/**\r\n * Indicates that the media connection has failed.\r\n */\r\nexport const ICE_FAILED = 'conference.iceFailed';\r\n\r\n/**\r\n * Indicates that the versions of the server side components are incompatible\r\n * with the client side.\r\n */\r\nexport const INCOMPATIBLE_SERVER_VERSIONS\r\n    = 'conference.incompatible_server_versions';\r\n\r\n/**\r\n * Indicates that offer/answer had failed.\r\n */\r\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\r\n\r\n/**\r\n * Indicates that password cannot be set for this conference.\r\n */\r\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\r\n\r\n/**\r\n * Indicates that reservation system returned error.\r\n */\r\nexport const RESERVATION_ERROR = 'conference.reservationError';\r\n\r\n/**\r\n * Indicates that there is no available videobridge.\r\n */\r\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\r\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","/**\n * Dummy implementation of Storage interface with empty methods.\n */\nclass DummyLocalStorage {\n    /* eslint-disable no-empty-function */\n    /**\n     * Empty function\n     */\n    getItem() { }\n\n    /**\n     * Empty function\n     */\n    setItem() { }\n\n    /**\n     * Empty function\n     */\n    removeItem() { }\n\n    /**\n     * Empty function\n     */\n    key() { }\n    /* eslint-enable no-empty-function */\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends DummyLocalStorage {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n        let storage;\n\n        try {\n            storage = window.localStorage;\n        } catch (error) {\n            // do nothing\n        }\n        this.storage = storage || new DummyLocalStorage();\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this.storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName the name of the key you want to create/update.\n     * @param {string} keyValue the value you want to give the key you are\n     * creating/updating.\n     */\n    setItem(keyName, keyValue) {\n        return this.storage.setItem(keyName, keyValue);\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        return this.storage.removeItem(keyName);\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this.storage.key(i);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","/* global $ */\r\n\r\nimport browser from '../browser';\r\n\r\nimport SDPUtil from './SDPUtil';\r\n\r\n/**\r\n *\r\n * @param sdp\r\n */\r\nexport default function SDP(sdp) {\r\n    const media = sdp.split('\\r\\nm=');\r\n\r\n    for (let i = 1, length = media.length; i < length; i++) {\r\n        let mediaI = `m=${media[i]}`;\r\n\r\n        if (i !== length - 1) {\r\n            mediaI += '\\r\\n';\r\n        }\r\n        media[i] = mediaI;\r\n    }\r\n    const session = `${media.shift()}\\r\\n`;\r\n\r\n    this.media = media;\r\n    this.raw = session + media.join('');\r\n    this.session = session;\r\n}\r\n\r\n/**\r\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\r\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\r\n * failure. The flag is used in the automated testing.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.failICE = false;\r\n\r\n/**\r\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeTcpCandidates = false;\r\n\r\n/**\r\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeUdpCandidates = false;\r\n\r\n/**\r\n * Returns map of MediaChannel mapped per channel idx.\r\n */\r\nSDP.prototype.getMediaSsrcMap = function() {\r\n    const mediaSSRCs = {};\r\n\r\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\r\n        const mid\r\n            = SDPUtil.parseMID(\r\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\r\n        const media = {\r\n            mediaindex,\r\n            mid,\r\n            ssrcs: {},\r\n            ssrcGroups: []\r\n        };\r\n\r\n        mediaSSRCs[mediaindex] = media;\r\n\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\r\n            const linessrc = line.substring(7).split(' ')[0];\r\n\r\n            // allocate new ChannelSsrc\r\n\r\n            if (!media.ssrcs[linessrc]) {\r\n                media.ssrcs[linessrc] = {\r\n                    ssrc: linessrc,\r\n                    lines: []\r\n                };\r\n            }\r\n            media.ssrcs[linessrc].lines.push(line);\r\n        });\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\r\n            const idx = line.indexOf(' ');\r\n            const semantics = line.substr(0, idx).substr(13);\r\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n            if (ssrcs.length) {\r\n                media.ssrcGroups.push({\r\n                    semantics,\r\n                    ssrcs\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return mediaSSRCs;\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if this SDP contains given SSRC.\r\n * @param ssrc the ssrc to check.\r\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\r\n */\r\nSDP.prototype.containsSSRC = function(ssrc) {\r\n    // FIXME this code is really strange - improve it if you can\r\n    const medias = this.getMediaSsrcMap();\r\n    let result = false;\r\n\r\n    Object.keys(medias).forEach(mediaindex => {\r\n        if (result) {\r\n            return;\r\n        }\r\n        if (medias[mediaindex].ssrcs[ssrc]) {\r\n            result = true;\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// add content's to a jingle element\r\nSDP.prototype.toJingle = function(elem, thecreator) {\r\n    // https://xmpp.org/extensions/xep-0338.html\r\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\r\n        const parts = line.split(' ');\r\n        const semantics = parts.shift().substr(8);\r\n\r\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\r\n            semantics });\r\n        for (let j = 0; j < parts.length; j++) {\r\n            elem.c('content', { name: parts[j] }).up();\r\n        }\r\n        elem.up();\r\n    });\r\n\r\n    for (let i = 0; i < this.media.length; i++) {\r\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\r\n\r\n        if (!(mline.media === 'audio'\r\n              || mline.media === 'video'\r\n              || mline.media === 'application')) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        let ssrc;\r\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\r\n\r\n        if (assrcline) {\r\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\r\n        } else {\r\n            ssrc = false;\r\n        }\r\n\r\n        elem.c('content', { creator: thecreator,\r\n            name: mline.media });\r\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\r\n\r\n        if (amidline) {\r\n            // prefer identifier from a=mid if present\r\n            const mid = SDPUtil.parseMID(amidline);\r\n\r\n            elem.attrs({ name: mid });\r\n        }\r\n\r\n        if (mline.media === 'audio' || mline.media === 'video') {\r\n            elem.c('description',\r\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                    media: mline.media });\r\n            if (ssrc) {\r\n                elem.attrs({ ssrc });\r\n            }\r\n            for (let j = 0; j < mline.fmt.length; j++) {\r\n                const rtpmap\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=rtpmap:${mline.fmt[j]}`);\r\n\r\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\r\n\r\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\r\n                // value=bar/>\r\n                const afmtpline\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=fmtp:${mline.fmt[j]}`);\r\n\r\n                if (afmtpline) {\r\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    for (let k = 0; k < fmtpParameters.length; k++) {\r\n                        elem.c('parameter', fmtpParameters[k]).up();\r\n                    }\r\n                }\r\n\r\n                // XEP-0293 -- map a=rtcp-fb\r\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\r\n\r\n                elem.up();\r\n            }\r\n\r\n            if (ssrc) {\r\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\r\n\r\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\r\n                    elem.c('source', {\r\n                        ssrc: availableSsrc,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n\r\n                    ssrcParameters.forEach(ssrcSdpLine => {\r\n                        // get everything after first space\r\n                        const idx = ssrcSdpLine.indexOf(' ');\r\n                        const kv = ssrcSdpLine.substr(idx + 1);\r\n\r\n                        elem.c('parameter');\r\n                        if (kv.indexOf(':') === -1) {\r\n                            elem.attrs({ name: kv });\r\n                        } else {\r\n                            const name = kv.split(':', 2)[0];\r\n\r\n                            elem.attrs({ name });\r\n\r\n                            let v = kv.split(':', 2)[1];\r\n\r\n                            v = SDPUtil.filterSpecialChars(v);\r\n                            elem.attrs({ value: v });\r\n                        }\r\n                        elem.up();\r\n                    });\r\n\r\n                    elem.up();\r\n                }\r\n\r\n                // XEP-0339 handle ssrc-group attributes\r\n                const ssrcGroupLines\r\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\r\n\r\n                ssrcGroupLines.forEach(line => {\r\n                    const idx = line.indexOf(' ');\r\n                    const semantics = line.substr(0, idx).substr(13);\r\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n                    if (ssrcs.length) {\r\n                        elem.c('ssrc-group', { semantics,\r\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\r\n                        elem.up();\r\n                    }\r\n                });\r\n            }\r\n\r\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\r\n\r\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\r\n                // Map a line which looks like \"a=rid:2 send\" to just\r\n                // the rid (\"2\")\r\n                const rids = ridLines\r\n                    .map(ridLine => ridLine.split(':')[1])\r\n                    .map(ridInfo => ridInfo.split(' ')[0]);\r\n\r\n                rids.forEach(rid => {\r\n                    elem.c('source', {\r\n                        rid,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    elem.up();\r\n                });\r\n                const unifiedSimulcast\r\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\r\n\r\n                if (unifiedSimulcast) {\r\n                    elem.c('rid-group', {\r\n                        semantics: 'SIM',\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    rids.forEach(rid => {\r\n                        elem.c('source', { rid }).up();\r\n                    });\r\n                    elem.up();\r\n                }\r\n            }\r\n\r\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\r\n                elem.c('rtcp-mux').up();\r\n            }\r\n\r\n            // XEP-0293 -- map a=rtcp-fb:*\r\n            this.rtcpFbToJingle(i, elem, '*');\r\n\r\n            // XEP-0294\r\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\r\n\r\n            for (let j = 0; j < extmapLines.length; j++) {\r\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\r\n\r\n                elem.c('rtp-hdrext', {\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\r\n                    uri: extmap.uri,\r\n                    id: extmap.value\r\n                });\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (extmap.hasOwnProperty('direction')) {\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    switch (extmap.direction) {\r\n                    case 'sendonly':\r\n                        elem.attrs({ senders: 'responder' });\r\n                        break;\r\n                    case 'recvonly':\r\n                        elem.attrs({ senders: 'initiator' });\r\n                        break;\r\n                    case 'sendrecv':\r\n                        elem.attrs({ senders: 'both' });\r\n                        break;\r\n                    case 'inactive':\r\n                        elem.attrs({ senders: 'none' });\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // TODO: handle params\r\n                elem.up();\r\n            }\r\n            elem.up(); // end of description\r\n        }\r\n\r\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\r\n        this.transportToJingle(i, elem);\r\n\r\n        const m = this.media[i];\r\n\r\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\r\n            elem.attrs({ senders: 'both' });\r\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\r\n            elem.attrs({ senders: 'initiator' });\r\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\r\n            elem.attrs({ senders: 'responder' });\r\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\r\n            elem.attrs({ senders: 'none' });\r\n        }\r\n\r\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\r\n        // The port is automatically set to 0 when bundle-only is used.\r\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\r\n            // estos hack to reject an m-line\r\n            elem.attrs({ senders: 'rejected' });\r\n        }\r\n        elem.up(); // end of content\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\r\n    elem.c('transport');\r\n\r\n    // XEP-0343 DTLS/SCTP\r\n    const sctpmap\r\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\r\n\r\n    if (sctpmap) {\r\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\r\n\r\n        elem.c('sctpmap', {\r\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\r\n            number: sctpAttrs[0], /* SCTP port */\r\n            protocol: sctpAttrs[1] /* protocol */\r\n        });\r\n\r\n        // Optional stream count attribute\r\n        if (sctpAttrs.length > 2) {\r\n            elem.attrs({ streams: sctpAttrs[2] });\r\n        }\r\n        elem.up();\r\n    }\r\n\r\n    // XEP-0320\r\n    const fingerprints\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            'a=fingerprint:',\r\n            this.session);\r\n\r\n    fingerprints.forEach(line => {\r\n        const fingerprint = SDPUtil.parseFingerprint(line);\r\n\r\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\r\n        elem.c('fingerprint').t(fingerprint.fingerprint);\r\n        delete fingerprint.fingerprint;\r\n\r\n        const setupLine\r\n            = SDPUtil.findLine(\r\n                this.media[mediaindex],\r\n                'a=setup:',\r\n                this.session);\r\n\r\n        if (setupLine) {\r\n            fingerprint.setup = setupLine.substr(8);\r\n        }\r\n        elem.attrs(fingerprint);\r\n        elem.up(); // end of fingerprint\r\n    });\r\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\r\n\r\n    if (iceParameters) {\r\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n        elem.attrs(iceParameters);\r\n\r\n        // XEP-0176\r\n        const candidateLines\r\n            = SDPUtil.findLines(\r\n                this.media[mediaindex],\r\n                'a=candidate:',\r\n                this.session);\r\n\r\n        candidateLines.forEach(line => { // add any a=candidate lines\r\n            const candidate = SDPUtil.candidateToJingle(line);\r\n\r\n            if (this.failICE) {\r\n                candidate.ip = '1.1.1.1';\r\n            }\r\n            const protocol\r\n                = candidate && typeof candidate.protocol === 'string'\r\n                    ? candidate.protocol.toLowerCase()\r\n                    : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            }\r\n            elem.c('candidate', candidate).up();\r\n        });\r\n    }\r\n    elem.up(); // end of transport\r\n};\r\n\r\n// XEP-0293\r\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\r\n    const lines\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            `a=rtcp-fb:${payloadtype}`);\r\n\r\n    lines.forEach(line => {\r\n        const feedback = SDPUtil.parseRTCPFB(line);\r\n\r\n        if (feedback.type === 'trr-int') {\r\n            elem.c('rtcp-fb-trr-int', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                value: feedback.params[0]\r\n            });\r\n            elem.up();\r\n        } else {\r\n            elem.c('rtcp-fb', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                type: feedback.type\r\n            });\r\n            if (feedback.params.length > 0) {\r\n                elem.attrs({ 'subtype': feedback.params[0] });\r\n            }\r\n            elem.up();\r\n        }\r\n    });\r\n};\r\n\r\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\r\n    let sdp = '';\r\n    const feedbackElementTrrInt\r\n        = elem.find(\r\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    if (feedbackElementTrrInt.length) {\r\n        sdp += 'a=rtcp-fb:* trr-int ';\r\n        if (feedbackElementTrrInt.attr('value')) {\r\n            sdp += feedbackElementTrrInt.attr('value');\r\n        } else {\r\n            sdp += '0';\r\n        }\r\n        sdp += '\\r\\n';\r\n    }\r\n\r\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    feedbackElements.each((_, fb) => {\r\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\r\n        if (fb.hasAttribute('subtype')) {\r\n            sdp += ` ${fb.getAttribute('subtype')}`;\r\n        }\r\n        sdp += '\\r\\n';\r\n    });\r\n\r\n    return sdp;\r\n};\r\n\r\n// construct an SDP from a jingle stanza\r\nSDP.prototype.fromJingle = function(jingle) {\r\n    const sessionId = Date.now();\r\n\r\n    // Use a unique session id for every TPC.\r\n    this.raw = 'v=0\\r\\n'\r\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\r\n        + 's=-\\r\\n'\r\n        + 't=0 0\\r\\n';\r\n\r\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\r\n    // #section-8\r\n    const groups\r\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\r\n\r\n    if (groups.length) {\r\n        groups.each((idx, group) => {\r\n            const contents\r\n                = $(group)\r\n                    .find('>content')\r\n                    .map((_, content) => content.getAttribute('name'))\r\n                    .get();\r\n\r\n            if (contents.length > 0) {\r\n                this.raw\r\n                    += `a=group:${\r\n                        group.getAttribute('semantics')\r\n                            || group.getAttribute('type')} ${\r\n                        contents.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    this.session = this.raw;\r\n    jingle.find('>content').each((_, content) => {\r\n        const m = this.jingle2media($(content));\r\n\r\n        this.media.push(m);\r\n    });\r\n\r\n    // reconstruct msid-semantic -- apparently not necessary\r\n    /*\r\n     var msid = SDPUtil.parseSSRC(this.raw);\r\n     if (msid.hasOwnProperty('mslabel')) {\r\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\r\n     }\r\n     */\r\n\r\n    this.raw = this.session + this.media.join('');\r\n};\r\n\r\n// translate a jingle content element into an an SDP media part\r\nSDP.prototype.jingle2media = function(content) {\r\n    const desc = content.find('>description');\r\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\r\n    let sdp = '';\r\n    const sctp = transport.find(\r\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\r\n\r\n    const media = { media: desc.attr('media') };\r\n\r\n    media.port = '1';\r\n    if (content.attr('senders') === 'rejected') {\r\n        // estos hack to reject an m-line.\r\n        media.port = '0';\r\n    }\r\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\r\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\r\n    } else {\r\n        media.proto = 'RTP/AVPF';\r\n    }\r\n    if (sctp.length) {\r\n        sdp += `m=application ${media.port} DTLS/SCTP ${\r\n            sctp.attr('number')}\\r\\n`;\r\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\r\n\r\n        const streamCount = sctp.attr('streams');\r\n\r\n        if (streamCount) {\r\n            sdp += ` ${streamCount}\\r\\n`;\r\n        } else {\r\n            sdp += '\\r\\n';\r\n        }\r\n    } else {\r\n        media.fmt\r\n            = desc\r\n                .find('>payload-type')\r\n                .map((_, payloadType) => payloadType.getAttribute('id'))\r\n                .get();\r\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\r\n    }\r\n\r\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n    if (!sctp.length) {\r\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\r\n    }\r\n\r\n    // XEP-0176 ICE parameters\r\n    if (transport.length) {\r\n        if (transport.attr('ufrag')) {\r\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\r\n        }\r\n        if (transport.attr('pwd')) {\r\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\r\n        }\r\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\r\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\r\n            sdp += ` ${$(fingerprint).text()}`;\r\n            sdp += '\\r\\n';\r\n            if (fingerprint.hasAttribute('setup')) {\r\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    // XEP-0176 ICE candidates\r\n    transport.find('>candidate')\r\n        .each((_, candidate) => {\r\n            let protocol = candidate.getAttribute('protocol');\r\n\r\n            protocol\r\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            } else if (this.failICE) {\r\n                candidate.setAttribute('ip', '1.1.1.1');\r\n            }\r\n\r\n            sdp += SDPUtil.candidateFromJingle(candidate);\r\n        });\r\n\r\n    switch (content.attr('senders')) {\r\n    case 'initiator':\r\n        sdp += 'a=sendonly\\r\\n';\r\n        break;\r\n    case 'responder':\r\n        sdp += 'a=recvonly\\r\\n';\r\n        break;\r\n    case 'none':\r\n        sdp += 'a=inactive\\r\\n';\r\n        break;\r\n    case 'both':\r\n        sdp += 'a=sendrecv\\r\\n';\r\n        break;\r\n    }\r\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\r\n\r\n    // <description><rtcp-mux/></description>\r\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\r\n    // though\r\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\r\n    if (desc.find('>rtcp-mux').length) {\r\n        sdp += 'a=rtcp-mux\\r\\n';\r\n    }\r\n\r\n    desc.find('>payload-type').each((_, payloadType) => {\r\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\r\n        if ($(payloadType).find('>parameter').length) {\r\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\r\n            sdp\r\n                += $(payloadType)\r\n                    .find('>parameter')\r\n                    .map((__, parameter) => {\r\n                        const name = parameter.getAttribute('name');\r\n\r\n                        return (\r\n                            (name ? `${name}=` : '')\r\n                                + parameter.getAttribute('value'));\r\n                    })\r\n                    .get()\r\n                    .join('; ');\r\n            sdp += '\\r\\n';\r\n        }\r\n\r\n        // xep-0293\r\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\r\n    });\r\n\r\n    // xep-0293\r\n    sdp += this.rtcpFbFromJingle(desc, '*');\r\n\r\n    // xep-0294\r\n    desc\r\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\r\n        .each((_, hdrExt) => {\r\n            sdp\r\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\r\n                    hdrExt.getAttribute('uri')}\\r\\n`;\r\n        });\r\n\r\n    // XEP-0339 handle ssrc-group attributes\r\n    desc\r\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, ssrcGroup) => {\r\n            const semantics = ssrcGroup.getAttribute('semantics');\r\n            const ssrcs\r\n                = $(ssrcGroup)\r\n                    .find('>source')\r\n                    .map((__, source) => source.getAttribute('ssrc'))\r\n                    .get();\r\n\r\n            if (ssrcs.length) {\r\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n\r\n    // XEP-0339 handle source attributes\r\n    desc\r\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, source) => {\r\n            const ssrc = source.getAttribute('ssrc');\r\n\r\n            $(source)\r\n                .find('>parameter')\r\n                .each((__, parameter) => {\r\n                    const name = parameter.getAttribute('name');\r\n                    let value = parameter.getAttribute('value');\r\n\r\n                    value = SDPUtil.filterSpecialChars(value);\r\n                    sdp += `a=ssrc:${ssrc} ${name}`;\r\n                    if (value && value.length) {\r\n                        sdp += `:${value}`;\r\n                    }\r\n                    sdp += '\\r\\n';\r\n                });\r\n        });\r\n\r\n    return sdp;\r\n};\r\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\r\n\r\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\r\n\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\r\n    = 'Video resolution is not supported: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\r\n    = 'User canceled screen sharing prompt';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\r\n    = 'Unknown error from screensharing';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\r\n    = 'Unkown error from desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\r\n    = 'Failed to detect desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\r\n    = 'Generic getUserMedia error';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\r\n    = 'User denied permission to use device(s): ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\r\n    = 'Requested device(s) was/were not found: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\r\n    = 'Constraint could not be satisfied: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\r\n    = 'Track has been already disposed';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\r\n    = 'Track does not have an associated Media Stream';\r\n\r\n// FIXME: Using prototype inheritance because otherwise instanceof is not\r\n// working properly (see https://github.com/babel/babel/issues/3083)\r\n\r\n/**\r\n *\r\n * Represents an error that occurred to a JitsiTrack. Can represent various\r\n * types of errors. For error descriptions (@see JitsiTrackErrors).\r\n *\r\n * @extends Error\r\n *\r\n *\r\n * @constructor\r\n * @param {Object|string} error - error object or error name\r\n * @param {Object|string} (options) - getUserMedia constraints object or\r\n * error message\r\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\r\n * list of getUserMedia requested devices\r\n */\r\nfunction JitsiTrackError(error, options, devices) {\r\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\r\n        /**\r\n         * Additional information about original getUserMedia error\r\n         * and constraints.\r\n         * @type {{\r\n         *     error: Object,\r\n         *     constraints: Object,\r\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\r\n         * }}\r\n         */\r\n        this.gum = {\r\n            error,\r\n            constraints: options,\r\n            devices: devices && Array.isArray(devices)\r\n                ? devices.slice(0)\r\n                : undefined\r\n        };\r\n\r\n        switch (error.name) {\r\n        case 'NotAllowedError':\r\n        case 'PermissionDeniedError':\r\n        case 'SecurityError':\r\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'DevicesNotFoundError':\r\n        case 'NotFoundError':\r\n            this.name = JitsiTrackErrors.NOT_FOUND;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'ConstraintNotSatisfiedError':\r\n        case 'OverconstrainedError': {\r\n            const constraintName = error.constraintName || error.constraint;\r\n\r\n            // we treat deviceId as unsupported resolution, as we want to\r\n            // retry and finally if everything fails to remove deviceId from\r\n            // mandatory constraints\r\n            if (options\r\n                    && options.video\r\n                    && (!devices || devices.indexOf('video') > -1)\r\n                    && (constraintName === 'minWidth'\r\n                        || constraintName === 'maxWidth'\r\n                        || constraintName === 'minHeight'\r\n                        || constraintName === 'maxHeight'\r\n                        || constraintName === 'width'\r\n                        || constraintName === 'height'\r\n                        || constraintName === 'deviceId')) {\r\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + getResolutionFromFailedConstraint(\r\n                            constraintName,\r\n                            options);\r\n            } else {\r\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + error.constraintName;\r\n            }\r\n            break;\r\n        }\r\n\r\n        default:\r\n            this.name = JitsiTrackErrors.GENERAL;\r\n            this.message\r\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\r\n            break;\r\n        }\r\n    } else if (typeof error === 'string') {\r\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\r\n            this.name = error;\r\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\r\n        } else {\r\n            // this is some generic error that do not fit any of our\r\n            // pre-defined errors, so don't give it any specific name, just\r\n            // store message\r\n            this.message = error;\r\n        }\r\n    } else {\r\n        throw new Error('Invalid arguments');\r\n    }\r\n\r\n    this.stack = error.stack || (new Error()).stack;\r\n}\r\n\r\nJitsiTrackError.prototype = Object.create(Error.prototype);\r\nJitsiTrackError.prototype.constructor = JitsiTrackError;\r\n\r\n/**\r\n * Gets failed resolution constraint from corresponding object.\r\n * @param {string} failedConstraintName\r\n * @param {Object} constraints\r\n * @returns {string|number}\r\n */\r\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\r\n    if (constraints && constraints.video && constraints.video.mandatory) {\r\n        switch (failedConstraintName) {\r\n        case 'width':\r\n            return constraints.video.mandatory.minWidth;\r\n        case 'height':\r\n            return constraints.video.mandatory.minHeight;\r\n        default:\r\n            return constraints.video.mandatory[failedConstraintName] || '';\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\nexport default JitsiTrackError;\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * The class implements basic event operations - add/remove listener.\r\n * NOTE: The purpose of the class is to be extended in order to add\r\n * this functionality to other classes.\r\n */\r\nexport default class Listenable {\r\n    /**\r\n     * Creates new instance.\r\n     * @param {EventEmitter} eventEmitter\r\n     * @constructor\r\n     */\r\n    constructor(eventEmitter = new EventEmitter()) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.on = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n    }\r\n\r\n    /**\r\n     * Adds new listener.\r\n     * @param {String} eventName the name of the event\r\n     * @param {Function} listener the listener.\r\n     * @returns {Function} - The unsubscribe function.\r\n     */\r\n    addListener(eventName, listener) {\r\n        this.eventEmitter.addListener(eventName, listener);\r\n\r\n        return () => this.removeEventListener(eventName, listener);\r\n    }\r\n\r\n    /**\r\n     * Removes listener.\r\n     * @param {String} eventName the name of the event that triggers the\r\n     * listener\r\n     * @param {Function} listener the listener.\r\n     */\r\n    removeListener(eventName, listener) {\r\n        this.eventEmitter.removeListener(eventName, listener);\r\n    }\r\n}\r\n","/**\r\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\r\n * versa.\r\n * @event\r\n * @type {boolean} - true when service has changed to active false otherwise.\r\n */\r\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\r\n\r\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\r\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\r\n * it starts receiving audio levels !== 0 after being in a state of no audio.\r\n * @event\r\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\r\n\r\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\r\n * for a period of time, meaning that the device is either broken or hardware/software muted.\r\n * @event\r\n * @type {void}\r\n */\r\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\r\n\r\n/**\r\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\r\n\r\n/**\r\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\r\n * The generated objects are of type Array<Object>, one score for each monitored device.\r\n * @event VAD_REPORT_PUBLISHED\r\n * @type Array<Object> with the following structure:\r\n * @property {Date} timestamp - Timestamp at which the compute took place.\r\n * @property {number} avgVAD - Average VAD score over monitored period of time.\r\n * @property {string} deviceId - Associate local audio device ID.\r\n */\r\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\r\n\r\n/**\r\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\r\n *\r\n * @event\r\n * @type {Object}\r\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\r\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n * @property {string} deviceId - Device id of the associated track.\r\n */\r\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\r\n\r\n/**\r\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\r\n *\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\r\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\r\n * Status that video SIP GW service is available.\r\n * @type {string}\r\n */\r\nexport const STATUS_AVAILABLE = 'available';\r\n\r\n/**\r\n * Status that video SIP GW service is not available.\r\n * @type {string}\r\n */\r\nexport const STATUS_UNDEFINED = 'undefined';\r\n\r\n/**\r\n * Status that video SIP GW service is available but there are no free nodes\r\n * at the moment to serve new requests.\r\n * @type {string}\r\n */\r\nexport const STATUS_BUSY = 'busy';\r\n\r\n/**\r\n * Video SIP GW session state, currently running.\r\n * @type {string}\r\n */\r\nexport const STATE_ON = 'on';\r\n\r\n/**\r\n * Video SIP GW session state, currently stopped and not running.\r\n * @type {string}\r\n */\r\nexport const STATE_OFF = 'off';\r\n\r\n/**\r\n * Video SIP GW session state, currently is starting.\r\n * @type {string}\r\n */\r\nexport const STATE_PENDING = 'pending';\r\n\r\n/**\r\n * Video SIP GW session state, has observed some issues and is retrying at the\r\n * moment.\r\n * @type {string}\r\n */\r\nexport const STATE_RETRYING = 'retrying';\r\n\r\n/**\r\n * Video SIP GW session state, tried to start but it failed.\r\n * @type {string}\r\n */\r\nexport const STATE_FAILED = 'failed';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session in conference where\r\n * there is no room connection (hasn't joined or has left the room).\r\n * @type {string}\r\n */\r\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session with address for which\r\n * there is an already created session.\r\n * @type {string}\r\n */\r\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\r\n","/**\r\n * The events for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection has been disconnected. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param msg {string} a message associated with the disconnect such as the\r\n * last (known) error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\r\n\r\n/**\r\n * Indicates that the connection has been established. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param id {string} the ID of the local endpoint/participant/peer (within\r\n * the context of the established connection)\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection has been failed for some reason. The event\r\n * provides the following parameters to its listeners:\r\n *\r\n * @param errType {JitsiConnectionErrors} the type of error associated with\r\n * the failure\r\n * @param errReason {string} the error (message) associated with the failure\r\n * @param credentials {object} the credentials used to connect (if any)\r\n * @param errReasonDetails {object} an optional object with details about\r\n * the error, like shard moving, suspending. Used for analytics purposes.\r\n */\r\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\r\n\r\n/**\r\n * Indicates that the performed action cannot be executed because the\r\n * connection is not in the correct state(connected, disconnected, etc.)\r\n */\r\nexport const WRONG_STATE = 'connection.wrongState';\r\n\r\n/**\r\n * Indicates that the display name is required over this connection and need to be supplied when\r\n * joining the room.\r\n * There are cases like lobby room where display name is required.\r\n */\r\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\r\n","/**\r\n * Notifies about audio level in RTP statistics by SSRC.\r\n *\r\n * @param ssrc - The synchronization source identifier (SSRC) of the\r\n * endpoint/participant whose audio level is being reported.\r\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\r\n * RTP statistics.\r\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\r\n * local endpoint/participant; otherwise, <tt>false</tt>.\r\n */\r\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\r\n\r\n/**\r\n * An event fired just before the statistics module gets disposes and it's\r\n * the last chance to submit some logs that will end up in stats services like\r\n * CallStats (if enabled).\r\n */\r\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\r\n\r\n/**\r\n * An event carrying all statistics by ssrc.\r\n */\r\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\r\n\r\n/**\r\n * An event carrying connection statistics.\r\n *\r\n * @param {object} connectionStats - The connection statistics carried by the\r\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\r\n * <tt>resolution</tt>, and <tt>transport</tt>.\r\n */\r\nexport const CONNECTION_STATS = 'statistics.connectionstats';\r\n","import * as transform from 'sdp-transform';\r\n\r\n/**\r\n * Parses the primary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the primary SSRC number\r\n */\r\nexport function parsePrimarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[0], 10);\r\n}\r\n\r\n/**\r\n * Parses the secondary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the secondary SSRC number\r\n */\r\nexport function parseSecondarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[1], 10);\r\n}\r\n\r\n/**\r\n * Tells how many distinct SSRCs are contained in given media line.\r\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\r\n * @return {number}\r\n */\r\nfunction _getSSRCCount(mLine) {\r\n    if (!mLine.ssrcs) {\r\n        return 0;\r\n    }\r\n\r\n    return mLine.ssrcs\r\n        .map(ssrcInfo => ssrcInfo.id)\r\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n        .length;\r\n}\r\n\r\n/**\r\n * A wrapper around 'sdp-transform' media description object which provides\r\n * utility methods for common SDP/SSRC related operations.\r\n */\r\nclass MLineWrap {\r\n\r\n    /**\r\n     * Creates new <tt>MLineWrap</t>>\r\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    constructor(mLine) {\r\n        if (!mLine) {\r\n            throw new Error('mLine is undefined');\r\n        }\r\n\r\n        this.mLine = mLine;\r\n    }\r\n\r\n    /**\r\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\r\n     * one will be preassigned.\r\n     *\r\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    get ssrcs() {\r\n        if (!this.mLine.ssrcs) {\r\n            this.mLine.ssrcs = [];\r\n        }\r\n\r\n        return this.mLine.ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Setter for the mLine's \"ssrcs\" array.\r\n     *\r\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    set ssrcs(ssrcs) {\r\n        this.mLine.ssrcs = ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Returns the direction of the underlying media description.\r\n     * @return {string} the media direction name as defined in the SDP.\r\n     */\r\n    get direction() {\r\n        return this.mLine.direction;\r\n    }\r\n\r\n    /**\r\n     * Modifies the direction of the underlying media description.\r\n     * @param {string} direction the new direction to be set\r\n     */\r\n    set direction(direction) {\r\n        this.mLine.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Exposes the SSRC group array of the underlying media description object.\r\n     * @return {Array.<Object>}\r\n     */\r\n    get ssrcGroups() {\r\n        if (!this.mLine.ssrcGroups) {\r\n            this.mLine.ssrcGroups = [];\r\n        }\r\n\r\n        return this.mLine.ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Modifies the SSRC groups array of the underlying media description\r\n     * object.\r\n     * @param {Array.<Object>} ssrcGroups\r\n     */\r\n    set ssrcGroups(ssrcGroups) {\r\n        this.mLine.ssrcGroups = ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Obtains value from SSRC attribute.\r\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\r\n     * found\r\n     * @param {string} attrName the name of the SSRC attribute to be found.\r\n     * @return {string|undefined} the value of SSRC attribute or\r\n     * <tt>undefined</tt> if no such attribute exists.\r\n     */\r\n    getSSRCAttrValue(ssrcNumber, attrName) {\r\n        const attribute = this.ssrcs.find(\r\n            ssrcObj => ssrcObj.id === ssrcNumber\r\n            && ssrcObj.attribute === attrName);\r\n\r\n\r\n        return attribute && attribute.value;\r\n    }\r\n\r\n    /**\r\n     * Removes all attributes for given SSRC number.\r\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\r\n     * removed.\r\n     */\r\n    removeSSRC(ssrcNum) {\r\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcs\r\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\r\n    }\r\n\r\n    /**\r\n     * Adds SSRC attribute\r\n     * @param {object} ssrcObj the SSRC attribute object as defined in\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCAttribute(ssrcObj) {\r\n        this.ssrcs.push(ssrcObj);\r\n    }\r\n\r\n    /**\r\n     * Finds a SSRC group matching both semantics and SSRCs in order.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\r\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\r\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\r\n     * not found.\r\n     */\r\n    findGroup(semantics, ssrcs) {\r\n        return this.ssrcGroups.find(\r\n            group =>\r\n                group.semantics === semantics\r\n                    && (!ssrcs || ssrcs === group.ssrcs));\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name.\r\n     * @param {string} semantics the name of the semantics\r\n     * @return {Array.<object>} an array of SSRC group objects as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    findGroups(semantics) {\r\n        return this.ssrcGroups.filter(\r\n            group => group.semantics === semantics);\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name and group's primary SSRC.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {number} primarySSRC the primary SSRC number to be matched\r\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\r\n     */\r\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\r\n        return this.ssrcGroups.find(\r\n            group => group.semantics === semantics\r\n                && parsePrimarySSRC(group) === primarySSRC);\r\n    }\r\n\r\n    /**\r\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\r\n     * the first SSRC object with any 'msid' value.\r\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    findSSRCByMSID(msid) {\r\n        return this.ssrcs.find(\r\n            ssrcObj => ssrcObj.attribute === 'msid'\r\n                && (msid === null || ssrcObj.value === msid));\r\n    }\r\n\r\n    /**\r\n     * Gets the SSRC count for the underlying media description.\r\n     * @return {number}\r\n     */\r\n    getSSRCCount() {\r\n        return _getSSRCCount(this.mLine);\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying media description contains any SSRC groups.\r\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    containsAnySSRCGroups() {\r\n        return this.mLine.ssrcGroups !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds the primary video SSRC.\r\n     * @returns {number|undefined} the primary video ssrc\r\n     * @throws Error if the underlying media description is not a video\r\n     */\r\n    getPrimaryVideoSsrc() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\r\n        }\r\n\r\n        const numSsrcs = _getSSRCCount(this.mLine);\r\n\r\n        if (numSsrcs === 1) {\r\n            // Not using \"ssrcs\" getter on purpose here\r\n            return this.mLine.ssrcs[0].id;\r\n        }\r\n\r\n        // Look for a SIM, FID, or FEC-FR group\r\n        if (this.mLine.ssrcGroups) {\r\n            const simGroup = this.findGroup('SIM');\r\n\r\n            if (simGroup) {\r\n                return parsePrimarySSRC(simGroup);\r\n            }\r\n            const fidGroup = this.findGroup('FID');\r\n\r\n            if (fidGroup) {\r\n                return parsePrimarySSRC(fidGroup);\r\n            }\r\n            const fecGroup = this.findGroup('FEC-FR');\r\n\r\n            if (fecGroup) {\r\n                return parsePrimarySSRC(fecGroup);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains RTX SSRC from the underlying video description (the\r\n     * secondary SSRC of the first \"FID\" group found)\r\n     * @param {number} primarySsrc the video ssrc for which to find the\r\n     * corresponding rtx ssrc\r\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\r\n     * one)\r\n     */\r\n    getRtxSSRC(primarySsrc) {\r\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\r\n\r\n\r\n        return fidGroup && parseSecondarySSRC(fidGroup);\r\n    }\r\n\r\n    /**\r\n     * Obtains all SSRCs contained in the underlying media description.\r\n     * @return {Array.<number>} an array with all SSRC as numbers.\r\n     */\r\n    getSSRCs() {\r\n        return this.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\r\n    }\r\n\r\n    /**\r\n     * Obtains primary video SSRCs.\r\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\r\n     * @throws Error if the wrapped media description is not a video.\r\n     */\r\n    getPrimaryVideoSSRCs() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\r\n        }\r\n\r\n        const videoSSRCs = this.getSSRCs();\r\n\r\n        for (const ssrcGroupInfo of this.ssrcGroups) {\r\n            // Right now, FID and FEC-FR groups are the only ones we parse to\r\n            // disqualify streams.  If/when others arise we'll\r\n            // need to add support for them here\r\n            if (ssrcGroupInfo.semantics === 'FID'\r\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\r\n                // secondary streams should be filtered out\r\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\r\n\r\n                videoSSRCs.splice(\r\n                    videoSSRCs.indexOf(secondarySsrc), 1);\r\n            }\r\n        }\r\n\r\n        return videoSSRCs;\r\n    }\r\n\r\n    /**\r\n     * Dumps all SSRC groups of this media description to JSON.\r\n     */\r\n    dumpSSRCGroups() {\r\n        return JSON.stringify(this.mLine.ssrcGroups);\r\n    }\r\n\r\n    /**\r\n     * Removes all SSRC groups which contain given SSRC number at any position.\r\n     * @param {number} ssrc the SSRC for which all matching groups are to be\r\n     * removed.\r\n     */\r\n    removeGroupsWithSSRC(ssrc) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\r\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\r\n    }\r\n\r\n    /**\r\n     * Removes groups that match given semantics.\r\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\r\n     */\r\n    removeGroupsBySemantics(semantics) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups\r\n            = this.mLine.ssrcGroups\r\n                .filter(groupInfo => groupInfo.semantics !== semantics);\r\n    }\r\n\r\n    /**\r\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\r\n     * @param {number} oldSSRC the old SSRC number\r\n     * @param {number} newSSRC the new SSRC number\r\n     */\r\n    replaceSSRC(oldSSRC, newSSRC) {\r\n        if (this.mLine.ssrcs) {\r\n            this.mLine.ssrcs.forEach(ssrcInfo => {\r\n                if (ssrcInfo.id === oldSSRC) {\r\n                    ssrcInfo.id = newSSRC;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds given SSRC group to this media description.\r\n     * @param {object} group the SSRC group object as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCGroup(group) {\r\n        this.ssrcGroups.push(group);\r\n    }\r\n}\r\n\r\n/**\r\n * Utility class for SDP manipulation using the 'sdp-transform' library.\r\n *\r\n * Typical use usage scenario:\r\n *\r\n * const transformer = new SdpTransformWrap(rawSdp);\r\n * const videoMLine = transformer.selectMedia('video);\r\n * if (videoMLine) {\r\n *     videoMLiner.addSSRCAttribute({\r\n *         id: 2342343,\r\n *         attribute: \"cname\",\r\n *         value: \"someCname\"\r\n *     });\r\n *     rawSdp = transformer.toRawSdp();\r\n * }\r\n */\r\nexport class SdpTransformWrap {\r\n\r\n    /**\r\n     * Creates new instance and parses the raw SDP into objects using\r\n     * 'sdp-transform' lib.\r\n     * @param {string} rawSDP the SDP in raw text format.\r\n     */\r\n    constructor(rawSDP) {\r\n        this.parsedSDP = transform.parse(rawSDP);\r\n    }\r\n\r\n    /**\r\n     * Selects the first media SDP of given name.\r\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\r\n     * 'data'.\r\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\r\n     * line or <tt>null</tt> if not found. The object returned references\r\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\r\n     * (it's not a copy).\r\n     */\r\n    selectMedia(mediaType) {\r\n        const selectedMLine\r\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\r\n\r\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\r\n    }\r\n\r\n    /**\r\n     * Converts the currently stored SDP state in this instance to raw text SDP\r\n     * format.\r\n     * @return {string}\r\n     */\r\n    toRawSDP() {\r\n        return transform.write(this.parsedSDP);\r\n    }\r\n}\r\n","/**\r\n * Indicates that the local connection statistics were updated.\r\n */\r\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\r\n\r\n/**\r\n * Indicates that the connection statistics for a particular remote participant\r\n * were updated.\r\n */\r\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\r\n","\r\n\r\n/**\r\n * The method will increase the given number by 1. If the given counter is equal\r\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\r\n * 1.\r\n * @param {number} number - An integer counter value to be incremented.\r\n * @return {number} the next counter value increased by 1 (see the description\r\n * above for exception).\r\n */\r\nexport function safeCounterIncrement(number) {\r\n    let nextValue = number;\r\n\r\n    if (number >= Number.MAX_SAFE_INTEGER) {\r\n        nextValue = 0;\r\n    }\r\n\r\n    return nextValue + 1;\r\n}\r\n\r\n/**\r\n * Calculates the average value of am Array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of numbers.\r\n * @returns {number} - Number array average.\r\n */\r\nexport function calculateAverage(valueArray) {\r\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\r\n}\r\n\r\n\r\n/**\r\n * Returns only the positive values from an array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of vad scores.\r\n * @returns {Array} - Array of positive numbers.\r\n */\r\nexport function filterPositiveValues(valueArray) {\r\n    return valueArray.filter(value => value >= 0);\r\n}\r\n","/**\r\n * The pending Jingle session state which means the session as defined in\r\n * XEP-0166(before 'session-invite/session-accept' took place).\r\n *\r\n * @type {string}\r\n */\r\nexport const PENDING = 'pending';\r\n\r\n/**\r\n * The active Jingle session state as defined in XEP-0166\r\n * (after 'session-invite'/'session-accept').\r\n *\r\n * @type {string}\r\n */\r\nexport const ACTIVE = 'active';\r\n\r\n/**\r\n * The ended Jingle session state as defined in XEP-0166\r\n * (after 'session-terminate').\r\n * @type {string}\r\n */\r\nexport const ENDED = 'ended';\r\n","/**\r\n * The know jingle actions that can be sent and should be acted upon by\r\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\r\n */\r\nexport const ACTIONS = {\r\n    ACCEPT: 'session-accept',\r\n    CONNECTION_ERROR: 'connection-error-encountered',\r\n    INITIATE: 'session-initiate',\r\n    TERMINATE: 'session-terminate',\r\n    TRANSPORT_INFO: 'transport-info',\r\n    UNAVAILABLE: 'unavailable'\r\n};\r\n","const Resolutions = {\r\n    '1080': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    'fullhd': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    '720': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    'hd': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    '960': {\r\n        width: 960,\r\n        height: 720,\r\n        order: 6\r\n    },\r\n    '540': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n    'qhd': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '360': {\r\n        width: 640,\r\n        height: 360,\r\n        order: 4\r\n    },\r\n    '640': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n    'vga': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '180': {\r\n        width: 320,\r\n        height: 180,\r\n        order: 2\r\n    },\r\n    '320': {\r\n        width: 320,\r\n        height: 240,\r\n        order: 1\r\n    }\r\n};\r\n\r\nmodule.exports = Resolutions;\r\n","/* global callstats */\r\n\r\nimport browser from '../browser';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * We define enumeration of wrtcFuncNames as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\r\n */\r\nconst wrtcFuncNames = {\r\n    createOffer: 'createOffer',\r\n    createAnswer: 'createAnswer',\r\n    setLocalDescription: 'setLocalDescription',\r\n    setRemoteDescription: 'setRemoteDescription',\r\n    addIceCandidate: 'addIceCandidate',\r\n    getUserMedia: 'getUserMedia',\r\n    iceConnectionFailure: 'iceConnectionFailure',\r\n    signalingError: 'signalingError',\r\n    applicationLog: 'applicationLog'\r\n};\r\n\r\n/**\r\n * We define enumeration of fabricEvent as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\r\n */\r\nconst fabricEvent = {\r\n    fabricHold: 'fabricHold',\r\n    fabricResume: 'fabricResume',\r\n    audioMute: 'audioMute',\r\n    audioUnmute: 'audioUnmute',\r\n    videoPause: 'videoPause',\r\n    videoResume: 'videoResume',\r\n    fabricUsageEvent: 'fabricUsageEvent',\r\n    fabricStats: 'fabricStats',\r\n    fabricTerminated: 'fabricTerminated',\r\n    screenShareStart: 'screenShareStart',\r\n    screenShareStop: 'screenShareStop',\r\n    dominantSpeaker: 'dominantSpeaker',\r\n    activeDeviceList: 'activeDeviceList'\r\n};\r\n\r\n/**\r\n * The user id to report to callstats as destination.\r\n * @type {string}\r\n */\r\nconst DEFAULT_REMOTE_USER = 'jitsi';\r\n\r\n/**\r\n * Type of pending reports, can be event or an error.\r\n * @type {{ERROR: string, EVENT: string}}\r\n */\r\nconst reportType = {\r\n    ERROR: 'error',\r\n    EVENT: 'event',\r\n    MST_WITH_USERID: 'mstWithUserID'\r\n};\r\n\r\n/**\r\n * Set of currently existing {@link CallStats} instances.\r\n * @type {Set<CallStats>}\r\n */\r\nlet _fabrics;\r\n\r\n/**\r\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\r\n * reports one peer connection the the CallStats backend and is allocated with\r\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\r\n * reporting various events. A fabric is considered disposed when\r\n * {@link CallStats.sendTerminateEvent} is executed.\r\n *\r\n * Currently only one backend instance can be created ever and it's done using\r\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\r\n * explicitly shutdown the backend, but it's supposed to close it's connection\r\n * automatically, after all fabrics have been terminated.\r\n */\r\nexport default class CallStats {\r\n    /**\r\n     * A callback passed to {@link callstats.addNewFabric}.\r\n     * @param {string} error 'success' means ok\r\n     * @param {string} msg some more details\r\n     * @private\r\n     */\r\n    static _addNewFabricCallback(error, msg) {\r\n        if (CallStats.backend && error !== 'success') {\r\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback passed to {@link callstats.initialize} (backend initialization)\r\n     * @param {string} error 'success' means ok\r\n     * @param {String} msg\r\n     * @private\r\n     */\r\n    static _initCallback(error, msg) {\r\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\r\n\r\n        // there is no lib, nothing to report to\r\n        if (error !== 'success') {\r\n            return;\r\n        }\r\n\r\n        CallStats.backendInitialized = true;\r\n\r\n        // I hate that\r\n        let atLeastOneFabric = false;\r\n        let defaultInstance = null;\r\n\r\n        for (const callStatsInstance of CallStats.fabrics.values()) {\r\n            if (!callStatsInstance.hasFabric) {\r\n                logger.debug('addNewFabric - initCallback');\r\n                if (callStatsInstance._addNewFabric()) {\r\n                    atLeastOneFabric = true;\r\n                    if (!defaultInstance) {\r\n                        defaultInstance = callStatsInstance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!atLeastOneFabric) {\r\n            return;\r\n        }\r\n\r\n        CallStats._emptyReportQueue(defaultInstance);\r\n    }\r\n\r\n    /**\r\n     * Empties report queue.\r\n     *\r\n     * @param {CallStats} csInstance - The callstats instance.\r\n     * @private\r\n     */\r\n    static _emptyReportQueue(csInstance) {\r\n        // There is no conference ID nor a PeerConnection available when some of\r\n        // the events are scheduled on the reportsQueue, so those will be\r\n        // reported on the first initialized fabric.\r\n        const defaultConfID = csInstance.confID;\r\n        const defaultPC = csInstance.peerconnection;\r\n\r\n        // notify callstats about failures if there were any\r\n        for (const report of CallStats.reportsQueue) {\r\n            if (report.type === reportType.ERROR) {\r\n                const errorData = report.data;\r\n\r\n                CallStats._reportError(\r\n                    csInstance,\r\n                    errorData.type,\r\n                    errorData.error,\r\n                    errorData.pc || defaultPC);\r\n            } else if (report.type === reportType.EVENT) {\r\n                // if we have and event to report and we failed to add\r\n                // fabric this event will not be reported anyway, returning\r\n                // an error\r\n                const eventData = report.data;\r\n\r\n                CallStats.backend.sendFabricEvent(\r\n                    report.pc || defaultPC,\r\n                    eventData.event,\r\n                    defaultConfID,\r\n                    eventData.eventData);\r\n            } else if (report.type === reportType.MST_WITH_USERID) {\r\n                const data = report.data;\r\n\r\n                CallStats.backend.associateMstWithUserID(\r\n                    report.pc || defaultPC,\r\n                    data.callStatsId,\r\n                    defaultConfID,\r\n                    data.ssrc,\r\n                    data.usageLabel,\r\n                    data.containerId\r\n                );\r\n            }\r\n        }\r\n        CallStats.reportsQueue.length = 0;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} [cs]\r\n     * @param type the type of the error, which will be one of the wrtcFuncNames\r\n     * @param error the error\r\n     * @param pc the peerconnection\r\n     * @private\r\n     */\r\n    static _reportError(cs, type, error, pc) {\r\n        let _error = error;\r\n\r\n        if (!_error) {\r\n            logger.warn('No error is passed!');\r\n            _error = new Error('Unknown error');\r\n        }\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.ERROR,\r\n                data: {\r\n                    error: _error,\r\n                    pc,\r\n                    type\r\n                }\r\n            });\r\n        }\r\n\r\n        // else just ignore it\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} cs\r\n     * @param event the type of the event, which will be one of the fabricEvent\r\n     * @param eventData additional data to pass to event\r\n     * @private\r\n     */\r\n    static _reportEvent(cs, event, eventData) {\r\n        const pc = cs && cs.peerconnection;\r\n        const confID = cs && cs.confID;\r\n\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                confID,\r\n                pc,\r\n                type: reportType.EVENT,\r\n                data: { event,\r\n                    eventData }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps some of the CallStats API method and logs their calls with\r\n     * arguments on the debug logging level. Also wraps some of the backend\r\n     * methods execution into try catch blocks to not crash the app in case\r\n     * there is a problem with the backend itself.\r\n     * @param {callstats} theBackend\r\n     * @private\r\n     */\r\n    static _traceAndCatchBackendCalls(theBackend) {\r\n        const tryCatchMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of tryCatchMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                try {\r\n                    return originalMethod.apply(theBackend, theArguments);\r\n                } catch (e) {\r\n                    GlobalOnErrorHandler.callErrorHandler(e);\r\n                }\r\n            };\r\n        }\r\n        const debugMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of debugMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                logger.debug(methodName, theArguments);\r\n                originalMethod.apply(theBackend, theArguments);\r\n            };\r\n        }\r\n        const originalReportError = theBackend.reportError;\r\n\r\n        /* eslint-disable max-params */\r\n        theBackend.reportError = function(pc, cs, type, ...args) {\r\n            // Logs from the logger are submitted on the applicationLog event\r\n            // \"type\". Logging the arguments on the logger will create endless\r\n            // loop, because it will put all the logs to the logger queue again.\r\n            if (type === wrtcFuncNames.applicationLog) {\r\n                // NOTE otherArguments are not logged to the console on purpose\r\n                // to not log the whole log batch\r\n                // FIXME check the current logging level (currently not exposed\r\n                // by the logger implementation)\r\n                // NOTE it is not safe to log whole objects on react-native as\r\n                // those contain too many circular references and may crash\r\n                // the app.\r\n                if (!browser.isReactNative()) {\r\n                    console && console.debug('reportError', pc, cs, type);\r\n                }\r\n            } else {\r\n                logger.debug('reportError', pc, cs, type, ...args);\r\n            }\r\n            try {\r\n                originalReportError.call(theBackend, pc, cs, type, ...args);\r\n            } catch (exception) {\r\n                if (type === wrtcFuncNames.applicationLog) {\r\n                    console && console.error('reportError', exception);\r\n                } else {\r\n                    GlobalOnErrorHandler.callErrorHandler(exception);\r\n                }\r\n            }\r\n        };\r\n\r\n        /* eslint-enable max-params */\r\n    }\r\n\r\n    /**\r\n     * Returns the Set with the currently existing {@link CallStats} instances.\r\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<CallStats>}\r\n     */\r\n    static get fabrics() {\r\n        if (!_fabrics) {\r\n            _fabrics = new Set();\r\n        }\r\n\r\n        return _fabrics;\r\n    }\r\n\r\n    /**\r\n     * Initializes the CallStats backend. Should be called only if\r\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\r\n     * @param {object} options\r\n     * @param {String} options.callStatsID CallStats credentials - ID\r\n     * @param {String} options.callStatsSecret CallStats credentials - secret\r\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\r\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\r\n     * @param {string} options.userName the <tt>userName</tt> part of\r\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\r\n     *\r\n     */\r\n    static initBackend(options) {\r\n        if (CallStats.backend) {\r\n            throw new Error('CallStats backend has been initialized already!');\r\n        }\r\n        try {\r\n            const CallStatsBackend = callstats;\r\n\r\n            CallStats.backend = new CallStatsBackend();\r\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\r\n            CallStats.userID = {\r\n                aliasName: options.aliasName,\r\n                userName: options.userName\r\n            };\r\n            CallStats.callStatsID = options.callStatsID;\r\n            CallStats.callStatsSecret = options.callStatsSecret;\r\n\r\n            let configParams;\r\n\r\n            if (options.applicationName) {\r\n                configParams = {\r\n                    applicationVersion:\r\n                        `${options.applicationName} (${\r\n                            browser.getName()})`\r\n                };\r\n            }\r\n\r\n            if (options.confID) {\r\n                // we first check is there a tenant in the confID\r\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\r\n\r\n                // if there is no tenant, we will just set '/'\r\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\r\n            }\r\n\r\n            // userID is generated or given by the origin server\r\n            CallStats.backend.initialize(\r\n                CallStats.callStatsID,\r\n                CallStats.callStatsSecret,\r\n                CallStats.userID,\r\n                CallStats._initCallback,\r\n                undefined,\r\n                configParams);\r\n\r\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\r\n\r\n            if (getWiFiStatsMethod) {\r\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\r\n\r\n                getWiFiStatsMethod().then(result => {\r\n                    if (result) {\r\n                        logger.info('Reported wifi addresses:'\r\n                            , JSON.parse(result).addresses);\r\n                    }\r\n                })\r\n                .catch(() => {});// eslint-disable-line no-empty-function\r\n            }\r\n\r\n            return true;\r\n        } catch (e) {\r\n            // The callstats.io API failed to initialize (e.g. because its\r\n            // download did not succeed in general or on time). Further attempts\r\n            // to utilize it cannot possibly succeed.\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            CallStats.backend = null;\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the CallStats backend has been created. It does not mean that\r\n     * it has been initialized, but only that the API instance has been\r\n     * allocated successfully.\r\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\r\n     * otherwise\r\n     */\r\n    static isBackendInitialized() {\r\n        return Boolean(CallStats.backend);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats about active device.\r\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\r\n     * their data\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendActiveDeviceListEvent(devicesData, cs) {\r\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that there is a log we want to report.\r\n     *\r\n     * @param {Error} e error to send or {String} message\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendApplicationLog(e, cs) {\r\n        try {\r\n            CallStats._reportError(\r\n                cs,\r\n                wrtcFuncNames.applicationLog,\r\n                e,\r\n                cs && cs.peerconnection);\r\n        } catch (error) {\r\n            // If sendApplicationLog fails it should not be printed to\r\n            // the logger, because it will try to push the logs again\r\n            // (through sendApplicationLog) and an endless loop is created.\r\n            if (console && (typeof console.error === 'function')) {\r\n                // FIXME send analytics event as well\r\n                console.error('sendApplicationLog failed', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the given feedback through CallStats.\r\n     *\r\n     * @param {string} conferenceID the conference ID for which the feedback\r\n     * will be reported.\r\n     * @param overall an integer between 1 and 5 indicating the\r\n     * user feedback\r\n     * @param comment detailed feedback from the user.\r\n     */\r\n    static sendFeedback(conferenceID, overall, comment) {\r\n        return new Promise((resolve, reject) => {\r\n            if (CallStats.backend) {\r\n                CallStats.backend.sendUserFeedback(\r\n                    conferenceID,\r\n                    {\r\n                        userID: CallStats.userID,\r\n                        overall,\r\n                        comment\r\n                    },\r\n                    (status, message) => {\r\n                        if (status === 'success') {\r\n                            resolve(message);\r\n                        } else {\r\n                            reject(message);\r\n                        }\r\n                    });\r\n            } else {\r\n                const reason = 'Failed to submit feedback to CallStats - no backend';\r\n\r\n                logger.error(reason);\r\n                reject(reason);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that getUserMedia failed.\r\n     *\r\n     * @param {Error} e error to send\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendGetUserMediaFailed(e, cs) {\r\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for mute events\r\n     * @param mute {boolean} true for muted and false for not muted\r\n     * @param type {String} \"audio\"/\"video\"\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendMuteEvent(mute, type, cs) {\r\n        let event;\r\n\r\n        if (type === 'video') {\r\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\r\n        } else {\r\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\r\n        }\r\n\r\n        CallStats._reportEvent(cs, event);\r\n    }\r\n\r\n    /**\r\n     * Creates new CallStats instance that handles all callstats API calls for\r\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\r\n     * one CallStats fabric added with 'addFabric' API method for the\r\n     * {@link TraceablePeerConnection} instance passed in the constructor.\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {Object} options\r\n     * @param {string} options.confID the conference ID that wil be used to\r\n     * report the session.\r\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\r\n     * which given <tt>tpc</tt> is connected.\r\n     */\r\n    constructor(tpc, options) {\r\n        this.confID = options.confID;\r\n        this.tpc = tpc;\r\n        this.peerconnection = tpc.peerconnection;\r\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\r\n        this.hasFabric = false;\r\n\r\n        CallStats.fabrics.add(this);\r\n\r\n        if (CallStats.backendInitialized) {\r\n            this._addNewFabric();\r\n\r\n            // if this is the first fabric let's try to empty the\r\n            // report queue. Reports all events that we recorded between\r\n            // backend initialization and receiving the first fabric\r\n            if (CallStats.fabrics.size === 1) {\r\n                CallStats._emptyReportQueue(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\r\n     * the peer connection associated with this instance.\r\n     * @return {boolean} true if the call was successful or false otherwise.\r\n     */\r\n    _addNewFabric() {\r\n        logger.info('addNewFabric', this.remoteUserID);\r\n        try {\r\n            const fabricAttributes = {\r\n                remoteEndpointType:\r\n                    this.tpc.isP2P\r\n                        ? CallStats.backend.endpointType.peer\r\n                        : CallStats.backend.endpointType.server\r\n            };\r\n            const ret\r\n                = CallStats.backend.addNewFabric(\r\n                    this.peerconnection,\r\n                    this.remoteUserID,\r\n                    CallStats.backend.fabricUsage.multiplex,\r\n                    this.confID,\r\n                    fabricAttributes,\r\n                    CallStats._addNewFabricCallback);\r\n\r\n            this.hasFabric = true;\r\n\r\n            const success = ret.status === 'success';\r\n\r\n            if (!success) {\r\n                logger.error('callstats fabric not initilized', ret.message);\r\n            }\r\n\r\n            return success;\r\n\r\n        } catch (error) {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Lets CallStats module know where is given SSRC rendered by providing\r\n     * renderer tag ID.\r\n     * If the lib is not initialized yet queue the call for later, when it's\r\n     * ready.\r\n     * @param {number} ssrc the SSRC of the stream\r\n     * @param {boolean} isLocal indicates whether this the stream is local\r\n     * @param {string|null} streamEndpointId if the stream is not local the it\r\n     * needs to contain the stream owner's ID\r\n     * @param {string} usageLabel meaningful usage label of this stream like\r\n     *        'microphone', 'camera' or 'screen'.\r\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\r\n     *        renders the stream.\r\n     */\r\n    associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            streamEndpointId,\r\n            usageLabel,\r\n            containerId) {\r\n        if (!CallStats.backend) {\r\n            return;\r\n        }\r\n\r\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\r\n\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.associateMstWithUserID(\r\n                this.peerconnection,\r\n                callStatsId,\r\n                this.confID,\r\n                ssrc,\r\n                usageLabel,\r\n                containerId);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.MST_WITH_USERID,\r\n                pc: this.peerconnection,\r\n                data: {\r\n                    callStatsId,\r\n                    containerId,\r\n                    ssrc,\r\n                    usageLabel\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Notifies CallStats that we are the new dominant speaker in the\r\n     * conference.\r\n     */\r\n    sendDominantSpeakerEvent() {\r\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that the fabric for the underlying peerconnection was\r\n     * closed and no evens should be reported, after this call.\r\n     */\r\n    sendTerminateEvent() {\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.sendFabricEvent(\r\n                this.peerconnection,\r\n                CallStats.backend.fabricEvent.fabricTerminated,\r\n                this.confID);\r\n        }\r\n        CallStats.fabrics.delete(this);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for ice connection failed\r\n     */\r\n    sendIceConnectionFailedEvent() {\r\n        CallStats._reportError(\r\n            this,\r\n            wrtcFuncNames.iceConnectionFailure,\r\n            null,\r\n            this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create offer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateOfferFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create answer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateAnswerFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Sends either resume or hold event for the fabric associated with\r\n     * the underlying peerconnection.\r\n     * @param {boolean} isResume true to resume or false to hold\r\n     */\r\n    sendResumeOrHoldEvent(isResume) {\r\n        CallStats._reportEvent(\r\n            this,\r\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for screen sharing events\r\n     * @param {boolean} start true for starting screen sharing and\r\n     * false for not stopping\r\n     * @param {string|null} ssrc - optional ssrc value, used only when\r\n     * starting screen sharing.\r\n     */\r\n    sendScreenSharingEvent(start, ssrc) {\r\n        let eventData;\r\n\r\n        if (ssrc) {\r\n            eventData = { ssrc };\r\n        }\r\n\r\n        CallStats._reportEvent(\r\n            this,\r\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\r\n            eventData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set local description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetLocalDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set remote description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetRemoteDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to add ICE candidate.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendAddIceCandidateFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\r\n    }\r\n}\r\n\r\n/**\r\n * The CallStats API backend instance\r\n * @type {callstats}\r\n */\r\nCallStats.backend = null;\r\n\r\n// some errors/events may happen before CallStats init\r\n// in this case we accumulate them in this array\r\n// and send them to callstats on init\r\nCallStats.reportsQueue = [];\r\n\r\n/**\r\n * Whether the library was successfully initialized(the backend) using its\r\n * initialize method.\r\n * @type {boolean}\r\n */\r\nCallStats.backendInitialized = false;\r\n\r\n/**\r\n * Part of the CallStats credentials - application ID\r\n * @type {string}\r\n */\r\nCallStats.callStatsID = null;\r\n\r\n/**\r\n * Part of the CallStats credentials - application secret\r\n * @type {string}\r\n */\r\nCallStats.callStatsSecret = null;\r\n\r\n/**\r\n * Local CallStats user ID structure. Can be set only once when\r\n * {@link backend} is initialized, so it's static for the time being.\r\n * See CallStats API for more info:\r\n * https://www.callstats.io/api/#userid\r\n * @type {object}\r\n */\r\nCallStats.userID = null;\r\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nimport UsernameGenerator from '../util/UsernameGenerator';\r\n\r\nlet _callStatsUserName;\r\n\r\nlet _machineId;\r\n\r\n/**\r\n *\r\n */\r\nexport default {\r\n    /**\r\n     * Returns fake username for callstats\r\n     * @returns {string} fake username for callstats\r\n     */\r\n    get callStatsUserName() {\r\n        if (!_callStatsUserName) {\r\n            _callStatsUserName = jitsiLocalStorage.getItem('callStatsUserName');\r\n            if (!_callStatsUserName) {\r\n                _callStatsUserName = generateCallStatsUserName();\r\n                jitsiLocalStorage.setItem('callStatsUserName', _callStatsUserName);\r\n            }\r\n        }\r\n\r\n        return _callStatsUserName;\r\n    },\r\n\r\n    /**\r\n     * Returns current machine id.\r\n     * @returns {string} machine id\r\n     */\r\n    get machineId() {\r\n        if (!_machineId) {\r\n            _machineId = jitsiLocalStorage.getItem('jitsiMeetId');\r\n            if (!_machineId) {\r\n                _machineId = generateJitsiMeetId();\r\n                jitsiLocalStorage.setItem('jitsiMeetId', _machineId);\r\n            }\r\n        }\r\n\r\n        return _machineId;\r\n    },\r\n\r\n    /**\r\n     * Returns current session id.\r\n     * @returns {string} current session id\r\n     */\r\n    get sessionId() {\r\n        // We may update sessionId in localStorage from another JitsiConference\r\n        // instance and that's why we should always re-read it.\r\n        return jitsiLocalStorage.getItem('sessionId');\r\n    },\r\n\r\n    /**\r\n     * Save current session id.\r\n     * @param {string} sessionId session id\r\n     */\r\n    set sessionId(sessionId) {\r\n        if (sessionId) {\r\n            jitsiLocalStorage.setItem('sessionId', sessionId);\r\n        } else {\r\n            jitsiLocalStorage.removeItem('sessionId');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Generate fake username for callstats.\r\n * @returns {string} fake random username\r\n */\r\nfunction generateCallStatsUserName() {\r\n    const username = UsernameGenerator.generateUsername();\r\n\r\n    logger.log('generated callstats uid', username);\r\n\r\n    return username;\r\n}\r\n\r\n/**\r\n * Generate unique id.\r\n * @returns {string} random unique id\r\n */\r\nfunction generateJitsiMeetId() {\r\n    const jitsiMeetId = generateUniqueId();\r\n\r\n    logger.log('generated id', jitsiMeetId);\r\n\r\n    return jitsiMeetId;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction generateUniqueId() {\r\n    return _p8() + _p8() + _p8() + _p8();\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _p8() {\r\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\r\n}\r\n","/**\r\n * @const\r\n */\r\nconst ALPHANUM\r\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n/**\r\n * Hexadecimal digits.\r\n * @const\r\n */\r\nconst HEX_DIGITS = '0123456789abcdef';\r\n\r\n/**\r\n * Generates random int within the range [min, max]\r\n * @param min the minimum value for the generated number\r\n * @param max the maximum value for the generated number\r\n * @returns random int number\r\n */\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Get random element from array or string.\r\n * @param {Array|string} arr source\r\n * @returns array element or string character\r\n */\r\nfunction randomElement(arr) {\r\n    return arr[randomInt(0, arr.length - 1)];\r\n}\r\n\r\n/**\r\n * Generate random alphanumeric string.\r\n * @param {number} length expected string length\r\n * @returns {string} random string of specified length\r\n */\r\nfunction randomAlphanumStr(length) {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < length; i += 1) {\r\n        result += randomElement(ALPHANUM);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Exported interface.\r\n */\r\nconst RandomUtil = {\r\n    /**\r\n     * Returns a random hex digit.\r\n     * @returns {*}\r\n     */\r\n    randomHexDigit() {\r\n        return randomElement(HEX_DIGITS);\r\n    },\r\n\r\n    /**\r\n     * Returns a random string of hex digits with length 'len'.\r\n     * @param len the length.\r\n     */\r\n    randomHexString(len) {\r\n        let ret = '';\r\n\r\n        while (len--) { // eslint-disable-line no-param-reassign\r\n            ret += this.randomHexDigit();\r\n        }\r\n\r\n        return ret;\r\n    },\r\n    randomElement,\r\n    randomAlphanumStr,\r\n    randomInt\r\n};\r\n\r\nmodule.exports = RandomUtil;\r\n","import Listenable from '../util/Listenable';\r\n\r\n/**\r\n * Creates ConnectionPlugin class that extends the passed class.\r\n * @param {Class} base the definition of the class that will be extended by\r\n * ConnectionPlugin\r\n */\r\nfunction getConnectionPluginDefinition(base = class {}) {\r\n    /**\r\n     * Base class for strophe connection plugins.\r\n     */\r\n    return class extends base {\r\n        /**\r\n         *\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this.connection = null;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param connection\r\n         */\r\n        init(connection) {\r\n            this.connection = connection;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * ConnectionPlugin class.\r\n */\r\nexport default getConnectionPluginDefinition();\r\n\r\n/**\r\n * ConnectionPlugin class that extends Listenable.\r\n */\r\nexport const ConnectionPluginListenable\r\n    = getConnectionPluginDefinition(Listenable);\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-disco';\r\n\r\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport browser from '../browser';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport Caps from './Caps';\r\nimport XmppConnection from './XmppConnection';\r\nimport MucConnectionPlugin from './strophe.emuc';\r\nimport JingleConnectionPlugin from './strophe.jingle';\r\nimport initStropheLogger from './strophe.logger';\r\nimport PingConnectionPlugin from './strophe.ping';\r\nimport RayoConnectionPlugin from './strophe.rayo';\r\nimport initStropheUtil from './strophe.util';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Creates XMPP connection.\r\n *\r\n * @param {Object} options\r\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\r\n * Prosody).\r\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\r\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\r\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\r\n * @returns {XmppConnection}\r\n */\r\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\r\n    // Append token as URL param\r\n    if (token) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\r\n    }\r\n\r\n    return new XmppConnection({\r\n        enableWebsocketResume,\r\n        serviceUrl,\r\n        websocketKeepAlive\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\r\n * {@link XmppConnection} wrapper.\r\n *\r\n * @returns {void}\r\n */\r\nfunction initStropheNativePlugins() {\r\n    initStropheUtil();\r\n    initStropheLogger();\r\n}\r\n\r\n// FIXME: remove once we have a default config template. -saghul\r\n/**\r\n * A list of ice servers to use by default for P2P.\r\n */\r\nexport const DEFAULT_STUN_SERVERS = [\r\n    { urls: 'stun:stun.l.google.com:19302' },\r\n    { urls: 'stun:stun1.l.google.com:19302' },\r\n    { urls: 'stun:stun2.l.google.com:19302' }\r\n];\r\n\r\n/**\r\n * The name of the field used to recognize a chat message as carrying a JSON\r\n * payload from another endpoint.\r\n * If the json-message of a chat message contains a valid JSON object, and\r\n * the JSON has this key, then it is a valid json-message to be sent.\r\n */\r\nexport const JITSI_MEET_MUC_TYPE = 'type';\r\n\r\n/**\r\n *\r\n */\r\nexport default class XMPP extends Listenable {\r\n    /**\r\n     * FIXME describe all options\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\r\n     * connection with the server.\r\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\r\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\r\n     * module try to resume the session in case the Websocket connection breaks.\r\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\r\n     * constructor for more details.\r\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\r\n     * @param token\r\n     */\r\n    constructor(options, token) {\r\n        super();\r\n        this.connection = null;\r\n        this.disconnectInProgress = false;\r\n        this.connectionTimes = {};\r\n        this.options = options;\r\n        this.token = token;\r\n        this.authenticatedUser = false;\r\n\r\n        initStropheNativePlugins();\r\n\r\n        this.connection = createConnection({\r\n            enableWebsocketResume: options.enableWebsocketResume,\r\n\r\n            // FIXME remove deprecated bosh option at some point\r\n            serviceUrl: options.serviceUrl || options.bosh,\r\n            token,\r\n            websocketKeepAlive: options.websocketKeepAlive\r\n        });\r\n\r\n        this._initStrophePlugins();\r\n\r\n        this.caps = new Caps(this.connection, this.options.clientNode);\r\n\r\n        // Initialize features advertised in disco-info\r\n        this.initFeaturesList();\r\n\r\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\r\n        // sounds like they would want that. A problem for them though may be if\r\n        // they wanted to utilize the connected connection in an unload handler\r\n        // of their own. However, it should be fairly easy for them to do that\r\n        // by registering their unload handler before us.\r\n        $(window).on('beforeunload unload', ev => {\r\n            this.disconnect(ev).catch(() => {\r\n                // ignore errors in order to not brake the unload.\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the list of feature advertised through the disco-info\r\n     * mechanism.\r\n     */\r\n    initFeaturesList() {\r\n        // http://xmpp.org/extensions/xep-0167.html#support\r\n        // http://xmpp.org/extensions/xep-0176.html#support\r\n        this.caps.addFeature('urn:xmpp:jingle:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\r\n\r\n        if (!this.options.disableRtx) {\r\n            this.caps.addFeature('urn:ietf:rfc:4588');\r\n        }\r\n\r\n        // this is dealt with by SDP O/A so we don't need to announce this\r\n        // XEP-0293\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\r\n        // XEP-0294\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\r\n\r\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\r\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\r\n\r\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\r\n\r\n        // Enable Lipsync ?\r\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\r\n            logger.info('Lip-sync enabled !');\r\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\r\n        }\r\n\r\n        if (this.connection.rayo) {\r\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\r\n        }\r\n\r\n        if (browser.supportsInsertableStreams() && !(this.options.testing && this.options.testing.disableE2EE)) {\r\n            this.caps.addFeature('https://jitsi.org/meet/e2ee');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns {@code true} if the PING functionality is supported by the server\r\n     * or {@code false} otherwise.\r\n     * @returns {boolean}\r\n     */\r\n    isPingSupported() {\r\n        return this._pingSupported !== false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getConnection() {\r\n        return this.connection;\r\n    }\r\n\r\n    /**\r\n     * Receive connection status changes and handles them.\r\n     *\r\n     * @param {Object} credentials\r\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\r\n     * connect method. For example, 'user@xmpp.com'.\r\n     * @param {string} credentials.password - The password passed to the connect\r\n     * method.\r\n     * @param {string} status - One of Strophe's connection status strings.\r\n     * @param {string} [msg] - The connection error message provided by Strophe.\r\n     */\r\n    connectionHandler(credentials = {}, status, msg) {\r\n        const now = window.performance.now();\r\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\r\n\r\n        this.connectionTimes[statusStr] = now;\r\n        logger.log(\r\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\r\n            now);\r\n\r\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\r\n        if (status === Strophe.Status.CONNECTED\r\n            || status === Strophe.Status.ATTACHED) {\r\n            if (this.options.useStunTurn\r\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\r\n                this.connection.jingle.getStunAndTurnCredentials();\r\n            }\r\n\r\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\r\n\r\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\r\n            this._resetState();\r\n\r\n            // Schedule ping ?\r\n            const pingJid = this.connection.domain;\r\n\r\n            // FIXME no need to do it again on stream resume\r\n            this.caps.getFeaturesAndIdentities(pingJid)\r\n                .then(({ features, identities }) => {\r\n                    if (features.has(Strophe.NS.PING)) {\r\n                        this._pingSupported = true;\r\n                        this.connection.ping.startInterval(pingJid);\r\n                    } else {\r\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\r\n                    }\r\n\r\n                    // check for speakerstats\r\n                    identities.forEach(identity => {\r\n                        if (identity.type === 'speakerstats') {\r\n                            this.speakerStatsComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'conference_duration') {\r\n                            this.conferenceDurationComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'lobbyrooms') {\r\n                            this.lobbySupported = true;\r\n                            identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\r\n                                .then(({ features: f }) => {\r\n                                    f.forEach(fr => {\r\n                                        if (fr.endsWith('#displayname_required')) {\r\n                                            this.eventEmitter.emit(\r\n                                                JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\r\n                                        }\r\n                                    });\r\n                                })\r\n                                .catch(logger.warn('Error getting features from lobby.'));\r\n                        }\r\n                    });\r\n\r\n                    if (this.speakerStatsComponentAddress\r\n                        || this.conferenceDurationComponentAddress) {\r\n                        this.connection.addHandler(\r\n                            this._onPrivateMessage.bind(this), null,\r\n                            'message', null, null);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    const errmsg = 'Feature discovery error';\r\n\r\n                    GlobalOnErrorHandler.callErrorHandler(\r\n                        new Error(`${errmsg}: ${error}`));\r\n                    logger.error(errmsg, error);\r\n                });\r\n\r\n            if (credentials.password) {\r\n                this.authenticatedUser = true;\r\n            }\r\n            if (this.connection && this.connection.connected\r\n                && Strophe.getResourceFromJid(this.connection.jid)) {\r\n                // .connected is true while connecting?\r\n                // this.connection.send($pres());\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\r\n                    Strophe.getResourceFromJid(this.connection.jid));\r\n            }\r\n        } else if (status === Strophe.Status.CONNFAIL) {\r\n            if (msg === 'x-strophe-bad-non-anon-jid') {\r\n                this.anonymousConnectionFailed = true;\r\n            } else {\r\n                this.connectionFailed = true;\r\n            }\r\n            this.lastErrorMsg = msg;\r\n            if (msg === 'giving-up') {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\r\n            }\r\n        } else if (status === Strophe.Status.ERROR) {\r\n            this.lastErrorMsg = msg;\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            // Stop ping interval\r\n            this.connection.ping.stopInterval();\r\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\r\n            const errMsg = msg || this.lastErrorMsg;\r\n\r\n            if (this.anonymousConnectionFailed) {\r\n                // prompt user for username and password\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\r\n            } else if (this.connectionFailed) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR,\r\n                    errMsg,\r\n                    undefined, /* credentials */\r\n                    this._getConnectionFailedReasonDetails());\r\n            } else if (wasIntentionalDisconnect) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\r\n            } else {\r\n                // XXX if Strophe drops the connection while not being asked to,\r\n                // it means that most likely some serious error has occurred.\r\n                // One currently known case is when a BOSH request fails for\r\n                // more than 4 times. The connection is dropped without\r\n                // supplying a reason(error message/event) through the API.\r\n                logger.error('XMPP connection dropped!');\r\n\r\n                // XXX if the last request error is within 5xx range it means it\r\n                // was a server failure\r\n                const lastErrorStatus = Strophe.getLastErrorStatus();\r\n\r\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.SERVER_ERROR,\r\n                        errMsg || 'server-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                } else {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\r\n                        errMsg || 'connection-dropped-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                }\r\n            }\r\n        } else if (status === Strophe.Status.AUTHFAIL) {\r\n            // wrong password or username, prompt user\r\n            this.eventEmitter.emit(\r\n                JitsiConnectionEvents.CONNECTION_FAILED,\r\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\r\n                msg,\r\n                credentials);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    _connect(jid, password) {\r\n        // connection.connect() starts the connection process.\r\n        //\r\n        // As the connection process proceeds, the user supplied callback will\r\n        // be triggered multiple times with status updates. The callback should\r\n        // take two arguments - the status code and the error condition.\r\n        //\r\n        // The status code will be one of the values in the Strophe.Status\r\n        // constants. The error condition will be one of the conditions defined\r\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\r\n        //\r\n        // The Parameters wait, hold and route are optional and only relevant\r\n        // for BOSH connections. Please see XEP 124 for a more detailed\r\n        // explanation of the optional parameters.\r\n        //\r\n        // Connection status constants for use by the connection handler\r\n        // callback.\r\n        //\r\n        //  Status.ERROR - An error has occurred (websockets specific)\r\n        //  Status.CONNECTING - The connection is currently being made\r\n        //  Status.CONNFAIL - The connection attempt failed\r\n        //  Status.AUTHENTICATING - The connection is authenticating\r\n        //  Status.AUTHFAIL - The authentication attempt failed\r\n        //  Status.CONNECTED - The connection has succeeded\r\n        //  Status.DISCONNECTED - The connection has been terminated\r\n        //  Status.DISCONNECTING - The connection is currently being terminated\r\n        //  Status.ATTACHED - The connection has been attached\r\n\r\n        this._resetState();\r\n        this.connection.connect(\r\n            jid,\r\n            password,\r\n            this.connectionHandler.bind(this, {\r\n                jid,\r\n                password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Attach to existing connection. Can be used for optimizations. For\r\n     * example: if the connection is created on the server we can attach to it\r\n     * and start using it.\r\n     *\r\n     * @param options {object} connecting options - rid, sid, jid and password.\r\n     */\r\n    attach(options) {\r\n        this._resetState();\r\n        const now = this.connectionTimes.attaching = window.performance.now();\r\n\r\n        logger.log('(TIME) Strophe Attaching:\\t', now);\r\n        this.connection.attach(options.jid, options.sid,\r\n            parseInt(options.rid, 10) + 1,\r\n            this.connectionHandler.bind(this, {\r\n                jid: options.jid,\r\n                password: options.password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Resets any state/flag before starting a new connection.\r\n     * @private\r\n     */\r\n    _resetState() {\r\n        this.anonymousConnectionFailed = false;\r\n        this.connectionFailed = false;\r\n        this.lastErrorMsg = undefined;\r\n        this.disconnectInProgress = undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    connect(jid, password) {\r\n        if (!jid) {\r\n            const { anonymousdomain, domain } = this.options.hosts;\r\n            let configDomain = anonymousdomain || domain;\r\n\r\n            // Force authenticated domain if room is appended with '?login=true'\r\n            // or if we're joining with the token\r\n\r\n            // FIXME Do not rely on window.location because (1) React Native\r\n            // does not have a window.location by default and (2) here we cannot\r\n            // know for sure that query/search has not be stripped from\r\n            // window.location by the time the following executes.\r\n            const { location } = window;\r\n\r\n            if (anonymousdomain) {\r\n                const search = location && location.search;\r\n\r\n                if ((search && search.indexOf('login=true') !== -1)\r\n                        || this.token) {\r\n                    configDomain = domain;\r\n                }\r\n            }\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            jid = configDomain || (location && location.hostname);\r\n        }\r\n\r\n        return this._connect(jid, password);\r\n    }\r\n\r\n    /**\r\n     * Joins or creates a muc with the provided jid, created from the passed\r\n     * in room name and muc host and onCreateResource result.\r\n     *\r\n     * @param {string} roomName - The name of the muc to join.\r\n     * @param {Object} options - Configuration for how to join the muc.\r\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\r\n     * is to be added to the jid.\r\n     * @returns {Promise} Resolves with an instance of a strophe muc.\r\n     */\r\n    createRoom(roomName, options, onCreateResource) {\r\n        // There are cases (when using subdomain) where muc can hold an uppercase part\r\n        let roomjid = `${roomName}@${options.customDomain\r\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\r\n\r\n        const mucNickname = onCreateResource\r\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\r\n            : RandomUtil.randomHexString(8).toLowerCase();\r\n\r\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\r\n        roomjid += mucNickname;\r\n\r\n        return this.connection.emuc.createRoom(roomjid, null, options);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant associated with the Strophe connection.\r\n     *\r\n     * @returns {string} The jid of the participant.\r\n     */\r\n    getJid() {\r\n        return this.connection.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.jingle.\r\n     * @returns {Object}\r\n     */\r\n    getJingleLog() {\r\n        const jingle = this.connection.jingle;\r\n\r\n\r\n        return jingle ? jingle.getLog() : {};\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.\r\n     */\r\n    getXmppLog() {\r\n        return (this.connection.logger || {}).log || null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dial(...args) {\r\n        this.connection.rayo.dial(...args);\r\n    }\r\n\r\n    /**\r\n     * Pings the server. Remember to check {@link isPingSupported} before using\r\n     * this method.\r\n     * @param timeout how many ms before a timeout should occur.\r\n     * @returns {Promise} resolved on ping success and reject on an error or\r\n     * a timeout.\r\n     */\r\n    ping(timeout) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.isPingSupported()) {\r\n                this.connection.ping\r\n                    .ping(this.connection.domain, resolve, reject, timeout);\r\n            } else {\r\n                reject('PING operation is not supported by the server');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getSessions() {\r\n        return this.connection.jingle.sessions;\r\n    }\r\n\r\n    /**\r\n     * Disconnects this from the XMPP server (if this is connected).\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\r\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\r\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n     */\r\n    disconnect(ev) {\r\n        if (this.disconnectInProgress) {\r\n            return this.disconnectInProgress;\r\n        } else if (!this.connection) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.disconnectInProgress = new Promise(resolve => {\r\n            const disconnectListener = (credentials, status) => {\r\n                if (status === Strophe.Status.DISCONNECTED) {\r\n                    resolve();\r\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n                }\r\n            };\r\n\r\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n        });\r\n\r\n        this._cleanupXmppConnection(ev);\r\n\r\n        return this.disconnectInProgress;\r\n    }\r\n\r\n    /**\r\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\r\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\r\n     * (e.g. beforeunload, unload).\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cleanupXmppConnection(ev) {\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\r\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\r\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\r\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\r\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\r\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\r\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\r\n        // possible.\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n\r\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\r\n            const evType = ev.type;\r\n\r\n            if (evType === 'beforeunload' || evType === 'unload') {\r\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\r\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\r\n                // depending on whether we want to run with it for some time.\r\n                this.connection.options.sync = true;\r\n\r\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\r\n                if (this.connection.sendUnavailableBeacon()) {\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.connection.disconnect();\r\n\r\n        if (this.connection.options.sync !== true) {\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    _initStrophePlugins() {\r\n        const iceConfig = {\r\n            jvb: { iceServers: [ ] },\r\n            p2p: { iceServers: [ ] }\r\n        };\r\n\r\n        const p2pStunServers = (this.options.p2p\r\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\r\n\r\n        if (Array.isArray(p2pStunServers)) {\r\n            logger.info('P2P STUN servers: ', p2pStunServers);\r\n            iceConfig.p2p.iceServers = p2pStunServers;\r\n        }\r\n\r\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\r\n            logger.info('P2P ICE transport policy: ',\r\n                this.options.p2p.iceTransportPolicy);\r\n\r\n            iceConfig.p2p.iceTransportPolicy\r\n                = this.options.p2p.iceTransportPolicy;\r\n        }\r\n\r\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\r\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\r\n        this.connection.addConnectionPlugin('ping', new PingConnectionPlugin(this));\r\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\r\n    }\r\n\r\n    /**\r\n     * Returns details about connection failure. Shard change or is it after\r\n     * suspend.\r\n     * @returns {object} contains details about a connection failure.\r\n     * @private\r\n     */\r\n    _getConnectionFailedReasonDetails() {\r\n        const details = {};\r\n\r\n        // check for moving between shard if information is available\r\n        if (this.options.deploymentInfo\r\n            && this.options.deploymentInfo.shard\r\n            && this.connection.lastResponseHeaders) {\r\n\r\n            // split headers by line\r\n            const headersArr = this.connection.lastResponseHeaders\r\n                .trim().split(/[\\r\\n]+/);\r\n            const headers = {};\r\n\r\n            headersArr.forEach(line => {\r\n                const parts = line.split(': ');\r\n                const header = parts.shift();\r\n                const value = parts.join(': ');\r\n\r\n                headers[header] = value;\r\n            });\r\n\r\n            /* eslint-disable camelcase */\r\n            details.shard_changed\r\n                = this.options.deploymentInfo.shard\r\n                    !== headers['x-jitsi-shard'];\r\n            /* eslint-enable camelcase */\r\n        }\r\n\r\n        /* eslint-disable camelcase */\r\n        // check for possible suspend\r\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\r\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\r\n        /* eslint-enable camelcase */\r\n\r\n        return details;\r\n    }\r\n\r\n    /**\r\n     * Notifies speaker stats component if available that we are the new\r\n     * dominant speaker in the conference.\r\n     * @param {String} roomJid - The room jid where the speaker event occurred.\r\n     */\r\n    sendDominantSpeakerEvent(roomJid) {\r\n        // no speaker stats component advertised\r\n        if (!this.speakerStatsComponentAddress || !roomJid) {\r\n            return;\r\n        }\r\n\r\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\r\n\r\n        msg.c('speakerstats', {\r\n            xmlns: 'http://jitsi.org/jitmeet',\r\n            room: roomJid })\r\n            .up();\r\n\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\r\n     * parsing it and checking if it has a field called 'type'.\r\n     *\r\n     * @param {string} jsonString check if this string is a valid json string\r\n     * and contains the special structure.\r\n     * @returns {boolean, object} if given object is a valid JSON string, return\r\n     * the json object. Otherwise, returns false.\r\n     */\r\n    tryParseJSONAndVerify(jsonString) {\r\n        try {\r\n            const json = JSON.parse(jsonString);\r\n\r\n            // Handle non-exception-throwing cases:\r\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\r\n            // hence the type-checking,\r\n            // but... JSON.parse(null) returns null, and\r\n            // typeof null === \"object\",\r\n            // so we must check for that, too.\r\n            // Thankfully, null is falsey, so this suffices:\r\n            if (json && typeof json === 'object') {\r\n                const type = json[JITSI_MEET_MUC_TYPE];\r\n\r\n                if (typeof type !== 'undefined') {\r\n                    return json;\r\n                }\r\n\r\n                logger.debug('parsing valid json but does not have correct '\r\n                    + 'structure', 'topic: ', type);\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A private message is received, message that is not addressed to the muc.\r\n     * We expect private message coming from plugins component if it is\r\n     * enabled and running.\r\n     *\r\n     * @param {string} msg - The message.\r\n     */\r\n    _onPrivateMessage(msg) {\r\n        const from = msg.getAttribute('from');\r\n\r\n        if (!(from === this.speakerStatsComponentAddress\r\n            || from === this.conferenceDurationComponentAddress)) {\r\n            return true;\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message')\r\n            .text();\r\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\r\n            && parsedJson.users) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\r\n        }\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\r\n            && parsedJson.created_timestamp) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","/**\r\n * The errors for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection was dropped with an error which was most likely\r\n * caused by some networking issues. The dropped term in this context means that\r\n * the connection was closed unexpectedly (not on user's request).\r\n *\r\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\r\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\r\n * could also happen when BOSH request is sent to the server with the session-id\r\n * that is not know to the server. But this should not happen in lib-jitsi-meet\r\n * case as long as the service is configured correctly (there is no bug).\r\n */\r\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\r\n\r\n/**\r\n * Not specified errors.\r\n */\r\nexport const OTHER_ERROR = 'connection.otherError';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\r\n\r\n/**\r\n * Indicates that the connection was dropped, because of too many 5xx HTTP\r\n * errors on BOSH requests.\r\n */\r\nexport const SERVER_ERROR = 'connection.serverError';\r\n","/**\r\n * Event triggered when participant's muted status changes.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new muted state\r\n */\r\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\r\n\r\n/**\r\n * Event triggered when participant's video type changes.\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n */\r\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\r\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $pres, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-stream-management';\r\n\r\nimport Listenable from '../util/Listenable';\r\nimport { getJitterDelay } from '../util/Retry';\r\n\r\nimport LastSuccessTracker from './StropheLastSuccess';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\r\n */\r\nexport default class XmppConnection extends Listenable {\r\n    /**\r\n     * The list of {@link XmppConnection} events.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    static get Events() {\r\n        return {\r\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The list of Xmpp connection statuses.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    static get Status() {\r\n        return Strophe.Status;\r\n    }\r\n\r\n    /**\r\n     * Initializes new connection instance.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\r\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\r\n     * It will enable automatically by default if supported by the XMPP server.\r\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\r\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\r\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\r\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\r\n     */\r\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\r\n        super();\r\n        this._options = {\r\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\r\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\r\n        };\r\n\r\n        /**\r\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._resumeRetryN = 0;\r\n        this._stropheConn = new Strophe.Connection(serviceUrl);\r\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\r\n\r\n        // The default maxRetries is 5, which is too long.\r\n        this._stropheConn.maxRetries = 3;\r\n\r\n        this._lastSuccessTracker = new LastSuccessTracker();\r\n        this._lastSuccessTracker.startTracking(this, this._stropheConn);\r\n\r\n        /**\r\n         * @typedef DeferredSendIQ Object\r\n         * @property {Element} iq - The IQ to send.\r\n         * @property {function} resolve - The resolve method of the deferred Promise.\r\n         * @property {function} reject - The reject method of the deferred Promise.\r\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\r\n         */\r\n        /**\r\n         * Deferred IQs to be sent upon reconnect.\r\n         * @type {Array<DeferredSendIQ>}\r\n         * @private\r\n         */\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * A getter for the connected state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get connected() {\r\n        return this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the feature discovery plugin instance.\r\n     *\r\n     * @returns {Strophe.Connection.disco}\r\n     */\r\n    get disco() {\r\n        return this._stropheConn.disco;\r\n    }\r\n\r\n    /**\r\n     * A getter for the disconnecting state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get disconnecting() {\r\n        return this._stropheConn.disconnecting === true;\r\n    }\r\n\r\n    /**\r\n     * A getter for the domain.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get domain() {\r\n        return this._stropheConn.domain;\r\n    }\r\n\r\n    /**\r\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\r\n     * for BOSH.\r\n     * @returns {boolean}\r\n     */\r\n    get isUsingWebSocket() {\r\n        return this._usesWebsocket;\r\n    }\r\n\r\n    /**\r\n     * A getter for the JID.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get jid() {\r\n        return this._stropheConn.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns headers for the last BOSH response received.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get lastResponseHeaders() {\r\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\r\n    }\r\n\r\n    /**\r\n     * A getter for the logger plugin instance.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get logger() {\r\n        return this._stropheConn.logger;\r\n    }\r\n\r\n    /**\r\n     * A getter for the connection options.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get options() {\r\n        return this._stropheConn.options;\r\n    }\r\n\r\n    /**\r\n     * A getter for the service URL.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get service() {\r\n        return this._stropheConn.service;\r\n    }\r\n\r\n    /**\r\n     * Returns the current connection status.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Adds a connection plugin to this instance.\r\n     *\r\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\r\n     * instance.\r\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\r\n     */\r\n    addConnectionPlugin(name, plugin) {\r\n        this[name] = plugin;\r\n        plugin.init(this);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.addHandler}\r\n     *\r\n     * @returns {void}\r\n     */\r\n    addHandler(...args) {\r\n        this._stropheConn.addHandler(...args);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.attach} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(jid, sid, rid, callback, ...args) {\r\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /**\r\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.connect} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    connect(jid, pass, callback, ...args) {\r\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Handles {@link Strophe.Status} updates for the current connection.\r\n     *\r\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\r\n     * the connect methods.\r\n     * @param {Strophe.Status} status - The new connection status.\r\n     * @param {*} args - The rest of the arguments passed by Strophe.\r\n     * @private\r\n     */\r\n    _stropheConnectionCb(targetCallback, status, ...args) {\r\n        this._status = status;\r\n\r\n        let blockCallback = false;\r\n\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this._maybeEnableStreamResume();\r\n            this._maybeStartWSKeepAlive();\r\n            this._processDeferredIQs();\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\r\n            blockCallback = this._tryResumingConnection();\r\n            if (!blockCallback) {\r\n                clearTimeout(this._wsKeepAlive);\r\n            }\r\n        }\r\n\r\n        if (!blockCallback) {\r\n            targetCallback(status, ...args);\r\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the list of IQs and rejects deferred Promises with an error.\r\n     *\r\n     * @private\r\n     */\r\n    _clearDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            deferred.reject(new Error('disconnect'));\r\n        }\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    closeWebsocket() {\r\n        this._stropheConn._proto && this._stropheConn._proto.socket && this._stropheConn._proto.socket.close();\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.disconnect}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disconnect(...args) {\r\n        clearTimeout(this._resumeTimeout);\r\n        clearTimeout(this._wsKeepAlive);\r\n        this._clearDeferredIQs();\r\n        this._stropheConn.disconnect(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.flush}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    flush(...args) {\r\n        this._stropheConn.flush(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\r\n    }\r\n\r\n    /**\r\n     * Requests a resume token from the server if enabled and all requirements are met.\r\n     *\r\n     * @private\r\n     */\r\n    _maybeEnableStreamResume() {\r\n        if (!this._options.enableWebsocketResume) {\r\n\r\n            return;\r\n        }\r\n\r\n        const { streamManagement } = this._stropheConn;\r\n\r\n        if (!this.isUsingWebSocket) {\r\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\r\n        } else if (!streamManagement) {\r\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\r\n        } else if (!streamManagement.isSupported()) {\r\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\r\n        } else if (!streamManagement.getResumeToken()) {\r\n            logger.info('Enabling XEP-0198 stream management');\r\n            streamManagement.enable(/* resume */ true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the Websocket keep alive if enabled.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _maybeStartWSKeepAlive() {\r\n        const { websocketKeepAlive } = this._options;\r\n\r\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\r\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\r\n            clearTimeout(this._wsKeepAlive);\r\n\r\n            const intervalWithJitter\r\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\r\n\r\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\r\n\r\n            this._wsKeepAlive = setTimeout(() => {\r\n                const url = this.service.replace('wss://', 'https://').replace('ws://', 'http://');\r\n\r\n                fetch(url).catch(\r\n                    error => {\r\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\r\n                    })\r\n                    .then(() => this._maybeStartWSKeepAlive());\r\n            }, intervalWithJitter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _processDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            if (deferred.iq) {\r\n                clearTimeout(deferred.timeout);\r\n\r\n                const timeLeft = Date.now() - deferred.start;\r\n\r\n                this.sendIQ(\r\n                    deferred.iq,\r\n                    result => deferred.resolve(result),\r\n                    error => deferred.reject(error),\r\n                    timeLeft);\r\n            }\r\n        }\r\n\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\r\n     *\r\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\r\n     * @returns {void}\r\n     */\r\n    send(stanza) {\r\n        if (!this.connected) {\r\n            throw new Error('Not connected');\r\n        }\r\n        this._stropheConn.send(stanza);\r\n    }\r\n\r\n    /**\r\n     * Helper function to send IQ stanzas.\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the IQ.\r\n     */\r\n    sendIQ(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n\r\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\r\n     * which would fail immediately if disconnected).\r\n     *\r\n     * @param {Element} iq - The IQ to send.\r\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\r\n     * included, which means that the IQ may never be sent and still fail with a timeout.\r\n     */\r\n    sendIQ2(iq, { timeout }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.connected) {\r\n                this.sendIQ(\r\n                    iq,\r\n                    result => resolve(result),\r\n                    error => reject(error));\r\n            } else {\r\n                const deferred = {\r\n                    iq,\r\n                    resolve,\r\n                    reject,\r\n                    start: Date.now(),\r\n                    timeout: setTimeout(() => {\r\n                        // clears the IQ on timeout and invalidates the deferred task\r\n                        deferred.iq = undefined;\r\n\r\n                        // Strophe calls with undefined on timeout\r\n                        reject(undefined);\r\n                    }, timeout)\r\n                };\r\n\r\n                this._deferredIQs.push(deferred);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\r\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the presence.\r\n     */\r\n    sendPresence(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\r\n     *\r\n     * @returns {boolean} - true if the beacon was sent.\r\n     */\r\n    sendUnavailableBeacon() {\r\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\r\n            return false;\r\n        }\r\n\r\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\r\n        this._stropheConn.disconnecting = true;\r\n\r\n        const body = this._stropheConn._proto._buildBody()\r\n            .attrs({\r\n                type: 'terminate'\r\n            });\r\n        const pres = $pres({\r\n            xmlns: Strophe.NS.CLIENT,\r\n            type: 'unavailable'\r\n        });\r\n\r\n        body.cnode(pres.tree());\r\n\r\n        const res = navigator.sendBeacon(\r\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\r\n            Strophe.serialize(body.tree()));\r\n\r\n        logger.info(`Successfully send unavailable beacon ${res}`);\r\n\r\n        this._stropheConn._proto._abortAllRequests();\r\n        this._stropheConn._doDisconnect();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\r\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\r\n     * the token is present it means the connection can be resumed.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     */\r\n    _tryResumingConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\r\n\r\n        if (resumeToken) {\r\n            clearTimeout(this._resumeTimeout);\r\n\r\n            // FIXME detect internet offline\r\n            // The retry delay will be:\r\n            //   1st retry: 1.5s - 3s\r\n            //   2nd retry: 3s - 9s\r\n            //   3rd retry: 3s - 27s\r\n            this._resumeRetryN = Math.min(3, this._resumeRetryN + 1);\r\n            const retryTimeout = getJitterDelay(this._resumeRetryN, 1500, 3);\r\n\r\n            logger.info(`Will try to resume the XMPP connection in ${retryTimeout}ms`);\r\n\r\n            this._resumeTimeout = setTimeout(() => {\r\n                logger.info('Trying to resume the XMPP connection');\r\n\r\n                const url = new URL(this._stropheConn.service);\r\n                let { search } = url;\r\n\r\n                search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\r\n\r\n                url.search = search;\r\n\r\n                this._stropheConn.service = url.toString();\r\n\r\n                streamManagement.resume();\r\n            }, retryTimeout);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/**\r\n * The possible camera facing modes. For now support only 'user' and\r\n * 'environment' because 'left' and 'right' are not used anywhere in our\r\n * projects at the time of this writing. For more information please refer to\r\n * https://w3c.github.io/mediacapture-main/getusermedia.html\r\n * #def-constraint-facingMode.\r\n *\r\n * @enum {string}\r\n */\r\nconst CameraFacingMode = {\r\n    /**\r\n     * The mode which specifies the environment-facing camera.\r\n     */\r\n    ENVIRONMENT: 'environment',\r\n\r\n    /**\r\n     * The mode which specifies the user-facing camera.\r\n     */\r\n    USER: 'user'\r\n};\r\n\r\nmodule.exports = CameraFacingMode;\r\n","\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\r\nimport browser from '../browser';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nlet gumFunction = null;\r\n\r\n/**\r\n * Handles obtaining a stream from a screen capture on different browsers.\r\n */\r\nconst ScreenObtainer = {\r\n    /**\r\n     * If not <tt>null</tt> it means that the initialization process is still in\r\n     * progress. It is used to make desktop stream request wait and continue\r\n     * after it's done.\r\n     * {@type Promise|null}\r\n     */\r\n\r\n    obtainStream: null,\r\n\r\n    /**\r\n     * Initializes the function used to obtain a screen capture\r\n     * (this.obtainStream).\r\n     *\r\n     * @param {object} options\r\n     * @param {Function} gum GUM method\r\n     */\r\n    init(options = {}, gum) {\r\n        this.options = options;\r\n        gumFunction = gum;\r\n\r\n        this.obtainStream = this._createObtainStreamMethod();\r\n\r\n        if (!this.obtainStream) {\r\n            logger.info('Desktop sharing disabled');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns a method which will be used to obtain the screen sharing stream\r\n     * (based on the browser type).\r\n     *\r\n     * @returns {Function}\r\n     * @private\r\n     */\r\n    _createObtainStreamMethod() {\r\n        if (browser.isNWJS()) {\r\n            return (_, onSuccess, onFailure) => {\r\n                window.JitsiMeetNW.obtainDesktopStream(\r\n                    onSuccess,\r\n                    (error, constraints) => {\r\n                        let jitsiError;\r\n\r\n                        // FIXME:\r\n                        // This is very very dirty fix for recognising that the\r\n                        // user have clicked the cancel button from the Desktop\r\n                        // sharing pick window. The proper solution would be to\r\n                        // detect this in the NWJS application by checking the\r\n                        // streamId === \"\". Even better solution would be to\r\n                        // stop calling GUM from the NWJS app and just pass the\r\n                        // streamId to lib-jitsi-meet. This way the desktop\r\n                        // sharing implementation for NWJS and chrome extension\r\n                        // will be the same and lib-jitsi-meet will be able to\r\n                        // control the constraints, check the streamId, etc.\r\n                        //\r\n                        // I cannot find documentation about \"InvalidStateError\"\r\n                        // but this is what we are receiving from GUM when the\r\n                        // streamId for the desktop sharing is \"\".\r\n\r\n                        if (error && error.name === 'InvalidStateError') {\r\n                            jitsiError = new JitsiTrackError(\r\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\r\n                            );\r\n                        } else {\r\n                            jitsiError = new JitsiTrackError(\r\n                                error, constraints, [ 'desktop' ]);\r\n                        }\r\n                        (typeof onFailure === 'function')\r\n                            && onFailure(jitsiError);\r\n                    });\r\n            };\r\n        } else if (browser.isElectron()) {\r\n            return this.obtainScreenOnElectron;\r\n        } else if (browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMedia;\r\n        }\r\n        logger.log('Screen sharing not supported on ', browser.getName());\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Checks whether obtaining a screen capture is supported in the current\r\n     * environment.\r\n     * @returns {boolean}\r\n     */\r\n    isSupported() {\r\n        return this.obtainStream !== null;\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream on Electron.\r\n     *\r\n     * @param {Object} [options] - Screen sharing options.\r\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\r\n     * sources that have to be displayed in the desktop picker window ('screen',\r\n     * 'window', etc.).\r\n     * @param onSuccess - Success callback.\r\n     * @param onFailure - Failure callback.\r\n     */\r\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\r\n        if (window.JitsiMeetScreenObtainer\r\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\r\n            const { desktopSharingSources, gumOptions } = options;\r\n\r\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\r\n                {\r\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\r\n                },\r\n                (streamId, streamType, screenShareAudio = false) =>\r\n                    onGetStreamResponse(\r\n                        {\r\n                            response: {\r\n                                streamId,\r\n                                streamType,\r\n                                screenShareAudio\r\n                            },\r\n                            gumOptions\r\n                        },\r\n                        onSuccess,\r\n                        onFailure\r\n                    ),\r\n                err => onFailure(new JitsiTrackError(\r\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\r\n                    err\r\n                ))\r\n            );\r\n        } else {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\r\n        logger.info('Using getDisplayMedia for screen sharing');\r\n\r\n        let getDisplayMedia;\r\n\r\n        if (navigator.getDisplayMedia) {\r\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\r\n        } else {\r\n            // eslint-disable-next-line max-len\r\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\r\n        }\r\n\r\n        getDisplayMedia({ video: true,\r\n            audio: true })\r\n            .then(stream => {\r\n                let applyConstraintsPromise;\r\n\r\n                if (stream\r\n                    && stream.getTracks()\r\n                    && stream.getTracks().length > 0) {\r\n                    const videoTrack = stream.getVideoTracks()[0];\r\n\r\n                    // Apply video track constraint.\r\n                    if (videoTrack) {\r\n                        applyConstraintsPromise = videoTrack.applyConstraints(options.trackOptions);\r\n                    }\r\n                } else {\r\n                    applyConstraintsPromise = Promise.resolve();\r\n                }\r\n\r\n                applyConstraintsPromise.then(() =>\r\n                    callback({\r\n                        stream,\r\n                        sourceId: stream.id\r\n                    }));\r\n            })\r\n            .catch(() =>\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\r\n                    .SCREENSHARING_USER_CANCELED)));\r\n    }\r\n};\r\n\r\n/**\r\n * Handles response from external application / extension and calls GUM to\r\n * receive the desktop streams or reports error.\r\n * @param {object} options\r\n * @param {object} options.response\r\n * @param {string} options.response.streamId - the streamId for the desktop\r\n * stream.\r\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n * @param {string} options.response.error - error to be reported.\r\n * @param {object} options.gumOptions - options passed to GUM.\r\n * @param {Function} onSuccess - callback for success.\r\n * @param {Function} onFailure - callback for failure.\r\n * @param {object} gumOptions - options passed to GUM.\r\n */\r\nfunction onGetStreamResponse(\r\n        options = {\r\n            response: {},\r\n            gumOptions: {}\r\n        },\r\n        onSuccess,\r\n        onFailure) {\r\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\r\n\r\n    if (streamId) {\r\n        const gumOptions = {\r\n            desktopStream: streamId,\r\n            screenShareAudio,\r\n            ...options.gumOptions\r\n        };\r\n\r\n        gumFunction([ 'desktop' ], gumOptions)\r\n            .then(stream => onSuccess({\r\n                stream,\r\n                sourceId: streamId,\r\n                sourceType: streamType\r\n            }), onFailure);\r\n    } else {\r\n        // As noted in Chrome Desktop Capture API:\r\n        // If user didn't select any source (i.e. canceled the prompt)\r\n        // then the callback is called with an empty streamId.\r\n        if (streamId === '') {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n\r\n            return;\r\n        }\r\n\r\n        onFailure(new JitsiTrackError(\r\n            JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR,\r\n            error));\r\n    }\r\n}\r\n\r\nexport default ScreenObtainer;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default value of 500 milliseconds for\r\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\r\n\r\n/**\r\n * Default value of 2000 milliseconds for\r\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\r\n\r\n/**\r\n * The time to wait a track to be restored. Track which was out of lastN\r\n * should be inactive and when entering lastN it becomes restoring and when\r\n * data is received from bridge it will become active, but if no data is\r\n * received for some time we set status of that participant connection to\r\n * interrupted.\r\n * @type {number}\r\n */\r\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\r\n\r\n/**\r\n * Participant connection statuses.\r\n *\r\n * @type {{\r\n *      ACTIVE: string,\r\n *      INACTIVE: string,\r\n *      INTERRUPTED: string,\r\n *      RESTORING: string\r\n * }}\r\n */\r\nexport const ParticipantConnectionStatus = {\r\n    /**\r\n     * Status indicating that connection is currently active.\r\n     */\r\n    ACTIVE: 'active',\r\n\r\n    /**\r\n     * Status indicating that connection is currently inactive.\r\n     * Inactive means the connection was stopped on purpose from the bridge,\r\n     * like exiting lastN or adaptivity decided to drop video because of not\r\n     * enough bandwidth.\r\n     */\r\n    INACTIVE: 'inactive',\r\n\r\n    /**\r\n     * Status indicating that connection is currently interrupted.\r\n     */\r\n    INTERRUPTED: 'interrupted',\r\n\r\n    /**\r\n     * Status indicating that connection is currently restoring.\r\n     */\r\n    RESTORING: 'restoring'\r\n};\r\n\r\n/**\r\n * Class is responsible for emitting\r\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\r\n */\r\nexport default class ParticipantConnectionStatusHandler {\r\n    /* eslint-disable max-params*/\r\n    /**\r\n     * Calculates the new {@link ParticipantConnectionStatus} based on\r\n     * the values given for some specific remote user. It is assumed that\r\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\r\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\r\n     * data from the user for the last 15 seconds.\r\n     * @param {boolean} isInLastN indicates whether the user is in the last N\r\n     * set. When set to false it means that JVB is not sending any video for\r\n     * the user.\r\n     * @param {boolean} isRestoringTimedout if true it means that the user has\r\n     * been outside of last N too long to be considered\r\n     * {@link ParticipantConnectionStatus.RESTORING}.\r\n     * @param {boolean} isVideoMuted true if the user is video muted and we\r\n     * should not expect to receive any video.\r\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\r\n     * frozen detection then it will be set to true when the video track is\r\n     * frozen. If the current browser does not support frozen detection the it's\r\n     * always false.\r\n     * @return {ParticipantConnectionStatus} the new connection status for\r\n     * the user for whom the values above were provided.\r\n     * @private\r\n     */\r\n    static _getNewStateForJvbMode(\r\n            isConnectionActiveByJvb,\r\n            isInLastN,\r\n            isRestoringTimedout,\r\n            isVideoMuted,\r\n            isVideoTrackFrozen) {\r\n        if (!isConnectionActiveByJvb) {\r\n            // when there is a connection problem signaled from jvb\r\n            // it means no media was flowing for at least 15secs, so both audio\r\n            // and video are most likely interrupted\r\n            return ParticipantConnectionStatus.INTERRUPTED;\r\n        } else if (isVideoMuted) {\r\n            // If the connection is active according to JVB and the user is\r\n            // video muted there is no way for the connection to be inactive,\r\n            // because the detection logic below only makes sense for video.\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        // Logic when isVideoTrackFrozen is supported\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            if (!isVideoTrackFrozen) {\r\n                // If the video is playing we're good\r\n                return ParticipantConnectionStatus.ACTIVE;\r\n            } else if (isInLastN) {\r\n                return isRestoringTimedout\r\n                    ? ParticipantConnectionStatus.INTERRUPTED\r\n                    : ParticipantConnectionStatus.RESTORING;\r\n            }\r\n\r\n            return ParticipantConnectionStatus.INACTIVE;\r\n        }\r\n\r\n        // Because this browser is incapable of detecting frozen video we must\r\n        // rely on the lastN value\r\n        return isInLastN\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INACTIVE;\r\n    }\r\n\r\n    /* eslint-enable max-params*/\r\n\r\n    /**\r\n     * In P2P mode we don't care about any values coming from the JVB and\r\n     * the connection status can be only active or interrupted.\r\n     * @param {boolean} isVideoMuted the user if video muted\r\n     * @param {boolean} isVideoTrackFrozen true if the video track for\r\n     * the remote user is currently frozen. If the current browser does not\r\n     * support video frozen detection then it's always false.\r\n     * @return {ParticipantConnectionStatus}\r\n     * @private\r\n     */\r\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            // There's no way to detect problems in P2P when there's no video\r\n            // track frozen detection...\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        return isVideoMuted || !isVideoTrackFrozen\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INTERRUPTED;\r\n    }\r\n\r\n    /**\r\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\r\n     *\r\n     * @constructor\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {JitsiConference} conference parent conference instance\r\n     * @param {Object} options\r\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\r\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\r\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n     */\r\n    constructor(rtc, conference, options) {\r\n        this.rtc = rtc;\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\r\n         * window.setTimeout.\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.trackTimers = {};\r\n\r\n        /**\r\n         * This map holds the endpoint connection status received from the JVB\r\n         * (as it might be different than the one stored in JitsiParticipant).\r\n         * Required for getting back in sync when remote video track is removed.\r\n         * @type {Object.<string, boolean>}\r\n         */\r\n        this.connStatusFromJvb = { };\r\n\r\n        /**\r\n         * If video track frozen detection through RTC mute event is supported,\r\n         * we wait some time until video track is considered frozen. But because\r\n         * when the user falls out of last N it is expected for the video to\r\n         * freeze this timeout must be significantly reduced in \"out of last N\"\r\n         * case.\r\n         *\r\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\r\n         * user is not in last N.\r\n         * @type {number}\r\n         */\r\n        this.outOfLastNTimeout\r\n            = typeof options.outOfLastNTimeout === 'number'\r\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\r\n\r\n        /**\r\n         * How long we're going to wait after the RTC video track muted event\r\n         * for the corresponding signalling mute event, before the connection\r\n         * interrupted is fired. The default value is\r\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\r\n         *\r\n         * @type {number} amount of time in milliseconds\r\n         */\r\n        this.rtcMuteTimeout\r\n            = typeof options.rtcMuteTimeout === 'number'\r\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\r\n\r\n        /**\r\n         * This map holds a timestamp indicating  when participant's video track\r\n         * was RTC muted (it is assumed that each participant can have only 1\r\n         * video track at a time). The purpose of storing the timestamp is to\r\n         * avoid the transition to disconnected status in case of legitimate\r\n         * video mute operation where the signalling video muted event can\r\n         * arrive shortly after RTC muted event.\r\n         *\r\n         * The key is participant's ID which is the same as endpoint id in\r\n         * the Colibri conference allocated on the JVB.\r\n         *\r\n         * The value is a timestamp measured in milliseconds obtained with\r\n         * <tt>Date.now()</tt>.\r\n         *\r\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n         *       implemented in JitsiLocalTrack by extending the event to\r\n         *       the remote track and allowing to set different timeout for\r\n         *       local and remote tracks.\r\n         *\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.rtcMutedTimestamp = { };\r\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\r\n\r\n        /**\r\n         * This map holds the timestamps indicating when participant's video\r\n         * entered lastN set. Participants entering lastN will have connection\r\n         * status restoring and when we start receiving video will become\r\n         * active, but if video is not received for certain time\r\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\r\n         * will become interrupted.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.enteredLastNTimestamp = new Map();\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\r\n         * scheduled using window.setTimeout.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.restoringTimers = new Map();\r\n\r\n        /**\r\n         * A map that holds the current connection status (along with all the internal events that happen\r\n         * while in that state).\r\n         *\r\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\r\n         */\r\n        this.connectionStatusMap = new Map();\r\n    }\r\n\r\n    /**\r\n     * Gets the video frozen timeout for given user.\r\n     * @param {string} id endpoint/participant ID\r\n     * @return {number} how long are we going to wait since RTC video muted\r\n     * even, before a video track is considered frozen.\r\n     * @private\r\n     */\r\n    _getVideoFrozenTimeout(id) {\r\n        return this.rtc.isInLastN(id)\r\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\r\n    }\r\n\r\n    /**\r\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\r\n     * listeners.\r\n     */\r\n    init() {\r\n\r\n        this._onEndpointConnStatusChanged\r\n            = this.onEndpointConnStatusChanged.bind(this);\r\n\r\n        this.rtc.addListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        // Handles P2P status changes\r\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        // Used to send analytics events for the participant that left the call.\r\n        this._onUserLeft = this.onUserLeft.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\r\n        // events for video type tracks when they stop receiving data which is\r\n        // often a sign that remote user is having connectivity issues\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n\r\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\r\n\r\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\r\n\r\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\r\n            // event handlers\r\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n\r\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n\r\n            // Listened which will be bound to JitsiRemoteTrack to listen for\r\n            // signalling mute/unmute events.\r\n            this._onSignallingMuteChanged\r\n                = this.onSignallingMuteChanged.bind(this);\r\n\r\n            // Used to send an analytics event when the video type changes.\r\n            this._onTrackVideoTypeChanged\r\n                = this.onTrackVideoTypeChanged.bind(this);\r\n        }\r\n\r\n        this._onLastNChanged = this._onLastNChanged.bind(this);\r\n        this.conference.on(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this._onLastNValueChanged\r\n            = this.refreshConnectionStatusForAll.bind(this);\r\n        this.rtc.on(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners and disposes of all resources held by this\r\n     * instance.\r\n     */\r\n    dispose() {\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE,\r\n                this._onTrackRtcMuted);\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE,\r\n                this._onTrackRtcUnmuted);\r\n\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n        }\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        const participantIds = Object.keys(this.trackTimers);\r\n\r\n        for (const participantId of participantIds) {\r\n            this.clearTimeout(participantId);\r\n            this.clearRtcMutedTimestamp(participantId);\r\n        }\r\n\r\n        for (const id in this.connectionStatusMap) {\r\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\r\n                this.onUserLeft(id);\r\n            }\r\n        }\r\n\r\n        // Clear RTC connection status cache\r\n        this.connStatusFromJvb = {};\r\n    }\r\n\r\n    /**\r\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\r\n     * notification over the data channel from the bridge about endpoint's\r\n     * connection status update.\r\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\r\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\r\n     */\r\n    onEndpointConnStatusChanged(endpointId, isActive) {\r\n\r\n        logger.debug(\r\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\r\n                endpointId}: ${isActive}`);\r\n\r\n        // Filter out events for the local JID for now\r\n        if (endpointId !== this.conference.myUserId()) {\r\n            // Store the status received over the data channels\r\n            this.connStatusFromJvb[endpointId] = isActive;\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes connection status.\r\n     * @param {JitsiParticipant} participant\r\n     * @param newStatus\r\n     */\r\n    _changeConnectionStatus(participant, newStatus) {\r\n        if (participant.getConnectionStatus() !== newStatus) {\r\n\r\n            const endpointId = participant.getId();\r\n\r\n            participant._setConnectionStatus(newStatus);\r\n\r\n            logger.debug(\r\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\r\n                    newStatus}`);\r\n\r\n            // Log the event on CallStats\r\n            Statistics.sendLog(\r\n                JSON.stringify({\r\n                    id: 'peer.conn.status',\r\n                    participant: endpointId,\r\n                    status: newStatus\r\n                }));\r\n\r\n\r\n            this.conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\r\n                endpointId, newStatus);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the postponed \"connection interrupted\" event which was previously\r\n     * scheduled as a timeout on RTC 'onmute' event.\r\n     *\r\n     * @param {string} participantId - The participant for which the \"connection\r\n     * interrupted\" timeout was scheduled.\r\n     */\r\n    clearTimeout(participantId) {\r\n        if (this.trackTimers[participantId]) {\r\n            window.clearTimeout(this.trackTimers[participantId]);\r\n            this.trackTimers[participantId] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the timestamp of the RTC muted event for participant's video track\r\n     * @param {string} participantId the id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    clearRtcMutedTimestamp(participantId) {\r\n        this.rtcMutedTimestamp[participantId] = null;\r\n    }\r\n\r\n    /**\r\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\r\n     * a new one is added to the conference.\r\n     *\r\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\r\n     * the conference.\r\n     */\r\n    onRemoteTrackAdded(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            logger.debug(\r\n                `Detector on remote track added for: ${\r\n                    remoteTrack.getParticipantId()}`);\r\n\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\r\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners bound to the remote video track and clears\r\n     * any related timeouts.\r\n     *\r\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\r\n     * removed from the conference.\r\n     */\r\n    onRemoteTrackRemoved(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            const endpointId = remoteTrack.getParticipantId();\r\n\r\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\r\n\r\n            remoteTrack.off(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n\r\n            this.clearTimeout(endpointId);\r\n            this.clearRtcMutedTimestamp(endpointId);\r\n\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if given participant's video is considered frozen.\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\r\n     * participant or <tt>false</tt> when it's either not considered frozen\r\n     * (yet) or if freeze detection is not supported by the current browser.\r\n     *\r\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n     *       implemented in JitsiLocalTrack by extending the event to\r\n     *       the remote track and allowing to set different timeout for\r\n     *       local and remote tracks.\r\n     *\r\n     */\r\n    isVideoTrackFrozen(participant) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            return false;\r\n        }\r\n\r\n        const id = participant.getId();\r\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\r\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\r\n        const timeout = this._getVideoFrozenTimeout(id);\r\n\r\n        return hasAnyVideoRTCMuted\r\n            && typeof rtcMutedTimestamp === 'number'\r\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\r\n    }\r\n\r\n    /**\r\n     * Goes over every participant and updates connectivity status.\r\n     * Should be called when a parameter which affects all of the participants\r\n     * is changed (P2P for example).\r\n     */\r\n    refreshConnectionStatusForAll() {\r\n        const participants = this.conference.getParticipants();\r\n\r\n        for (const participant of participants) {\r\n            this.figureOutConnectionStatus(participant.getId());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Figures out (and updates) the current connectivity status for\r\n     * the participant identified by the given id.\r\n     *\r\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\r\n     */\r\n    figureOutConnectionStatus(id) {\r\n        const participant = this.conference.getParticipantById(id);\r\n\r\n        if (!participant) {\r\n            // Probably the participant is no longer in the conference\r\n            // (at the time of writing this code, participant is\r\n            // detached from the conference and TRACK_REMOVED events are\r\n            // fired),\r\n            // so we don't care, but let's print a log message for debugging purposes.\r\n            logger.debug(`figure out conn status - no participant for: ${id}`);\r\n\r\n            return;\r\n        }\r\n\r\n        const inP2PMode = this.conference.isP2PActive();\r\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\r\n        const audioOnlyMode = this.rtc.getLastN() === 0;\r\n\r\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\r\n        // any detection based on video playback or the last N.\r\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\r\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\r\n        const isInLastN = this.rtc.isInLastN(id);\r\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\r\n\r\n        if (typeof isConnActiveByJvb !== 'boolean') {\r\n            // If no status was received from the JVB it means that it's active\r\n            // (the bridge does not send notification unless there is a problem)\r\n            logger.debug('Assuming connection active by JVB - no notification');\r\n            isConnActiveByJvb = true;\r\n        }\r\n\r\n        const newState\r\n            = inP2PMode\r\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen)\r\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\r\n                    isConnActiveByJvb,\r\n                    isInLastN,\r\n                    isRestoringTimedOut,\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen);\r\n\r\n        // if the new state is not restoring clear timers and timestamps\r\n        // that we use to track the restoring state\r\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\r\n            this._clearRestoringTimer(id);\r\n        }\r\n\r\n        logger.debug(\r\n            `Figure out conn status for ${id}, is video muted: ${\r\n                isVideoMuted} is active(jvb): ${\r\n                isConnActiveByJvb} video track frozen: ${\r\n                isVideoTrackFrozen} p2p mode: ${\r\n                inP2PMode} is in last N: ${\r\n                isInLastN} currentStatus => newStatus: ${\r\n                participant.getConnectionStatus()} => ${newState}`);\r\n\r\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\r\n\r\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\r\n        // since the last time this code block run).\r\n        if (!('p2p' in oldConnectionStatus)\r\n            || !('connectionStatus' in oldConnectionStatus)\r\n            || oldConnectionStatus.p2p !== inP2PMode\r\n            || oldConnectionStatus.connectionStatus !== newState) {\r\n\r\n            const nowMs = Date.now();\r\n\r\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n            this.connectionStatusMap[id] = {\r\n                ...oldConnectionStatus,\r\n                connectionStatus: newState,\r\n                p2p: inP2PMode,\r\n                startedMs: nowMs\r\n            };\r\n\r\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\r\n            // video type is not in oldConnectionStatus.\r\n            if (!('videoType' in this.connectionStatusMap[id])) {\r\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n\r\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\r\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\r\n                }\r\n            }\r\n        }\r\n        this._changeConnectionStatus(participant, newState);\r\n    }\r\n\r\n    /**\r\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\r\n     * in the INTERRUPTED state) and sends a participant connection status event.\r\n     * @param {string} id - The jid of the participant.\r\n     * @param {Number} nowMs - The current time (in millis).\r\n     * @returns {void}\r\n     */\r\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\r\n        const participantConnectionStatus = this.connectionStatusMap[id];\r\n\r\n        if (participantConnectionStatus\r\n            && 'startedMs' in participantConnectionStatus\r\n            && 'videoType' in participantConnectionStatus\r\n            && 'connectionStatus' in participantConnectionStatus\r\n            && 'p2p' in participantConnectionStatus) {\r\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\r\n            Statistics.sendAnalytics(\r\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On change in Last N set check all leaving and entering participants to\r\n     * change their corresponding statuses.\r\n     *\r\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\r\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\r\n     * @private\r\n     */\r\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\r\n        const now = Date.now();\r\n\r\n        logger.debug(\r\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\r\n\r\n        for (const id of leavingLastN) {\r\n            this.enteredLastNTimestamp.delete(id);\r\n            this._clearRestoringTimer(id);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n        for (const id of enteringLastN) {\r\n            // store the timestamp this id is entering lastN\r\n            this.enteredLastNTimestamp.set(id, now);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the restoring timer for participant's video track and the\r\n     * timestamp for entering lastN.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    _clearRestoringTimer(participantId) {\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (rTimer) {\r\n            clearTimeout(rTimer);\r\n            this.restoringTimers.delete(participantId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a track had stayed enough in restoring state, compares\r\n     * current time and the time the track entered in lastN. If it hasn't\r\n     * timedout and there is no timer added, add new timer in order to give it\r\n     * more time to become active or mark it as interrupted on next check.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\r\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\r\n     * set its status to interrupted.\r\n     * @private\r\n     */\r\n    _isRestoringTimedout(participantId) {\r\n        const enteredLastNTimestamp\r\n            = this.enteredLastNTimestamp.get(participantId);\r\n\r\n        if (enteredLastNTimestamp\r\n            && (Date.now() - enteredLastNTimestamp)\r\n                >= DEFAULT_RESTORING_TIMEOUT) {\r\n            return true;\r\n        }\r\n\r\n        // still haven't reached timeout, if there is no timer scheduled,\r\n        // schedule one so we can track the restoring state and change it after\r\n        // reaching the timeout\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (!rTimer) {\r\n            this.restoringTimers.set(participantId, setTimeout(\r\n                () => this.figureOutConnectionStatus(participantId),\r\n                DEFAULT_RESTORING_TIMEOUT));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sends a last/final participant connection status event for the participant that left the conference.\r\n     * @param {string} id - The id of the participant that left the conference.\r\n     * @returns {void}\r\n     */\r\n    onUserLeft(id) {\r\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\r\n        delete this.connectionStatusMap[id];\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\r\n     * will be processed.\r\n     */\r\n    onTrackRtcMuted(track) {\r\n        const participantId = track.getParticipantId();\r\n        const participant = this.conference.getParticipantById(participantId);\r\n\r\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\r\n        if (!participant) {\r\n            logger.error(`No participant for id: ${participantId}`);\r\n\r\n            return;\r\n        }\r\n        this.rtcMutedTimestamp[participantId] = Date.now();\r\n        if (!participant.isVideoMuted()) {\r\n            // If the user is not muted according to the signalling we'll give\r\n            // it some time, before the connection interrupted event is\r\n            // triggered.\r\n            this.clearTimeout(participantId);\r\n\r\n            // The timeout is reduced when user is not in the last N\r\n            const timeout = this._getVideoFrozenTimeout(participantId);\r\n\r\n            this.trackTimers[participantId] = window.setTimeout(() => {\r\n                logger.debug(\r\n                    `Set RTC mute timeout for: ${participantId}\\\r\n                     of ${timeout} ms`);\r\n                this.clearTimeout(participantId);\r\n                this.figureOutConnectionStatus(participantId);\r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onunmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\r\n     * event will be processed.\r\n     */\r\n    onTrackRtcUnmuted(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\r\n\r\n        this.clearTimeout(participantId);\r\n        this.clearRtcMutedTimestamp(participantId);\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The remote video track for which\r\n     * the signalling mute/unmute event will be processed.\r\n     */\r\n    onSignallingMuteChanged(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector on track signalling mute changed: ${participantId}`,\r\n            track.isMuted());\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Sends a participant connection status event as a result of the video type\r\n     * changing.\r\n     * @param {JitsiRemoteTrack} track - The track.\r\n     * @param {VideoType} type - The video type.\r\n     * @returns {void}\r\n     */\r\n    onTrackVideoTypeChanged(track, type) {\r\n        const id = track.getParticipantId();\r\n        const nowMs = Date.now();\r\n\r\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n        this.connectionStatusMap[id] = {\r\n            ...this.connectionStatusMap[id] || {},\r\n            videoType: type,\r\n            startedMs: nowMs\r\n        };\r\n    }\r\n}\r\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Module provides information about the current status of the internet\r\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\r\n * online/offline, but rather it relies on the information supplied by the app\r\n * that uses it. By default the online state is assumed and the lib acts as if\r\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\r\n */\r\nexport class NetworkInfo extends Listenable {\r\n    /**\r\n     * Creates new {@link NetworkInfo} instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._current = {\r\n            isOnline: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the network info state.\r\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\r\n     */\r\n    updateNetworkInfo({ isOnline }) {\r\n        logger.debug('updateNetworkInfo', { isOnline });\r\n        this._current = {\r\n            isOnline: isOnline === true\r\n        };\r\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\r\n    }\r\n\r\n    /**\r\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\r\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\r\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\r\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\r\n     * @returns {boolean}\r\n     */\r\n    isOnline() {\r\n        return this._current.isOnline === true;\r\n    }\r\n}\r\n\r\nconst networkInfo = new NetworkInfo();\r\n\r\nexport default networkInfo;\r\n","/**\r\n * A collection of utility functions for taking in XML and parsing it to return\r\n * certain values.\r\n */\r\nexport default {\r\n    /**\r\n     * Parses the presence update of the focus and returns an object with the\r\n     * statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getFocusRecordingUpdate(presence) {\r\n        const jibriStatus = presence\r\n            && presence.getElementsByTagName('jibri-recording-status')[0];\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        return {\r\n            error: jibriStatus.getAttribute('failure_reason'),\r\n            initiator: jibriStatus.getAttribute('initiator'),\r\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\r\n            sessionID: jibriStatus.getAttribute('session_id'),\r\n            status: jibriStatus.getAttribute('status')\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Parses the presence update from a hidden domain participant and returns\r\n     * an object with the statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getHiddenDomainUpdate(presence) {\r\n        const liveStreamViewURLContainer\r\n            = presence.getElementsByTagName('live-stream-view-url')[0];\r\n        const liveStreamViewURL = liveStreamViewURLContainer\r\n            && liveStreamViewURLContainer.textContent;\r\n        const modeContainer\r\n            = presence.getElementsByTagName('mode')[0];\r\n        const mode = modeContainer\r\n            && modeContainer.textContent\r\n            && modeContainer.textContent.toLowerCase();\r\n        const sessionIDContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionID\r\n            = sessionIDContainer && sessionIDContainer.textContent;\r\n\r\n        return {\r\n            liveStreamViewURL,\r\n            mode,\r\n            sessionID\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a successful IQ.\r\n     *\r\n     * @param {Node} response - The response from the IQ.\r\n     * @returns {string} The session ID of the recording session.\r\n     */\r\n    getSessionIdFromIq(response) {\r\n        const jibri = response && response.getElementsByTagName('jibri')[0];\r\n\r\n        return jibri && jibri.getAttribute('session_id');\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a presence, if it exists.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {string|undefined} The session ID of the recording session.\r\n     */\r\n    getSessionId(presence) {\r\n        const sessionIdContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\r\n\r\n        return sessionId;\r\n    },\r\n\r\n    /**\r\n     * Returns whether or not a presence is from the focus.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {boolean} True if the presence is from the focus.\r\n     */\r\n    isFromFocus(presence) {\r\n        return presence.getAttribute('from').includes('focus');\r\n    }\r\n};\r\n","/* global __filename, $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport {\r\n    ICE_DURATION,\r\n    ICE_STATE_CHANGED\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport AsyncQueue from '../util/AsyncQueue';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport { integerHash } from '../util/StringUtils';\r\n\r\nimport browser from './../browser';\r\nimport JingleSession from './JingleSession';\r\nimport * as JingleSessionState from './JingleSessionState';\r\nimport MediaSessionEvents from './MediaSessionEvents';\r\nimport SDP from './SDP';\r\nimport SDPDiffer from './SDPDiffer';\r\nimport SDPUtil from './SDPUtil';\r\nimport SignalingLayerImpl from './SignalingLayerImpl';\r\nimport XmppConnection from './XmppConnection';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Constant tells how long we're going to wait for IQ response, before timeout\r\n * error is  triggered.\r\n * @type {number}\r\n */\r\nconst IQ_TIMEOUT = 10000;\r\n\r\n/*\r\n * The default number of samples (per stat) to keep when webrtc stats gathering\r\n * is enabled in TraceablePeerConnection.\r\n */\r\nconst DEFAULT_MAX_STATS = 300;\r\n\r\n/**\r\n * @typedef {Object} JingleSessionPCOptions\r\n * @property {Object} abTesting - A/B testing related options (ask George).\r\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\r\n * video test ?(ask George).\r\n * @property {boolean} disableH264 - Described in the config.js[1].\r\n * @property {boolean} disableRtx - Described in the config.js[1].\r\n * @property {boolean} disableSimulcast - Described in the config.js[1].\r\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\r\n * on the PeerConnection.\r\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\r\n * @property {boolean} failICE - it's an option used in the tests. Set to\r\n * <tt>true</tt> to block any real candidates and make the ICE fail.\r\n * @property {boolean} gatherStats - Described in the config.js[1].\r\n * @property {object} p2p - Peer to peer related options (FIXME those could be\r\n * fetched from config.p2p on the upper level).\r\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\r\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\r\n * @property {boolean} preferH264 - Described in the config.js[1].\r\n * @property {Object} testing - Testing and/or experimental options.\r\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\r\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\r\n *\r\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\r\n */\r\n/**\r\n *\r\n */\r\nexport default class JingleSessionPC extends JingleSession {\r\n    /**\r\n     * Parses 'senders' attribute of the video content.\r\n     * @param {jQuery} jingleContents\r\n     * @return {string|null} one of the values of content \"senders\" attribute\r\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\r\n     * invalid then <tt>null</tt> will be returned.\r\n     * @private\r\n     */\r\n    static parseVideoSenders(jingleContents) {\r\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\r\n\r\n        if (videoContents.length) {\r\n            const senders = videoContents[0].getAttribute('senders');\r\n\r\n            if (senders === 'both'\r\n                || senders === 'initiator'\r\n                || senders === 'responder'\r\n                || senders === 'none') {\r\n                return senders;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the video max frame height value out of the 'content-modify' IQ.\r\n     *\r\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\r\n     * @returns {Number|null}\r\n     */\r\n    static parseMaxFrameHeight(jingleContents) {\r\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\r\n\r\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt>\r\n     * @param {string} sid the Jingle Session ID - random string which\r\n     * identifies the session\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid remote peer JID\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param mediaConstraints the media constraints object passed to\r\n     * createOffer/Answer, as defined by the WebRTC standard\r\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\r\n     * standard.\r\n     * @param {boolean} isP2P indicates whether this instance is\r\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\r\n     * if it's a JVB connection.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     * @constructor\r\n     *\r\n     * @implements {SignalingLayer}\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isP2P,\r\n            isInitiator) {\r\n        super(\r\n            sid,\r\n            localJid,\r\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\r\n\r\n        /**\r\n         * The bridge session's identifier. One Jingle session can during\r\n         * it's lifetime participate in multiple bridge sessions managed by\r\n         * Jicofo. A new bridge session is started whenever Jicofo sends\r\n         * 'session-initiate' or 'transport-replace'.\r\n         *\r\n         * @type {?string}\r\n         * @private\r\n         */\r\n        this._bridgeSessionId = null;\r\n\r\n        /**\r\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedOldLocalSdp = undefined;\r\n\r\n        /**\r\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * ICE enters 'checking' state.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._iceCheckingStartedTimestamp = null;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * first ICE candidate is spawned by the peerconnection to mark when\r\n         * ICE gathering started. That's, because ICE gathering state changed\r\n         * events are not supported by most of the browsers, so we try something\r\n         * that will work everywhere. It may not be as accurate, but given that\r\n         * 'host' candidate usually comes first, the delay should be minimal.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._gatheringStartedTimestamp = null;\r\n\r\n        /**\r\n         * Local preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.localRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * Indicates whether or not this session is willing to send/receive\r\n         * video media. When set to <tt>false</tt> the underlying peer\r\n         * connection will disable local video transfer and the remote peer will\r\n         * be will be asked to stop sending video via 'content-modify' IQ\r\n         * (the senders attribute of video contents will be adjusted\r\n         * accordingly). Note that this notification is sent only in P2P\r\n         * session, because Jicofo does not support it yet. Obviously when\r\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\r\n         * notification will be sent to resume video transfer on the remote\r\n         * side.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._localVideoActive = true;\r\n\r\n        /**\r\n         * Indicates whether or not the remote peer has video transfer active.\r\n         * When set to <tt>true</tt> it means that remote peer is neither\r\n         * sending nor willing to receive video. In such case we'll ask\r\n         * our peerconnection to stop sending video by calling\r\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\r\n         * <tt>false</tt>.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._remoteVideoActive = true;\r\n\r\n        /**\r\n         * Marks that ICE gathering duration has been reported already. That\r\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\r\n         * conference migration/ICE restart).\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._gatheringReported = false;\r\n\r\n        this.lasticecandidate = false;\r\n        this.closed = false;\r\n\r\n        /**\r\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\r\n         * a peer to peer type of session.\r\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\r\n         * session or <tt>false</tt> if it's a JVB session\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * Remote preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.remoteRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The signaling layer implementation.\r\n         * @type {SignalingLayerImpl}\r\n         */\r\n        this.signalingLayer = new SignalingLayerImpl();\r\n\r\n        /**\r\n         * The queue used to serialize operations done on the peerconnection.\r\n         *\r\n         * @type {AsyncQueue}\r\n         */\r\n        this.modificationQueue = new AsyncQueue();\r\n\r\n        /**\r\n         * Flag used to guarantee that the connection established event is\r\n         * triggered just once.\r\n         * @type {boolean}\r\n         */\r\n        this.wasConnected = false;\r\n\r\n        /**\r\n         * Keeps track of how long (in ms) it took from ICE start to ICE\r\n         * connect.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.establishmentDuration = undefined;\r\n\r\n        this._xmppListeners = [];\r\n        this._xmppListeners.push(\r\n            connection.addEventListener(\r\n                XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                this.onXmppStatusChanged.bind(this))\r\n        );\r\n\r\n        this._removeSenderVideoConstraintsChangeListener = undefined;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Checks whether or not this session instance is still operational.\r\n     * @private\r\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\r\n     */\r\n    _assertNotEnded() {\r\n        return this.state !== JingleSessionState.ENDED;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @param {JingleSessionPCOptions} options  - a set of config options.\r\n     */\r\n    doInitialize(options) {\r\n        this.failICE = Boolean(options.failICE);\r\n        this.lasticecandidate = false;\r\n        this.options = options;\r\n\r\n        /**\r\n         * {@code true} if reconnect is in progress.\r\n         * @type {boolean}\r\n         */\r\n        this.isReconnect = false;\r\n\r\n        /**\r\n         * Set to {@code true} if the connection was ever stable\r\n         * @type {boolean}\r\n         */\r\n        this.wasstable = false;\r\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\r\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\r\n\r\n        const pcOptions = { disableRtx: options.disableRtx };\r\n\r\n        if (options.gatherStats) {\r\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\r\n        }\r\n        pcOptions.capScreenshareBitrate = false;\r\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\r\n\r\n        if (this.isP2P) {\r\n            // simulcast needs to be disabled for P2P (121) calls\r\n            pcOptions.disableSimulcast = true;\r\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\r\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\r\n\r\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\r\n\r\n            if (typeof abtestSuspendVideo !== 'undefined') {\r\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\r\n            }\r\n        } else {\r\n            // H264 does not support simulcast, so it needs to be disabled.\r\n            pcOptions.disableSimulcast\r\n                = options.disableSimulcast\r\n                    || (options.preferH264 && !options.disableH264);\r\n            pcOptions.preferH264 = options.preferH264;\r\n\r\n            // disable simulcast for screenshare and set the max bitrate to\r\n            // 500Kbps if the testing flag is present in config.js.\r\n            if (options.testing\r\n                && options.testing.capScreenshareBitrate\r\n                && typeof options.testing.capScreenshareBitrate === 'number') {\r\n                pcOptions.capScreenshareBitrate\r\n                    = Math.random()\r\n                    < options.testing.capScreenshareBitrate;\r\n\r\n                // add the capScreenshareBitrate to the permanent properties so\r\n                // that it's included with every event that we send to the\r\n                // analytics backend.\r\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\r\n            }\r\n        }\r\n\r\n        if (options.startSilent) {\r\n            pcOptions.startSilent = true;\r\n        }\r\n\r\n        this.peerconnection\r\n            = this.rtc.createPeerConnection(\r\n                    this.signalingLayer,\r\n                    this.iceConfig,\r\n                    this.isP2P,\r\n                    pcOptions);\r\n\r\n        this.peerconnection.onicecandidate = ev => {\r\n            if (!ev) {\r\n                // There was an incomplete check for ev before which left\r\n                // the last line of the function unprotected from a potential\r\n                // throw of an exception. Consequently, it may be argued that\r\n                // the check is unnecessary. Anyway, I'm leaving it and making\r\n                // the check complete.\r\n                return;\r\n            }\r\n\r\n            // XXX this is broken, candidate is not parsed.\r\n            const candidate = ev.candidate;\r\n            const now = window.performance.now();\r\n\r\n            if (candidate) {\r\n                if (this._gatheringStartedTimestamp === null) {\r\n                    this._gatheringStartedTimestamp = now;\r\n                }\r\n\r\n                // Discard candidates of disabled protocols.\r\n                let protocol = candidate.protocol;\r\n\r\n                if (typeof protocol === 'string') {\r\n                    protocol = protocol.toLowerCase();\r\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\r\n                        if (this.webrtcIceTcpDisable) {\r\n                            return;\r\n                        }\r\n                    } else if (protocol === 'udp') {\r\n                        if (this.webrtcIceUdpDisable) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (!this._gatheringReported) {\r\n                // End of gathering\r\n                Statistics.sendAnalytics(\r\n                    ICE_DURATION,\r\n                    {\r\n                        phase: 'gathering',\r\n                        value: now - this._gatheringStartedTimestamp,\r\n                        p2p: this.isP2P,\r\n                        initiator: this.isInitiator\r\n                    });\r\n                this._gatheringReported = true;\r\n            }\r\n            this.sendIceCandidate(candidate);\r\n        };\r\n\r\n        // Note there is a change in the spec about closed:\r\n        // This value moved into the RTCPeerConnectionState enum in\r\n        // the May 13, 2016 draft of the specification, as it reflects the state\r\n        // of the RTCPeerConnection, not the signaling connection. You now\r\n        // detect a closed connection by checking for connectionState to be\r\n        // \"closed\" instead.\r\n        // I suppose at some point this will be moved to onconnectionstatechange\r\n        this.peerconnection.onsignalingstatechange = () => {\r\n            if (this.peerconnection.signalingState === 'stable') {\r\n                this.wasstable = true;\r\n            } else if (this.peerconnection.signalingState === 'closed'\r\n                || this.peerconnection.connectionState === 'closed') {\r\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The oniceconnectionstatechange event handler contains the code to\r\n         * execute when the iceconnectionstatechange event, of type Event,\r\n         * is received by this RTCPeerConnection. Such an event is sent when\r\n         * the value of RTCPeerConnection.iceConnectionState changes.\r\n         */\r\n        this.peerconnection.oniceconnectionstatechange = () => {\r\n            const now = window.performance.now();\r\n\r\n            if (!this.isP2P) {\r\n                this.room.connectionTimes[\r\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\r\n                    = now;\r\n            }\r\n            logger.log(\r\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\r\n                    + ` P2P? ${this.isP2P}:\\t`,\r\n                now);\r\n\r\n            Statistics.sendAnalytics(\r\n                ICE_STATE_CHANGED,\r\n                {\r\n                    p2p: this.isP2P,\r\n                    state: this.peerconnection.iceConnectionState,\r\n                    'signaling_state': this.peerconnection.signalingState,\r\n                    reconnect: this.isReconnect,\r\n                    value: now\r\n                });\r\n\r\n            this.room.eventEmitter.emit(\r\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n                this,\r\n                this.peerconnection.iceConnectionState);\r\n            switch (this.peerconnection.iceConnectionState) {\r\n            case 'checking':\r\n                this._iceCheckingStartedTimestamp = now;\r\n                break;\r\n            case 'connected':\r\n                // Informs interested parties that the connection has been\r\n                // restored.\r\n                if (this.peerconnection.signalingState === 'stable') {\r\n                    if (this.isReconnect) {\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.CONNECTION_RESTORED, this);\r\n                    }\r\n                }\r\n\r\n                if (!this.wasConnected && this.wasstable) {\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'checking',\r\n                            value: now - this._iceCheckingStartedTimestamp,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    // Switch between ICE gathering and ICE checking whichever\r\n                    // started first (scenarios are different for initiator\r\n                    // vs responder)\r\n                    const iceStarted\r\n                        = Math.min(\r\n                            this._iceCheckingStartedTimestamp,\r\n                            this._gatheringStartedTimestamp);\r\n\r\n                    this.establishmentDuration = now - iceStarted;\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'establishment',\r\n                            value: this.establishmentDuration,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    this.wasConnected = true;\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\r\n                }\r\n                this.isReconnect = false;\r\n                break;\r\n            case 'disconnected':\r\n                this.isReconnect = true;\r\n\r\n                // Informs interested parties that the connection has been\r\n                // interrupted.\r\n                if (this.wasstable) {\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\r\n                }\r\n                break;\r\n            case 'failed':\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The negotiationneeded event is fired whenever we shake the media on the\r\n         * RTCPeerConnection object.\r\n         */\r\n        this.peerconnection.onnegotiationneeded = () => {\r\n            const state = this.peerconnection.signalingState;\r\n            const remoteDescription = this.peerconnection.remoteDescription;\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\r\n            if (browser.usesUnifiedPlan() && state === 'stable'\r\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\r\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\r\n                const workFunction = finishedCallback => {\r\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    this._renegotiate()\r\n                        .then(() => {\r\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\r\n                            finishedCallback();\r\n                        },\r\n                        finishedCallback /* will be called with en error */);\r\n                };\r\n\r\n                this.modificationQueue.push(\r\n                    workFunction,\r\n                    error => {\r\n                        if (error) {\r\n                            logger.error('onnegotiationneeded error', error);\r\n                        } else {\r\n                            logger.debug('onnegotiationneeded executed - OK');\r\n                        }\r\n                    });\r\n            }\r\n        };\r\n\r\n        // The signaling layer will bind it's listeners at this point\r\n        this.signalingLayer.setChatRoom(this.room);\r\n\r\n        if (!this.isP2P && options.enableLayerSuspension) {\r\n            // If this is the bridge session, we'll listen for\r\n            // SENDER_VIDEO_CONSTRAINTS_CHANGED events and notify the peer connection\r\n            this._removeSenderVideoConstraintsChangeListener = this.rtc.addListener(\r\n                RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, () => {\r\n                    this.eventEmitter.emit(\r\n                        MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remote preference for receive video max frame height.\r\n     *\r\n     * @returns {Number|undefined}\r\n     */\r\n    getRemoteRecvMaxFrameHeight() {\r\n        if (this.isP2P) {\r\n            return this.remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.options.enableLayerSuspension ? this.rtc.getSenderVideoConstraints().idealHeight : undefined;\r\n    }\r\n\r\n    /**\r\n     * Sends given candidate in Jingle 'transport-info' message.\r\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\r\n     * @private\r\n     */\r\n    sendIceCandidate(candidate) {\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\r\n            const ice\r\n                = SDPUtil.iceparams(\r\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\r\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\r\n\r\n            if (!(ice && jcand)) {\r\n                const errorMesssage = 'failed to get ice && jcand';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\r\n                logger.error(errorMesssage);\r\n\r\n                return;\r\n            }\r\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n\r\n            if (this.usedrip) {\r\n                if (this.dripContainer.length === 0) {\r\n                    // start 20ms callout\r\n                    setTimeout(() => {\r\n                        if (this.dripContainer.length === 0) {\r\n                            return;\r\n                        }\r\n                        this.sendIceCandidates(this.dripContainer);\r\n                        this.dripContainer = [];\r\n                    }, 20);\r\n                }\r\n                this.dripContainer.push(candidate);\r\n            } else {\r\n                this.sendIceCandidates([ candidate ]);\r\n            }\r\n        } else {\r\n            logger.log('sendIceCandidate: last candidate.');\r\n\r\n            // FIXME: remember to re-think in ICE-restart\r\n            this.lasticecandidate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends given candidates in Jingle 'transport-info' message.\r\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\r\n     * candidate instances\r\n     * @private\r\n     */\r\n    sendIceCandidates(candidates) {\r\n        if (!this._assertNotEnded('sendIceCandidates')) {\r\n\r\n            return;\r\n        }\r\n\r\n        logger.log('sendIceCandidates', candidates);\r\n        const cand = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid });\r\n\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\r\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\r\n            const mline\r\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\r\n\r\n            if (cands.length > 0) {\r\n                const ice\r\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\r\n\r\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n                cand.c('content', {\r\n                    creator: this.initiatorJid === this.localJid\r\n                        ? 'initiator' : 'responder',\r\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\r\n                }).c('transport', ice);\r\n                for (let i = 0; i < cands.length; i++) {\r\n                    const candidate\r\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\r\n\r\n                    // Mangle ICE candidate if 'failICE' test option is enabled\r\n\r\n                    if (this.failICE) {\r\n                        candidate.ip = '1.1.1.1';\r\n                    }\r\n                    cand.c('candidate', candidate).up();\r\n                }\r\n\r\n                // add fingerprint\r\n                const fingerprintLine\r\n                    = SDPUtil.findLine(\r\n                        localSDP.media[mid],\r\n                        'a=fingerprint:', localSDP.session);\r\n\r\n                if (fingerprintLine) {\r\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\r\n\r\n                    tmp.required = true;\r\n                    cand.c(\r\n                        'fingerprint',\r\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\r\n                        .t(tmp.fingerprint);\r\n                    delete tmp.fingerprint;\r\n                    cand.attrs(tmp);\r\n                    cand.up();\r\n                }\r\n                cand.up(); // transport\r\n                cand.up(); // content\r\n            }\r\n        }\r\n\r\n        // might merge last-candidate notification into this, but it is called\r\n        // a lot later. See webrtc issue #2340\r\n        // logger.log('was this the last candidate', this.lasticecandidate);\r\n        this.connection.sendIQ(\r\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\r\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\r\n     * that the ICE connection has entered the failed state. It can then\r\n     * choose to re-create JVB channels and send 'transport-replace' to\r\n     * retry the connection.\r\n     */\r\n    sendIceFailedNotification() {\r\n        const sessionInfo\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid })\r\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\r\n            .t('failed')\r\n            .up();\r\n\r\n        this._bridgeSessionId\r\n            && sessionInfo.c(\r\n                'bridge-session', {\r\n                    xmlns: 'http://jitsi.org/protocol/focus',\r\n                    id: this._bridgeSessionId\r\n                });\r\n\r\n        this.connection.sendIQ2(\r\n            sessionInfo, {\r\n                /*\r\n                 * This message will be often sent when there are connectivity\r\n                 * issues, so make it slightly longer than Prosody's default BOSH\r\n                 * inactivity timeout of 60 seconds.\r\n                 */\r\n                timeout: 65\r\n            })\r\n            .catch(this.newJingleErrorHandler(sessionInfo));\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    addIceCandidates(elem) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            logger.warn('Ignored add ICE candidate when in closed state');\r\n\r\n            return;\r\n        }\r\n\r\n        const iceCandidates = [];\r\n\r\n        elem.find('>content>transport>candidate')\r\n            .each((idx, candidate) => {\r\n                let line = SDPUtil.candidateFromJingle(candidate);\r\n\r\n                line = line.replace('\\r\\n', '').replace('a=', '');\r\n\r\n                // FIXME this code does not care to handle\r\n                // non-bundle transport\r\n                const rtcCandidate = new RTCIceCandidate({\r\n                    sdpMLineIndex: 0,\r\n\r\n                    // FF comes up with more complex names like audio-23423,\r\n                    // Given that it works on both Chrome and FF without\r\n                    // providing it, let's leave it like this for the time\r\n                    // being...\r\n                    // sdpMid: 'audio',\r\n                    sdpMid: '',\r\n                    candidate: line\r\n                });\r\n\r\n                iceCandidates.push(rtcCandidate);\r\n            });\r\n\r\n        if (!iceCandidates.length) {\r\n            logger.error(\r\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\r\n\r\n            return;\r\n        }\r\n\r\n        // We want to have this task queued, so that we know it is executed,\r\n        // after the initial sRD/sLD offer/answer cycle was done (based on\r\n        // the assumption that candidates are spawned after the offer/answer\r\n        // and XMPP preserves order).\r\n        const workFunction = finishedCallback => {\r\n            for (const iceCandidate of iceCandidates) {\r\n                this.peerconnection.addIceCandidate(iceCandidate)\r\n                    .then(\r\n                        () => logger.debug('addIceCandidate ok!'),\r\n                        err => logger.error('addIceCandidate failed!', err));\r\n            }\r\n\r\n            finishedCallback();\r\n        };\r\n\r\n        logger.debug(\r\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param contents\r\n     */\r\n    readSsrcInfo(contents) {\r\n        const ssrcs\r\n            = $(contents).find(\r\n                '>description>'\r\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n        ssrcs.each((i, ssrcElement) => {\r\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\r\n\r\n            if (this.isP2P) {\r\n                // In P2P all SSRCs are owner by the remote peer\r\n                this.signalingLayer.setSSRCOwner(\r\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\r\n            } else {\r\n                $(ssrcElement)\r\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\r\n                    .each((i3, ssrcInfoElement) => {\r\n                        const owner = ssrcInfoElement.getAttribute('owner');\r\n\r\n                        if (owner && owner.length) {\r\n                            if (isNaN(ssrc) || ssrc < 0) {\r\n                                logger.warn(\r\n                                    `Invalid SSRC ${ssrc} value received`\r\n                                        + ` for ${owner}`);\r\n                            } else {\r\n                                this.signalingLayer.setSSRCOwner(\r\n                                    ssrc,\r\n                                    Strophe.getResourceFromJid(owner));\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n     * the recvonly video stream.\r\n     * @deprecated\r\n     */\r\n    generateRecvonlySsrc() {\r\n        if (this.peerconnection) {\r\n            this.peerconnection.generateRecvonlySsrc();\r\n        } else {\r\n            logger.error(\r\n                'Unable to generate recvonly SSRC - no peerconnection');\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Accepts incoming Jingle 'session-initiate' and should send\r\n     * 'session-accept' in result.\r\n     * @param jingleOffer jQuery selector pointing to the jingle element of\r\n     * the offer IQ\r\n     * @param success callback called when we accept incoming session\r\n     * successfully and receive RESULT packet to 'session-accept' sent.\r\n     * @param failure function(error) called if for any reason we fail to accept\r\n     * the incoming offer. 'error' argument can be used to log some details\r\n     * about the error.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes. We allow the localTracks to optionally be passed in so that\r\n     * the addition of the local tracks and the processing of the initial offer\r\n     * can all be done atomically. We want to make sure that any other\r\n     * operations which originate in the XMPP Jingle messages related with\r\n     * this session to be executed with an assumption that the initial\r\n     * offer/answer cycle has been executed already.\r\n     */\r\n    acceptOffer(jingleOffer, success, failure, localTracks) {\r\n        this.setOfferAnswerCycle(\r\n            jingleOffer,\r\n            () => {\r\n                // FIXME we may not care about RESULT packet for session-accept\r\n                // then we should either call 'success' here immediately or\r\n                // modify sendSessionAccept method to do that\r\n                this.sendSessionAccept(success, failure);\r\n            },\r\n            failure,\r\n            localTracks);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\r\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\r\n     * added, before the offer/answer cycle executes (for the local track\r\n     * addition to be an atomic operation together with the offer/answer).\r\n     */\r\n    invite(localTracks) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to invite from the responder session');\r\n        }\r\n        const workFunction = finishedCallback => {\r\n            for (const localTrack of localTracks) {\r\n                this.peerconnection.addTrack(localTrack, true /* isInitiator */);\r\n            }\r\n            this.peerconnection.createOffer(this.mediaConstraints)\r\n                .then(offerSdp => {\r\n                    this.peerconnection.setLocalDescription(offerSdp)\r\n                        .then(() => {\r\n                            // NOTE that the offer is obtained from\r\n                            // the localDescription getter as it needs to go\r\n                            // though the transformation chain.\r\n                            this.sendSessionInitiate(\r\n                                this.peerconnection.localDescription.sdp);\r\n                            finishedCallback();\r\n                        }, error => {\r\n                            logger.error(\r\n                                'Failed to set local SDP', error, offerSdp);\r\n                            finishedCallback(error);\r\n                        });\r\n                }, error => {\r\n                    logger.error(\r\n                        'Failed to create an offer',\r\n                        error,\r\n                        this.mediaConstraints);\r\n                    finishedCallback(error);\r\n                });\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('invite error', error);\r\n                } else {\r\n                    logger.debug('invite executed - OK');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends 'session-initiate' to the remote peer.\r\n     *\r\n     * NOTE this method is synchronous and we're not waiting for the RESULT\r\n     * response which would delay the startup process.\r\n     *\r\n     * @param {string} offerSdp  - The local session description which will be\r\n     * used to generate an offer.\r\n     * @private\r\n     */\r\n    sendSessionInitiate(offerSdp) {\r\n        let init = $iq({\r\n            to: this.remoteJid,\r\n            type: 'set'\r\n        }).c('jingle', {\r\n            xmlns: 'urn:xmpp:jingle:1',\r\n            action: 'session-initiate',\r\n            initiator: this.initiatorJid,\r\n            sid: this.sid\r\n        });\r\n\r\n        new SDP(offerSdp).toJingle(\r\n            init,\r\n            this.isInitiator ? 'initiator' : 'responder');\r\n        init = init.tree();\r\n        logger.info('Session-initiate: ', init);\r\n        this.connection.sendIQ(init,\r\n            () => {\r\n                logger.info('Got RESULT for \"session-initiate\"');\r\n            },\r\n            error => {\r\n                logger.error('\"session-initiate\" error', error);\r\n            },\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the answer received from the remote peer.\r\n     * @param jingleAnswer\r\n     */\r\n    setAnswer(jingleAnswer) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to set an answer on the responder session');\r\n        }\r\n        this.setOfferAnswerCycle(\r\n            jingleAnswer,\r\n            () => {\r\n                logger.info('setAnswer - succeeded');\r\n            },\r\n            error => {\r\n                logger.error('setAnswer failed: ', error);\r\n            });\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\r\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\r\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\r\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\r\n     *        of the offer (or answer) IQ\r\n     * @param success callback called when sRD/sLD cycle finishes successfully.\r\n     * @param failure callback called with an error object as an argument if we\r\n     *        fail at any point during setRD, createAnswer, setLD.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes (for the local track addition to be an atomic operation together\r\n     * with the offer/answer).\r\n     */\r\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\r\n        const workFunction = finishedCallback => {\r\n\r\n            if (localTracks) {\r\n                for (const track of localTracks) {\r\n                    this.peerconnection.addTrack(track);\r\n                }\r\n            }\r\n\r\n            const newRemoteSdp\r\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\r\n            const oldLocalSdp\r\n                = this.peerconnection.localDescription.sdp;\r\n\r\n            const bridgeSession\r\n                = $(jingleOfferAnswerIq)\r\n                    .find('>bridge-session['\r\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\r\n            const bridgeSessionId = bridgeSession.attr('id');\r\n\r\n            if (bridgeSessionId !== this._bridgeSessionId) {\r\n                this._bridgeSessionId = bridgeSessionId;\r\n            }\r\n\r\n            this._renegotiate(newRemoteSdp.raw)\r\n                .then(() => {\r\n                    if (this.state === JingleSessionState.PENDING) {\r\n                        this.state = JingleSessionState.ACTIVE;\r\n\r\n                        // #1 Sync up video transfer active/inactive only after\r\n                        // the initial O/A cycle. We want to adjust the video\r\n                        // media direction only in the local SDP and the Jingle\r\n                        // contents direction included in the initial\r\n                        // offer/answer is mapped to the remote SDP. Jingle\r\n                        // 'content-modify' IQ is processed in a way that it\r\n                        // will only modify local SDP when remote peer is no\r\n                        // longer interested in receiving video content.\r\n                        // Changing media direction in the remote SDP will mess\r\n                        // up our SDP translation chain (simulcast, video mute,\r\n                        // RTX etc.)\r\n                        //\r\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\r\n                        if (this.isP2P\r\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\r\n                            this.sendContentModify();\r\n                        }\r\n                    }\r\n\r\n                    // Old local SDP will be available when we're setting answer\r\n                    // for the first time, but not when offer and it's fine\r\n                    // since we're generating an answer now it will contain all\r\n                    // our SSRCs\r\n                    if (oldLocalSdp) {\r\n                        const newLocalSdp\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(\r\n                            new SDP(oldLocalSdp), newLocalSdp);\r\n                    }\r\n\r\n                    finishedCallback();\r\n                }, error => {\r\n                    logger.error(\r\n                        `Error renegotiating after setting new remote ${\r\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\r\n                        newRemoteSdp);\r\n\r\n                    finishedCallback(error);\r\n                });\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                error ? failure(error) : success();\r\n            });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Although it states \"replace transport\" it does accept full Jingle offer\r\n     * which should contain new ICE transport details.\r\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\r\n     *        transport info.\r\n     * @param success callback called when we succeed to accept new offer.\r\n     * @param failure function(error) called when we fail to accept new offer.\r\n     */\r\n    replaceTransport(jingleOfferElem, success, failure) {\r\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\r\n\r\n        // We need to first reject the 'data' section to have the SCTP stack\r\n        // cleaned up to signal the known data channel is now invalid. After\r\n        // that the original offer is set to have the SCTP connection\r\n        // established with the new bridge.\r\n        const originalOffer = jingleOfferElem.clone();\r\n\r\n        jingleOfferElem\r\n            .find('>content[name=\\'data\\']')\r\n            .attr('senders', 'rejected');\r\n\r\n        // Remove all remote sources in order to reset the client's state\r\n        // for the remote MediaStreams. When a conference is moved to\r\n        // another bridge it will start streaming with a sequence number\r\n        // that is not in sync with the most recently seen by the client.\r\n        // The symptoms include frozen or black video and lots of \"failed to\r\n        // unprotect SRTP packets\" in Chrome logs.\r\n        jingleOfferElem\r\n            .find('>content>description>source')\r\n            .remove();\r\n        jingleOfferElem\r\n            .find('>content>description>ssrc-group')\r\n            .remove();\r\n\r\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\r\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\r\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\r\n        // fingerprint has changed by setting an all zeros key.\r\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\r\n\r\n        newFingerprint.attr('hash', 'sha-1');\r\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\r\n\r\n        // First set an offer with a rejected 'data' section\r\n        this.setOfferAnswerCycle(\r\n            jingleOfferElem,\r\n            () => {\r\n                // Now set the original offer(with the 'data' section)\r\n                this.setOfferAnswerCycle(\r\n                    originalOffer,\r\n                    () => {\r\n                        const localSDP\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.sendTransportAccept(localSDP, success, failure);\r\n\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.ICE_RESTART_SUCCESS,\r\n                            this,\r\n                            originalOffer);\r\n                    },\r\n                    failure);\r\n            },\r\n            failure\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-accept' message.\r\n     * @param {function()} success callback called when we receive 'RESULT'\r\n     *        packet for the 'session-accept'\r\n     * @param {function(error)} failure called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendSessionAccept(success, failure) {\r\n        // NOTE: since we're just reading from it, we don't need to be within\r\n        //  the modification queue to access the local description\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n        let accept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-accept',\r\n                initiator: this.initiatorJid,\r\n                responder: this.responderJid,\r\n                sid: this.sid });\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            localSDP.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            localSDP.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            localSDP.failICE = true;\r\n        }\r\n        localSDP.toJingle(\r\n            accept,\r\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\r\n            null);\r\n\r\n        // Calling tree() to print something useful\r\n        accept = accept.tree();\r\n        logger.info('Sending session-accept', accept);\r\n        this.connection.sendIQ(accept,\r\n            success,\r\n            this.newJingleErrorHandler(accept, error => {\r\n                failure(error);\r\n\r\n                // 'session-accept' is a critical timeout and we'll\r\n                // have to restart\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\r\n            }),\r\n            IQ_TIMEOUT);\r\n\r\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\r\n        // fingerprint and setup) ASAP in order to start the connection\r\n        // establishment.\r\n        //\r\n        // FIXME Flushing the connection at this point triggers an issue with\r\n        // BOSH request handling in Prosody on slow connections.\r\n        //\r\n        // The problem is that this request will be quite large and it may take\r\n        // time before it reaches Prosody. In the meantime Strophe may decide\r\n        // to send the next one. And it was observed that a small request with\r\n        // 'transport-info' usually follows this one. It does reach Prosody\r\n        // before the previous one was completely received. 'rid' on the server\r\n        // is increased and Prosody ignores the request with 'session-accept'.\r\n        // It will never reach Jicofo and everything in the request table is\r\n        // lost. Removing the flush does not guarantee it will never happen, but\r\n        // makes it much less likely('transport-info' is bundled with\r\n        // 'session-accept' and any immediate requests).\r\n        //\r\n        // this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     * Will send 'content-modify' IQ in order to ask the remote peer to\r\n     * either stop or resume sending video media or to adjust sender's video constraints.\r\n     * @private\r\n     */\r\n    sendContentModify() {\r\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\r\n        const senders = this._localVideoActive ? 'both' : 'none';\r\n\r\n        let sessionModify\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set'\r\n            })\r\n                .c('jingle', {\r\n                    xmlns: 'urn:xmpp:jingle:1',\r\n                    action: 'content-modify',\r\n                    initiator: this.initiatorJid,\r\n                    sid: this.sid\r\n                })\r\n                .c('content', {\r\n                    name: 'video',\r\n                    senders\r\n                });\r\n\r\n        if (typeof maxFrameHeight !== 'undefined') {\r\n            sessionModify = sessionModify\r\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\r\n                .t(maxFrameHeight);\r\n        }\r\n\r\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\r\n\r\n        this.connection.sendIQ(\r\n            sessionModify,\r\n            null,\r\n            this.newJingleErrorHandler(sessionModify),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\r\n     * the remote party.\r\n     *\r\n     * @param {Number} maxFrameHeight - the new value to set.\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\r\n\r\n        this.localRecvMaxFrameHeight = maxFrameHeight;\r\n\r\n        if (this.isP2P) {\r\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\r\n            // be synced after offer/answer.\r\n            if (this.state === JingleSessionState.ACTIVE) {\r\n                this.sendContentModify();\r\n            }\r\n        } else {\r\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-accept' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param localSDP the 'SDP' object with local session description\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendTransportAccept(localSDP, success, failure) {\r\n        let transportAccept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-accept',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        localSDP.media.forEach((medialines, idx) => {\r\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\r\n\r\n            transportAccept.c('content',\r\n                {\r\n                    creator:\r\n                        this.initiatorJid === this.localJid\r\n                            ? 'initiator'\r\n                            : 'responder',\r\n                    name: mline.media\r\n                }\r\n            );\r\n            localSDP.transportToJingle(idx, transportAccept);\r\n            transportAccept.up();\r\n        });\r\n\r\n        // Calling tree() to print something useful to the logger\r\n        transportAccept = transportAccept.tree();\r\n        logger.info('Sending transport-accept: ', transportAccept);\r\n\r\n        this.connection.sendIQ(transportAccept,\r\n            success,\r\n            this.newJingleErrorHandler(transportAccept, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-reject' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     *\r\n     * FIXME method should be marked as private, but there's some spaghetti that\r\n     *       needs to be fixed prior doing that\r\n     */\r\n    sendTransportReject(success, failure) {\r\n        // Send 'transport-reject', so that the focus will\r\n        // know that we've failed\r\n        let transportReject = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-reject',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        transportReject = transportReject.tree();\r\n        logger.info('Sending \\'transport-reject', transportReject);\r\n\r\n        this.connection.sendIQ(transportReject,\r\n            success,\r\n            this.newJingleErrorHandler(transportReject, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the resolution constraint on the local camera track.\r\n     * @param {number} maxFrameHeight - The user preferred max frame height.\r\n     * @returns {Promise} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoConstraint(maxFrameHeight) {\r\n        if (this._assertNotEnded()) {\r\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\r\n\r\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the degradation preference on the video sender. This setting determines if\r\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n     * @returns {void}\r\n     */\r\n    setSenderVideoDegradationPreference() {\r\n        if (this._assertNotEnded()) {\r\n            this.peerconnection.setSenderVideoDegradationPreference();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    terminate(success, failure, options) {\r\n        if (this.state === JingleSessionState.ENDED) {\r\n            return;\r\n        }\r\n\r\n        if (!options || Boolean(options.sendSessionTerminate)) {\r\n            let sessionTerminate\r\n                = $iq({\r\n                    to: this.remoteJid,\r\n                    type: 'set'\r\n                })\r\n                    .c('jingle', {\r\n                        xmlns: 'urn:xmpp:jingle:1',\r\n                        action: 'session-terminate',\r\n                        initiator: this.initiatorJid,\r\n                        sid: this.sid\r\n                    })\r\n                    .c('reason')\r\n                    .c((options && options.reason) || 'success')\r\n                    .up();\r\n\r\n            if (options && options.reasonDescription) {\r\n                sessionTerminate\r\n                    .c('text')\r\n                    .t(options.reasonDescription)\r\n                    .up()\r\n                    .up();\r\n            } else {\r\n                sessionTerminate.up();\r\n            }\r\n\r\n            this._bridgeSessionId\r\n                && sessionTerminate.c(\r\n                    'bridge-session', {\r\n                        xmlns: 'http://jitsi.org/protocol/focus',\r\n                        id: this._bridgeSessionId,\r\n                        restart: options && options.requestRestart === true\r\n                    }).up();\r\n\r\n            // Calling tree() to print something useful\r\n            sessionTerminate = sessionTerminate.tree();\r\n            logger.info('Sending session-terminate', sessionTerminate);\r\n            this.connection.sendIQ(\r\n                sessionTerminate,\r\n                success,\r\n                this.newJingleErrorHandler(sessionTerminate, failure),\r\n                IQ_TIMEOUT);\r\n        } else {\r\n            logger.info(`Skipped sending session-terminate for ${this}`);\r\n        }\r\n\r\n        // this should result in 'onTerminated' being called by strope.jingle.js\r\n        this.connection.jingle.terminate(this.sid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    onTerminated(reasonCondition, reasonText) {\r\n        // Do something with reason and reasonCondition when we start to care\r\n        // this.reasonCondition = reasonCondition;\r\n        // this.reasonText = reasonText;\r\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\r\n\r\n        this._xmppListeners.forEach(removeListener => removeListener());\r\n        this._xmppListeners = [];\r\n\r\n        if (this._removeSenderVideoConstraintsChangeListener) {\r\n            this._removeSenderVideoConstraintsChangeListener();\r\n        }\r\n\r\n        this.close();\r\n    }\r\n\r\n    /**\r\n     * Handles XMPP connection state changes.\r\n     *\r\n     * @param {XmppConnection.Status} status - The new status.\r\n     */\r\n    onXmppStatusChanged(status) {\r\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\r\n            logger.info('Sending SSRC update on reconnect');\r\n            this.notifyMySSRCUpdate(\r\n                this._cachedOldLocalSdp,\r\n                this._cachedNewLocalSdp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceAddElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceAddElem the source-add\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-add)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be added to the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\r\n        const addSsrcInfo = [];\r\n\r\n        $(sourceAddElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    // eslint-disable-next-line no-invalid-this\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this) // eslint-disable-line no-invalid-this\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                // eslint-disable-next-line no-invalid-this\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n                });\r\n\r\n            // handles both >source and >description>source\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            /* eslint-disable no-invalid-this */\r\n            tmp.each(function() {\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\r\n                    logger.warn(\r\n                        `Source-add request for existing SSRC: ${ssrc}`);\r\n\r\n                    return;\r\n                }\r\n\r\n                // eslint-disable-next-line newline-per-chained-call\r\n                $(this).find('>parameter').each(function() {\r\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\r\n                    if ($(this).attr('value') && $(this).attr('value').length) {\r\n                        lines += `:${$(this).attr('value')}`;\r\n                    }\r\n                    lines += '\\r\\n';\r\n                });\r\n            });\r\n\r\n            /* eslint-enable no-invalid-this */\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!addSsrcInfo[i2]) {\r\n                    addSsrcInfo[i2] = '';\r\n                }\r\n                addSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return addSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-add message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    addRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(true /* add */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-remove message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    removeRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\r\n     * Jingle session.\r\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\r\n     * otherwise.\r\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\r\n     * @private\r\n     */\r\n    _addOrRemoveRemoteStream(isAdd, elem) {\r\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\r\n\r\n        if (isAdd) {\r\n            this.readSsrcInfo(elem);\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (!this.peerconnection.localDescription\r\n                || !this.peerconnection.localDescription.sdp) {\r\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\r\n\r\n                logger.error(errMsg);\r\n                finishedCallback(errMsg);\r\n\r\n                return;\r\n            }\r\n\r\n            logger.log(`Processing ${logPrefix}`);\r\n            logger.log(\r\n                'ICE connection state: ',\r\n                this.peerconnection.iceConnectionState);\r\n\r\n            const oldLocalSdp\r\n                = new SDP(this.peerconnection.localDescription.sdp);\r\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n            const addOrRemoveSsrcInfo\r\n                = isAdd\r\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\r\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\r\n            const newRemoteSdp\r\n                = isAdd\r\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\r\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\r\n\r\n            this._renegotiate(newRemoteSdp.raw)\r\n                .then(() => {\r\n                    const newLocalSdp\r\n                        = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    logger.log(\r\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\r\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\r\n                    finishedCallback();\r\n                }, error => {\r\n                    logger.error(`${logPrefix} failed:`, error);\r\n                    finishedCallback(error);\r\n                });\r\n        };\r\n\r\n        // Queue and execute\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     * Takes in a jingle offer iq, returns the new sdp offer\r\n     * @param {jquery xml element} offerIq the incoming offer\r\n     * @returns {SDP object} the jingle offer translated to SDP\r\n     */\r\n    _processNewJingleOfferIq(offerIq) {\r\n        const remoteSdp = new SDP('');\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            remoteSdp.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            remoteSdp.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            remoteSdp.failICE = true;\r\n        }\r\n\r\n        remoteSdp.fromJingle(offerIq);\r\n        this.readSsrcInfo($(offerIq).find('>content'));\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Remove the given ssrc lines from the current remote sdp\r\n     * @param {list} removeSsrcInfo a list of SDP line strings that\r\n     *  should be removed from the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteRemoveSource(removeSsrcInfo) {\r\n        const remoteSdp = browser.usesPlanB()\r\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\r\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\r\n\r\n        removeSsrcInfo.forEach((lines, idx) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            lines = lines.split('\\r\\n');\r\n            lines.pop(); // remove empty last element;\r\n            if (browser.usesPlanB()) {\r\n                lines.forEach(line => {\r\n                    remoteSdp.media[idx]\r\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\r\n                });\r\n            } else {\r\n                lines.forEach(line => {\r\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\r\n\r\n                    if (mid > -1) {\r\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\r\n\r\n                        // Change the direction to \"inactive\" only on Firefox. Audio fails on\r\n                        // Safari (possibly Chrome in unified plan mode) when we try to re-use inactive\r\n                        // m-lines due to a webkit bug.\r\n                        // https://bugs.webkit.org/show_bug.cgi?id=211181\r\n                        if (browser.isFirefox()) {\r\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Add the given ssrc lines to the current remote sdp\r\n     * @param {list} addSsrcInfo a list of SDP line strings that\r\n     *  should be added to the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteAddSource(addSsrcInfo) {\r\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n\r\n        addSsrcInfo.forEach((lines, idx) => {\r\n            remoteSdp.media[idx] += lines;\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Do a new o/a flow using the existing remote description\r\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\r\n     *  to use.  If not provided, the remote sdp from the\r\n     *  peerconnection will be used\r\n     * @returns {Promise} promise which resolves when the\r\n     *  o/a flow is complete with no arguments or\r\n     *  rejects with an error {string}\r\n     */\r\n    _renegotiate(optionalRemoteSdp) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            const error = new Error('Attempted to renegotiate in state closed');\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteSdp\r\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\r\n\r\n        if (!remoteSdp) {\r\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteDescription = new RTCSessionDescription({\r\n            type: this.isInitiator ? 'answer' : 'offer',\r\n            sdp: remoteSdp\r\n        });\r\n\r\n        if (this.isInitiator) {\r\n            return this._initiatorRenegotiate(remoteDescription);\r\n        }\r\n\r\n        return this._responderRenegotiate(remoteDescription);\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the responder case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _responderRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: setting remote description');\r\n\r\n        return this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                logger.debug('Renegotiate: creating answer');\r\n\r\n                return this.peerconnection.createAnswer(this.mediaConstraints)\r\n                    .then(answer => {\r\n                        logger.debug('Renegotiate: setting local description');\r\n\r\n                        return this.peerconnection.setLocalDescription(answer);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the initiator's case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _initiatorRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: creating offer');\r\n\r\n        return this.peerconnection.createOffer(this.mediaConstraints)\r\n            .then(offer => {\r\n                logger.debug('Renegotiate: setting local description');\r\n\r\n                return this.peerconnection.setLocalDescription(offer)\r\n                    .then(() => {\r\n                        logger.debug(\r\n                            'Renegotiate: setting remote description');\r\n\r\n                        // eslint-disable-next-line max-len\r\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\r\n     * offer/answer cycle after both operations are done. Either\r\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n     * <tt>oldTrack</tt>\r\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\r\n     * replaced\r\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\r\n     * @returns {Promise} which resolves once the replacement is complete\r\n     *  with no arguments or rejects with an error {string}\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        const workFunction = finishedCallback => {\r\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\r\n\r\n            if (browser.usesPlanB()) {\r\n                // NOTE the code below assumes that no more than 1 video track\r\n                // can be added to the peer connection.\r\n                // Transition from camera to desktop share\r\n                // or transition from one camera source to another.\r\n                if (this.peerconnection.options.capScreenshareBitrate\r\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the old video stream.\r\n                    // 2. source-add for the new video stream.\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                }\r\n\r\n                // Transition from no video to video (unmute).\r\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the recvonly\r\n                    // 2. source-add for the new video stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n\r\n                // Transition from video to no video\r\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\r\n                    // Clearing current primary SSRC and generating the recvonly\r\n                    // will result in:\r\n                    // 1. source-remove for the old video stream\r\n                    // 2. source-add for the recvonly stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                    this.peerconnection.generateRecvonlySsrc();\r\n                }\r\n            }\r\n\r\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\r\n                .then(shouldRenegotiate => {\r\n                    let promise = Promise.resolve();\r\n\r\n                    if (shouldRenegotiate\r\n                        && (oldTrack || newTrack)\r\n                        && this.state === JingleSessionState.ACTIVE) {\r\n                        promise = this._renegotiate().then(() => {\r\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\r\n                        },\r\n                        finishedCallback /* will be called with en error */);\r\n                    }\r\n\r\n                    promise.then(() => {\r\n                        if (newTrack && newTrack.isVideoTrack()) {\r\n                            // Set the degradation preference on the new video sender.\r\n                            this.peerconnection.setSenderVideoDegradationPreference();\r\n\r\n                            // Apply the cached video constraints on the new video sender.\r\n                            this.peerconnection.setSenderVideoConstraint();\r\n\r\n                            // Configure max bitrate on the video sender when media is routed through JVB.\r\n                            if (!this.isP2P) {\r\n                                this.peerconnection.setMaxBitRate(newTrack);\r\n                            }\r\n                        }\r\n                        finishedCallback();\r\n                    }, finishedCallback /* will be called with en error */);\r\n                })\r\n                .catch(err => {\r\n                    finishedCallback(err);\r\n                });\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error('Replace track error:', error);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.info('Replace track done!');\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceRemoveElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceRemoveElem the source-remove\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-remove)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be removed from the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\r\n        const removeSsrcInfo = [];\r\n\r\n        $(sourceRemoveElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    /* eslint-disable no-invalid-this */\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this)\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n\r\n                    /* eslint-enable no-invalid-this */\r\n                });\r\n            const ssrcs = [];\r\n\r\n            // handles both >source and >description>source versions\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            tmp.each(function() {\r\n                // eslint-disable-next-line no-invalid-this\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                ssrcs.push(ssrc);\r\n            });\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!removeSsrcInfo[i2]) {\r\n                    removeSsrcInfo[i2] = '';\r\n                }\r\n                ssrcs.forEach(ssrc => {\r\n                    const ssrcLines\r\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n                    if (ssrcLines.length) {\r\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                    }\r\n                });\r\n                removeSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return removeSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Will print an error if there is any difference, between the SSRCs given\r\n     * in the <tt>oldSDP</tt> and the ones currently described in\r\n     * the peerconnection's local description.\r\n     * @param {string} operationName the operation's name which will be printed\r\n     * in the error message.\r\n     * @param {SDP} oldSDP the old local SDP which will be compared with\r\n     * the current one.\r\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\r\n     * otherwise.\r\n     * @private\r\n     */\r\n    _verifyNoSSRCChanged(operationName, oldSDP) {\r\n        const currentLocalSDP\r\n            = new SDP(this.peerconnection.localDescription.sdp);\r\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\r\n        const addedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(addedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRC were added on ${operationName}`,\r\n                addedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\r\n        const removedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(removedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRCs were removed on ${operationName}`,\r\n                removedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Adds local track back to this session, as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} track\r\n     * @return {Promise} a promise that will resolve once the local track is\r\n     * added back to this session and renegotiation succeeds. Will be rejected\r\n     * with a <tt>string</tt> that provides some error details in case something\r\n     * goes wrong.\r\n     */\r\n    addTrackAsUnmute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            false /* add as unmute */, track)\r\n            .then(() => {\r\n                // Apply the video constraints and degradation preference on\r\n                // the video sender if needed.\r\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\r\n                    this.peerconnection.setSenderVideoDegradationPreference();\r\n                    this.peerconnection.setSenderVideoConstraint();\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Remove local track as part of the mute operation.\r\n     * @param {JitsiLocalTrack} track the local track to be removed\r\n     * @return {Promise} a promise which will be resolved once the local track\r\n     * is removed from this session and the renegotiation is performed.\r\n     * The promise will be rejected with a <tt>string</tt> that the describes\r\n     * the error if anything goes wrong.\r\n     */\r\n    removeTrackAsMute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            true /* remove as mute */, track);\r\n    }\r\n\r\n    /**\r\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\r\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\r\n     * <tt>false</tt> for \"add as unmute\".\r\n     * @param {JitsiLocalTrack} track the track that will be added/removed\r\n     * @private\r\n     */\r\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\r\n        if (!track) {\r\n            return Promise.reject('invalid \"track\" argument value');\r\n        }\r\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\r\n        const workFunction = finishedCallback => {\r\n            const tpc = this.peerconnection;\r\n\r\n            if (!tpc) {\r\n                finishedCallback(\r\n                    `Error:  tried ${operationName} track with no active peer`\r\n                        + 'connection');\r\n\r\n                return;\r\n            }\r\n            const oldLocalSDP = tpc.localDescription.sdp;\r\n            const operationPromise\r\n                = isMute\r\n                    ? tpc.removeTrackMute(track)\r\n                    : tpc.addTrackUnmute(track);\r\n\r\n            operationPromise\r\n                .then(shouldRenegotiate => {\r\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\r\n                        this._renegotiate()\r\n                            .then(() => {\r\n                                // The results are ignored, as this check failure is not\r\n                                // enough to fail the whole operation. It will log\r\n                                // an error inside.\r\n                                this._verifyNoSSRCChanged(\r\n                                    operationName, new SDP(oldLocalSDP));\r\n                                finishedCallback();\r\n                            });\r\n                    } else {\r\n                        finishedCallback();\r\n                    }\r\n                },\r\n                finishedCallback /* will be called with an error */);\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resumes or suspends media transfer over the underlying peer connection.\r\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\r\n     * transfer or <tt>false</tt> to suspend audio media transmission.\r\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\r\n     * transfer or <tt>false</tt> to suspend video media transmission.\r\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\r\n     * the operation is done. It will be rejected with an error description as\r\n     * a string in case anything goes wrong.\r\n     */\r\n    setMediaTransferActive(audioActive, videoActive) {\r\n        if (!this.peerconnection) {\r\n            return Promise.reject(\r\n                'Can not modify transfer active state,'\r\n                    + ' before \"initialize\" is called');\r\n        }\r\n\r\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\r\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\r\n\r\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\r\n\r\n        const workFunction = finishedCallback => {\r\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\r\n\r\n            // Because the value is modified on the queue it's impossible to\r\n            // check it's final value reliably prior to submitting the task.\r\n            // The rule here is that the last submitted state counts.\r\n            // Check the values here to avoid unnecessary renegotiation cycle.\r\n            const audioActiveChanged\r\n                = this.peerconnection.setAudioTransferActive(audioActive);\r\n\r\n            if (this._localVideoActive !== videoActive) {\r\n                this._localVideoActive = videoActive;\r\n\r\n                // Do only for P2P - Jicofo will reply with 'bad-request'\r\n                // We don't want to send 'content-modify', before the initial\r\n                // O/A (state === JingleSessionState.ACTIVE), because that will\r\n                // mess up video media direction in the remote SDP.\r\n                // 'content-modify' when processed only affects the media\r\n                // direction in the local SDP. We're doing that, because setting\r\n                // 'inactive' on video media in remote SDP will mess up our SDP\r\n                // translation chain (simulcast, RTX, video mute etc.).\r\n                if (this.isP2P && isSessionActive) {\r\n                    this.sendContentModify();\r\n                }\r\n            }\r\n\r\n            const pcVideoActiveChanged\r\n                = this.peerconnection.setVideoTransferActive(\r\n                    this._localVideoActive && this._remoteVideoActive);\r\n\r\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\r\n            // direction\r\n            if (isSessionActive\r\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\r\n                this._renegotiate()\r\n                    .then(\r\n                        finishedCallback,\r\n                        finishedCallback /* will be called with an error */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will put and execute on the queue a session modify task. Currently it\r\n     * only checks the senders attribute of the video content in order to figure\r\n     * out if the remote peer has video in the inactive state (stored locally\r\n     * in {@link _remoteVideoActive} - see field description for more info).\r\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\r\n     * element of the session modify IQ.\r\n     * @see {@link _remoteVideoActive}\r\n     * @see {@link _localVideoActive}\r\n     */\r\n    modifyContents(jingleContents) {\r\n        const newVideoSenders\r\n            = JingleSessionPC.parseVideoSenders(jingleContents);\r\n        const newMaxFrameHeight\r\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\r\n\r\n        // frame height is optional in our content-modify protocol\r\n        if (newMaxFrameHeight) {\r\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\r\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\r\n            this.eventEmitter.emit(\r\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n        }\r\n\r\n        if (newVideoSenders === null) {\r\n            logger.error(\r\n                `${this} - failed to parse video \"senders\" attribute in`\r\n                    + '\"content-modify\" action');\r\n\r\n            return;\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (this._assertNotEnded('content-modify')\r\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\r\n                // Will do the sRD/sLD cycle to update SDPs and adjust\r\n                // the media direction\r\n                this._renegotiate()\r\n                    .then(finishedCallback, finishedCallback /* (error) */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(\r\n            `${this} queued \"content-modify\" task`\r\n                + `(video senders=\"${newVideoSenders}\")`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('\"content-modify\" failed', error);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\r\n     * to apply it for {@link _remoteVideoActive}.\r\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\r\n     * Jingle video content element advertised by remote peer.\r\n     * @return {boolean} <tt>true</tt> if the change affected state of\r\n     * the underlying peerconnection and renegotiation is required for\r\n     * the changes to take effect.\r\n     * @private\r\n     */\r\n    _modifyRemoteVideoActive(remoteVideoSenders) {\r\n        const isRemoteVideoActive\r\n            = remoteVideoSenders === 'both'\r\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\r\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\r\n\r\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\r\n            logger.debug(\r\n                `${this} new remote video active: ${isRemoteVideoActive}`);\r\n            this._remoteVideoActive = isRemoteVideoActive;\r\n        }\r\n\r\n        return this.peerconnection.setVideoTransferActive(\r\n            this._localVideoActive && this._remoteVideoActive);\r\n    }\r\n\r\n    /**\r\n     * Figures out added/removed ssrcs and send update IQs.\r\n     * @param oldSDP SDP object for old description.\r\n     * @param newSDP SDP object for new description.\r\n     */\r\n    notifyMySSRCUpdate(oldSDP, newSDP) {\r\n\r\n        if (this.state !== JingleSessionState.ACTIVE) {\r\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.connection.connected) {\r\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\r\n            if (!this._cachedOldLocalSdp) {\r\n                this._cachedOldLocalSdp = oldSDP;\r\n            }\r\n            this._cachedNewLocalSdp = newSDP;\r\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\r\n\r\n            return;\r\n        }\r\n\r\n        this._cachedOldLocalSdp = undefined;\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        // send source-remove IQ.\r\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\r\n        const remove = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-remove',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\r\n\r\n        if (removedAnySSRCs) {\r\n            logger.info('Sending source-remove', remove.tree());\r\n            this.connection.sendIQ(\r\n                remove, null,\r\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\r\n        } else {\r\n            logger.log('removal not necessary');\r\n        }\r\n\r\n        // send source-add IQ.\r\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\r\n        const add = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-add',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n\r\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\r\n\r\n        if (containsNewSSRCs) {\r\n            logger.info('Sending source-add', add.tree());\r\n            this.connection.sendIQ(\r\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\r\n        } else {\r\n            logger.log('addition not necessary');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method returns function(errorResponse) which is a callback to be passed\r\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\r\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\r\n     * structure is as follows:\r\n     * {\r\n     *  code: {XMPP error response code}\r\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\r\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\r\n     *  source: {request.tree() that provides original request}\r\n     *  session: {this JingleSessionPC.toString()}\r\n     * }\r\n     * @param request Strophe IQ instance which is the request to be dumped into\r\n     *        the error structure\r\n     * @param failureCb function(error) called when error response was returned\r\n     *        or when a timeout has occurred.\r\n     * @returns {function(this:JingleSessionPC)}\r\n     */\r\n    newJingleErrorHandler(request, failureCb) {\r\n        return errResponse => {\r\n\r\n            const error = {};\r\n\r\n            // Get XMPP error code and condition(reason)\r\n            const errorElSel = $(errResponse).find('error');\r\n\r\n            if (errorElSel.length) {\r\n                error.code = errorElSel.attr('code');\r\n                const errorReasonSel = $(errResponse).find('error :first');\r\n\r\n                if (errorReasonSel.length) {\r\n                    error.reason = errorReasonSel[0].tagName;\r\n                }\r\n\r\n                const errorMsgSel = errorElSel.find('>text');\r\n\r\n                if (errorMsgSel.length) {\r\n                    error.msg = errorMsgSel.text();\r\n                }\r\n            }\r\n\r\n            if (!errResponse) {\r\n                error.reason = 'timeout';\r\n            }\r\n\r\n            error.session = this.toString();\r\n\r\n            if (failureCb) {\r\n                failureCb(error);\r\n            } else if (this.state === JingleSessionState.ENDED\r\n                        && error.reason === 'item-not-found') {\r\n                // When remote peer decides to terminate the session, but it\r\n                // still have few messages on the queue for processing,\r\n                // it will first send us 'session-terminate' (we enter ENDED)\r\n                // and then follow with 'item-not-found' for the queued requests\r\n                // We don't want to have that logged on error level.\r\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\r\n            } else {\r\n                GlobalOnErrorHandler.callErrorHandler(\r\n                    new Error(\r\n                        `Jingle error: ${JSON.stringify(error)}`));\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the ice connection state for the peer connection.\r\n     * @returns the ice connection state for the peer connection.\r\n     */\r\n    getIceConnectionState() {\r\n        return this.peerconnection.getConnectionState();\r\n    }\r\n\r\n    /**\r\n     * Closes the peerconnection.\r\n     */\r\n    close() {\r\n        this.state = JingleSessionState.ENDED;\r\n        this.establishmentDuration = undefined;\r\n\r\n        if (this.peerconnection) {\r\n            this.peerconnection.onicecandidate = null;\r\n            this.peerconnection.oniceconnectionstatechange = null;\r\n            this.peerconnection.onnegotiationneeded = null;\r\n            this.peerconnection.onsignalingstatechange = null;\r\n        }\r\n\r\n        // Remove any pending tasks from the queue\r\n        this.modificationQueue.clear();\r\n\r\n        this.modificationQueue.push(finishCallback => {\r\n            // The signaling layer will remove it's listeners\r\n            this.signalingLayer.setChatRoom(null);\r\n\r\n            // do not try to close if already closed.\r\n            this.peerconnection && this.peerconnection.close();\r\n            finishCallback();\r\n        });\r\n\r\n        // No more tasks can go in after the close task\r\n        this.modificationQueue.shutdown();\r\n    }\r\n\r\n    /**\r\n     * Converts to string with minor summary.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `JingleSessionPC[p2p=${this.isP2P},`\r\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\r\n    }\r\n\r\n    /**\r\n     * If the A/B test for suspend video is disabled according to the room's\r\n     * configuration, returns undefined. Otherwise returns a boolean which\r\n     * indicates whether the suspend video option should be enabled or disabled.\r\n     * @param {JingleSessionPCOptions} options - The config options.\r\n     */\r\n    _abtestSuspendVideoEnabled({ abTesting }) {\r\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\r\n            return;\r\n        }\r\n\r\n        // We want the two participants in a P2P call to agree on the value of\r\n        // the \"suspend\" option. We use the JID of the initiator, because it is\r\n        // both randomly selected and agreed upon by both participants.\r\n        const jid = this._getInitiatorJid();\r\n\r\n        return integerHash(jid) % 2 === 0;\r\n    }\r\n}\r\n","export default {\r\n    /**\r\n     * Event triggered when the remote party signals it's receive video max frame height.\r\n     */\r\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\r\n};\r\n","/**\r\n * The events for the media devices.\r\n */\r\n\r\n/**\r\n * Indicates that the list of available media devices has been changed. The\r\n * event provides the following parameters to its listeners:\r\n *\r\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\r\n *  MediaDeviceInfo-like objects that are currently connected.\r\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\r\n */\r\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\r\n\r\n/**\r\n * Indicates that the environment is currently showing permission prompt to\r\n * access camera and/or microphone. The event provides the following\r\n * parameters to its listeners:\r\n *\r\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\r\n *  |'react-native'|'android'} environmentType - type of browser or\r\n *  other execution environment.\r\n */\r\nexport const PERMISSION_PROMPT_IS_SHOWN\r\n    = 'mediaDevices.permissionPromptIsShown';\r\n","import SDPUtil from './SDPUtil';\r\n\r\n// this could be useful in Array.prototype.\r\n/**\r\n *\r\n * @param array1\r\n * @param array2\r\n */\r\nfunction arrayEquals(array1, array2) {\r\n    // if the other array is a falsy value, return\r\n    if (!array2) {\r\n        return false;\r\n    }\r\n\r\n    // compare lengths - can save a lot of time\r\n    if (array1.length !== array2.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0, l = array1.length; i < l; i++) {\r\n        // Check if we have nested arrays\r\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\r\n            // recurse into the nested arrays\r\n            if (!array1[i].equals(array2[i])) {\r\n                return false;\r\n            }\r\n        } else if (array1[i] !== array2[i]) {\r\n            // Warning - two different object instances will never be\r\n            // equal: {x:20} != {x:20}\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n *\r\n * @param mySDP\r\n * @param otherSDP\r\n */\r\nexport default function SDPDiffer(mySDP, otherSDP) {\r\n    this.mySDP = mySDP;\r\n    this.otherSDP = otherSDP;\r\n    if (!mySDP) {\r\n        throw new Error('\"mySDP\" is undefined!');\r\n    } else if (!otherSDP) {\r\n        throw new Error('\"otherSDP\" is undefined!');\r\n    }\r\n}\r\n\r\n/**\r\n * Returns map of MediaChannel that contains media contained in\r\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\r\n */\r\nSDPDiffer.prototype.getNewMedia = function() {\r\n\r\n    const myMedias = this.mySDP.getMediaSsrcMap();\r\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\r\n    const newMedia = {};\r\n\r\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\r\n        const myMedia = myMedias[othersMediaIdx];\r\n        const othersMedia = othersMedias[othersMediaIdx];\r\n\r\n        if (!myMedia && othersMedia) {\r\n            // Add whole channel\r\n            newMedia[othersMediaIdx] = othersMedia;\r\n\r\n            return;\r\n        }\r\n\r\n        // Look for new ssrcs across the channel\r\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\r\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\r\n                // Allocate channel if we've found ssrc that doesn't exist in\r\n                // our channel\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\r\n            } else if (othersMedia.ssrcs[ssrc].lines\r\n                        && myMedia.ssrcs[ssrc].lines) {\r\n                // we want to detect just changes in adding/removing msid\r\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n\r\n                if (myContainMsid !== newContainMsid) {\r\n                    if (!newMedia[othersMediaIdx]) {\r\n                        newMedia[othersMediaIdx] = {\r\n                            mediaindex: othersMedia.mediaindex,\r\n                            mid: othersMedia.mid,\r\n                            ssrcs: {},\r\n                            ssrcGroups: []\r\n                        };\r\n                    }\r\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\r\n                        = othersMedia.ssrcs[ssrc];\r\n                }\r\n            }\r\n        });\r\n\r\n        // Look for new ssrc groups across the channels\r\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\r\n\r\n            // try to match the other ssrc-group with an ssrc-group of ours\r\n            let matched = false;\r\n\r\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\r\n                const mySsrcGroup = myMedia.ssrcGroups[i];\r\n\r\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\r\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\r\n\r\n                    matched = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!matched) {\r\n                // Allocate channel if we've found an ssrc-group that doesn't\r\n                // exist in our channel\r\n\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\r\n            }\r\n        });\r\n    });\r\n\r\n    return newMedia;\r\n};\r\n\r\n/**\r\n * TODO: document!\r\n */\r\nSDPDiffer.prototype.toJingle = function(modify) {\r\n    const sdpMediaSsrcs = this.getNewMedia();\r\n\r\n    let modified = false;\r\n\r\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\r\n        modified = true;\r\n        const media = sdpMediaSsrcs[mediaindex];\r\n\r\n        modify.c('content', { name: media.mid });\r\n\r\n        modify.c('description',\r\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                media: media.mid });\r\n\r\n        // FIXME: not completely sure this operates on blocks and / or handles\r\n        // different ssrcs correctly\r\n        // generate sources from lines\r\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\r\n            const mediaSsrc = media.ssrcs[ssrcNum];\r\n\r\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\r\n\r\n            // iterate over ssrc lines\r\n            mediaSsrc.lines.forEach(line => {\r\n                const idx = line.indexOf(' ');\r\n                const kv = line.substr(idx + 1);\r\n\r\n                modify.c('parameter');\r\n                if (kv.indexOf(':') === -1) {\r\n                    modify.attrs({ name: kv });\r\n                } else {\r\n                    const nv = kv.split(':', 2);\r\n                    const name = nv[0];\r\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\r\n\r\n                    modify.attrs({ name });\r\n                    modify.attrs({ value });\r\n                }\r\n                modify.up(); // end of parameter\r\n            });\r\n            modify.up(); // end of source\r\n        });\r\n\r\n        // generate source groups from lines\r\n        media.ssrcGroups.forEach(ssrcGroup => {\r\n            if (ssrcGroup.ssrcs.length) {\r\n\r\n                modify.c('ssrc-group', {\r\n                    semantics: ssrcGroup.semantics,\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                });\r\n\r\n                ssrcGroup.ssrcs.forEach(ssrc => {\r\n                    modify.c('source', { ssrc })\r\n                        .up(); // end of source\r\n                });\r\n                modify.up(); // end of ssrc-group\r\n            }\r\n        });\r\n\r\n        modify.up(); // end of description\r\n        modify.up(); // end of content\r\n    });\r\n\r\n    return modified;\r\n};\r\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","const currentExecutingScript = require('current-executing-script');\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Implements utility functions which facilitate the dealing with scripts such\r\n * as the download and execution of a JavaScript file.\r\n */\r\nconst ScriptUtil = {\r\n    /**\r\n     * Loads a script from a specific source.\r\n     *\r\n     * @param src the source from the which the script is to be (down)loaded\r\n     * @param async true to asynchronously load the script or false to\r\n     * synchronously load the script\r\n     * @param prepend true to schedule the loading of the script as soon as\r\n     * possible or false to schedule the loading of the script at the end of the\r\n     * scripts known at the time\r\n     * @param relativeURL whether we need load the library from url relative\r\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\r\n     * library from different location than the app that is using it\r\n     * @param loadCallback on load callback function\r\n     * @param errorCallback callback to be called on error loading the script\r\n     */\r\n    loadScript(\r\n            src,\r\n            async,\r\n            prepend,\r\n            relativeURL,\r\n            loadCallback,\r\n            errorCallback) {\r\n        const d = document;\r\n        const tagName = 'script';\r\n        const script = d.createElement(tagName);\r\n        const referenceNode = d.getElementsByTagName(tagName)[0];\r\n\r\n        script.async = async;\r\n\r\n        if (relativeURL) {\r\n            // finds the src url of the current loaded script\r\n            // and use it as base of the src supplied argument\r\n            const scriptEl = currentExecutingScript();\r\n\r\n            if (scriptEl) {\r\n                const scriptSrc = scriptEl.src;\r\n                const baseScriptSrc\r\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\r\n\r\n                if (scriptSrc && baseScriptSrc) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    src = baseScriptSrc + src;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loadCallback) {\r\n            script.onload = loadCallback;\r\n        }\r\n        if (errorCallback) {\r\n            script.onerror = errorCallback;\r\n        }\r\n\r\n        script.src = src;\r\n        if (prepend) {\r\n            referenceNode.parentNode.insertBefore(script, referenceNode);\r\n        } else {\r\n            referenceNode.parentNode.appendChild(script);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = ScriptUtil;\r\n","/**\r\n * Provides statistics for the local stream.\r\n */\r\n\r\n/**\r\n * Size of the webaudio analyzer buffer.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\r\n\r\n/**\r\n * Value of the webaudio analyzer smoothing time parameter.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\r\n\r\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nlet context = null;\r\n\r\nif (window.AudioContext) {\r\n    context = new AudioContext();\r\n\r\n    // XXX Not all browsers define a suspend method on AudioContext. As the\r\n    // invocation is at the (ES6 module) global execution level, it breaks the\r\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\r\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\r\n    // example, Google Chrome 40 on Android does not define the method but we\r\n    // still want to be able to load the lib-jitsi-meet library there and\r\n    // display a page which notifies the user that the Web app is not supported\r\n    // there.\r\n    context.suspend && context.suspend();\r\n}\r\n\r\n/**\r\n * Converts time domain data array to audio level.\r\n * @param samples the time domain data array.\r\n * @returns {number} the audio level\r\n */\r\nfunction timeDomainDataToAudioLevel(samples) {\r\n\r\n    let maxVolume = 0;\r\n\r\n    const length = samples.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        if (maxVolume < samples[i]) {\r\n            maxVolume = samples[i];\r\n        }\r\n    }\r\n\r\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\r\n}\r\n\r\n/**\r\n * Animates audio level change\r\n * @param newLevel the new audio level\r\n * @param lastLevel the last audio level\r\n * @returns {Number} the audio level to be set\r\n */\r\nfunction animateLevel(newLevel, lastLevel) {\r\n    let value = 0;\r\n    const diff = lastLevel - newLevel;\r\n\r\n    if (diff > 0.2) {\r\n        value = lastLevel - 0.2;\r\n    } else if (diff < -0.4) {\r\n        value = lastLevel + 0.4;\r\n    } else {\r\n        value = newLevel;\r\n    }\r\n\r\n    return parseFloat(value.toFixed(3));\r\n}\r\n\r\n\r\n/**\r\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\r\n *\r\n * @param stream the local stream\r\n * @param interval stats refresh interval given in ms.\r\n * @param callback function that receives the audio levels.\r\n * @constructor\r\n */\r\nexport default function LocalStatsCollector(stream, interval, callback) {\r\n    this.stream = stream;\r\n    this.intervalId = null;\r\n    this.intervalMilis = interval;\r\n    this.audioLevel = 0;\r\n    this.callback = callback;\r\n}\r\n\r\n/**\r\n * Starts the collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.start = function() {\r\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\r\n        return;\r\n    }\r\n    context.resume();\r\n    const analyser = context.createAnalyser();\r\n\r\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\r\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\r\n\r\n    const source = context.createMediaStreamSource(this.stream);\r\n\r\n    source.connect(analyser);\r\n\r\n    this.intervalId = setInterval(\r\n        () => {\r\n            const array = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n            analyser.getByteTimeDomainData(array);\r\n            const audioLevel = timeDomainDataToAudioLevel(array);\r\n\r\n            // Set the audio levels always as NoAudioSignalDetection now\r\n            // uses audio levels from LocalStatsCollector and waits for\r\n            // atleast 4 secs for a no audio signal before displaying the\r\n            // notification on the UI.\r\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\r\n            this.callback(this.audioLevel);\r\n        },\r\n        this.intervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Stops collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.stop = function() {\r\n    if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the environment has the necessary conditions to support\r\n * collecting stats from local streams.\r\n *\r\n * @returns {boolean}\r\n */\r\nLocalStatsCollector.isLocalStatsSupported = function() {\r\n    return Boolean(context);\r\n};\r\n","/* global $ */\r\n\r\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Listenable from '../util/Listenable';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * The property\r\n */\r\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\r\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\r\nconst HASH = 'sha-1';\r\n\r\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\r\n\r\n/**\r\n *\r\n * @param a\r\n * @param b\r\n */\r\nfunction compareIdentities(a, b) {\r\n    let res = 0;\r\n\r\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\r\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\r\n    );\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Produces a sha-1 from provided identity and features values.\r\n *\r\n * @param {Array<Object>} identities - The identity objects.\r\n * @param {Array<string>} features - The features.\r\n * @returns {string}\r\n */\r\nfunction generateSha(identities, features) {\r\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\r\n        (accumulatedValue, identity) => `${\r\n            IDENTITY_PROPERTIES.reduce(\r\n                (tmp, key, idx) =>\r\n                    tmp\r\n                        + (idx === 0 ? '' : '/')\r\n                        + (identity[key] ? identity[key] : ''),\r\n                '')\r\n        }<`, '');\r\n    const sortedFeatures = features.sort().reduce(\r\n        (tmp, feature) => `${tmp + feature}<`, '');\r\n\r\n    return b64_sha1(sortedIdentities + sortedFeatures);\r\n}\r\n\r\n/**\r\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\r\n */\r\nexport default class Caps extends Listenable {\r\n    /**\r\n     * Constructs new Caps instance.\r\n     * @param {Strophe.Connection} connection the strophe connection object\r\n     * @param {String} node the value of the node attribute of the \"c\" xml node\r\n     * that will be sent to the other participants\r\n     */\r\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\r\n        super();\r\n        this.node = node;\r\n        this.disco = connection.disco;\r\n        if (!this.disco) {\r\n            throw new Error(\r\n                'Missing strophe-plugins '\r\n                + '(disco plugin is required)!');\r\n        }\r\n\r\n        this.versionToCapabilities = Object.create(null);\r\n        this.jidToVersion = Object.create(null);\r\n        this.version = '';\r\n        this.rooms = new Set();\r\n\r\n        const emuc = connection.emuc;\r\n\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\r\n            room => this._addChatRoom(room));\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\r\n            room => this._removeChatRoom(room));\r\n        Object.keys(emuc.rooms).forEach(jid => {\r\n            this._addChatRoom(emuc.rooms[jid]);\r\n        });\r\n\r\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\r\n        this.disco.addFeature(Strophe.NS.CAPS);\r\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\r\n\r\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds new feature to the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    addFeature(feature, submit = false) {\r\n        this.disco.addFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a feature from the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    removeFeature(feature, submit = false) {\r\n        this.disco.removeFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends new presence stanza for every room from the list of rooms.\r\n     */\r\n    submit() {\r\n        this.rooms.forEach(room => room.sendPresence());\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a participant.\r\n     * @param {String} jid the jid of the participant\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(jid, timeout = 5000) {\r\n        const user\r\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\r\n\r\n        if (!user || !(user.version in this.versionToCapabilities)) {\r\n            const node = user ? `${user.node}#${user.version}` : null;\r\n\r\n            return this._getDiscoInfo(jid, node, timeout)\r\n                .then(({ features, identities }) => {\r\n                    if (user) {\r\n                        const sha = generateSha(\r\n                            Array.from(identities),\r\n                            Array.from(features)\r\n                        );\r\n                        const receivedNode = `${user.node}#${sha}`;\r\n\r\n                        if (receivedNode === node) {\r\n                            this.versionToCapabilities[receivedNode] = features;\r\n\r\n                            return features;\r\n                        }\r\n\r\n                        // Check once if it has been cached asynchronously.\r\n                        if (this.versionToCapabilities[receivedNode]) {\r\n                            return this.versionToCapabilities[receivedNode];\r\n                        }\r\n\r\n                        logger.error(`Expected node ${node} but received ${\r\n                            receivedNode}`);\r\n\r\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\r\n                    }\r\n                });\r\n        }\r\n\r\n        return Promise.resolve(this.versionToCapabilities[user.version]);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\r\n        return this._getDiscoInfo(jid, node, timeout);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features and identities for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {String|null} node the node to query\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Object>}\r\n     * @private\r\n     */\r\n    _getDiscoInfo(jid, node, timeout) {\r\n        return new Promise((resolve, reject) =>\r\n            this.disco.info(jid, node, response => {\r\n                const features = new Set();\r\n                const identities = new Set();\r\n\r\n                $(response)\r\n                    .find('>query>feature')\r\n                    .each(\r\n                        (_, el) => features.add(el.getAttribute('var')));\r\n                $(response)\r\n                    .find('>query>identity')\r\n                    .each(\r\n                        (_, el) => identities.add({\r\n                            type: el.getAttribute('type'),\r\n                            name: el.getAttribute('name'),\r\n                            category: el.getAttribute('category')\r\n                        }));\r\n                resolve({\r\n                    features,\r\n                    identities });\r\n            }, reject, timeout)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\r\n     * and adds \"c\" element to the presences of the room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _addChatRoom(room) {\r\n        this.rooms.add(room);\r\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n        this._fixChatRoomPresenceMap(room);\r\n    }\r\n\r\n    /**\r\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\r\n     * added from the Caps class.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _removeChatRoom(room) {\r\n        this.rooms.delete(room);\r\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n    }\r\n\r\n    /**\r\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _fixChatRoomPresenceMap(room) {\r\n        room.addToPresence('c', {\r\n            attributes: {\r\n                xmlns: Strophe.NS.CAPS,\r\n                hash: HASH,\r\n                node: this.node,\r\n                ver: this.version\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles this.version changes.\r\n     */\r\n    _notifyVersionChanged() {\r\n        // update the version for all rooms\r\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\r\n    }\r\n\r\n    /**\r\n     * Generates the value for the \"ver\" attribute.\r\n     */\r\n    _generateVersion() {\r\n        this.version\r\n            = generateSha(this.disco._identities, this.disco._features);\r\n\r\n        this._notifyVersionChanged();\r\n    }\r\n\r\n    /**\r\n     * Parses the \"c\" xml node from presence.\r\n     * @param {DOMElement} stanza the presence packet\r\n     */\r\n    _handleCaps(stanza) {\r\n        const from = stanza.getAttribute('from');\r\n        const caps = stanza.querySelector('c');\r\n        const version = caps.getAttribute('ver');\r\n        const node = caps.getAttribute('node');\r\n        const oldVersion = this.jidToVersion[from];\r\n\r\n        this.jidToVersion[from] = { version,\r\n            node };\r\n        if (oldVersion && oldVersion.version !== version) {\r\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                from);\r\n        }\r\n\r\n        // return true to not remove the handler from Strophe\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes entry from this.jidToVersion map.\r\n     * @param {String} jid the jid to be removed.\r\n     */\r\n    _removeJidToVersionEntry(jid) {\r\n        if (jid in this.jidToVersion) {\r\n            delete this.jidToVersion[jid];\r\n        }\r\n    }\r\n}\r\n","/**\r\n * The transciption is on.\r\n *\r\n * @type {String}\r\n */\r\nexport const ON = 'on';\r\n\r\n/**\r\n * The transciption is off.\r\n *\r\n * @type {String}\r\n */\r\nexport const OFF = 'off';\r\n","/* global __filename, module */\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport browser from '../browser';\r\n\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Maps our handler types to MediaStreamTrack properties.\r\n */\r\nconst trackHandler2Prop = {\r\n    'track_mute': 'onmute', // Not supported on FF\r\n    'track_unmute': 'onunmute',\r\n    'track_ended': 'onended'\r\n};\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiTrack extends EventEmitter {\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Represents a single media track (either audio or video).\r\n     * @constructor\r\n     * @param conference the rtc instance\r\n     * @param stream the WebRTC MediaStream instance\r\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\r\n     * the given <tt>stream</tt>.\r\n     * @param streamInactiveHandler the function that will handle\r\n     *        onended/oninactive events of the stream.\r\n     * @param trackMediaType the media type of the JitsiTrack\r\n     * @param videoType the VideoType for this track if any\r\n     */\r\n    constructor(\r\n            conference,\r\n            stream,\r\n            track,\r\n            streamInactiveHandler,\r\n            trackMediaType,\r\n            videoType) {\r\n        super();\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n\r\n        /**\r\n         * Array with the HTML elements that are displaying the streams.\r\n         * @type {Array}\r\n         */\r\n        this.containers = [];\r\n        this.conference = conference;\r\n        this.audioLevel = -1;\r\n        this.type = trackMediaType;\r\n        this.track = track;\r\n        this.videoType = videoType;\r\n        this.handlers = new Map();\r\n\r\n        /**\r\n         * Indicates whether this JitsiTrack has been disposed. If true, this\r\n         * JitsiTrack is to be considered unusable and operations involving it\r\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\r\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The inactive handler which will be triggered when the underlying\r\n         * <tt>MediaStream</tt> ends.\r\n         *\r\n         * @private\r\n         * @type {Function}\r\n         */\r\n        this._streamInactiveHandler = streamInactiveHandler;\r\n\r\n        this._setStream(stream);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\r\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\r\n     * a onended event on the MediaStreamTrack.\r\n     * @param {Function} handler the handler\r\n     */\r\n    _addMediaStreamInactiveHandler(handler) {\r\n        if (browser.isFirefox()) {\r\n            this.track.onended = handler;\r\n        } else {\r\n            this.stream.oninactive = handler;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\r\n     * depending on the passed type.\r\n     * @param {string} type the type of the handler that is going to be set\r\n     * @param {Function} handler the handler.\r\n     */\r\n    _setHandler(type, handler) {\r\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\r\n            logger.error(`Invalid handler type ${type}`);\r\n\r\n            return;\r\n        }\r\n        if (handler) {\r\n            this.handlers.set(type, handler);\r\n        } else {\r\n            this.handlers.delete(type);\r\n        }\r\n\r\n        if (this.stream) {\r\n            for (const track of this.stream.getTracks()) {\r\n                track[trackHandler2Prop[type]] = handler;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event handlers bound to the underlying media stream/track\r\n     * @private\r\n     */\r\n    _unregisterHandlers() {\r\n        if (!this.stream) {\r\n            logger.warn(\r\n                `${this}: unable to unregister handlers - no stream object`);\r\n\r\n            return;\r\n        }\r\n\r\n        for (const type of this.handlers.keys()) {\r\n            // FIXME Why only video tracks?\r\n            for (const videoTrack of this.stream.getVideoTracks()) {\r\n                videoTrack[trackHandler2Prop[type]] = undefined;\r\n            }\r\n        }\r\n        if (this._streamInactiveHandler) {\r\n            this._addMediaStreamInactiveHandler(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        if (this.stream === stream) {\r\n            return;\r\n        }\r\n\r\n        this.stream = stream;\r\n\r\n        // TODO Practically, that's like the opposite of _unregisterHandlers\r\n        // i.e. may be abstracted into a function/method called\r\n        // _registerHandlers for clarity and easing the maintenance of the two\r\n        // pieces of source code.\r\n        if (this.stream) {\r\n            for (const type of this.handlers.keys()) {\r\n                this._setHandler(type, this.handlers.get(type));\r\n            }\r\n            if (this._streamInactiveHandler) {\r\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the type (audio or video) of this track.\r\n     */\r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    /**\r\n     * Check if this is an audio track.\r\n     */\r\n    isAudioTrack() {\r\n        return this.getType() === MediaType.AUDIO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\r\n     * according to it's 'muted' field status.\r\n     * @return {boolean} <tt>true</tt> if the underlying\r\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\r\n     */\r\n    isWebRTCTrackMuted() {\r\n        return this.track && this.track.muted;\r\n    }\r\n\r\n    /**\r\n     * Check if this is a video track.\r\n     */\r\n    isVideoTrack() {\r\n        return this.getType() === MediaType.VIDEO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether this is a local track.\r\n     * @abstract\r\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\r\n     */\r\n    isLocal() {\r\n        throw new Error('Not implemented by subclass');\r\n    }\r\n\r\n    /**\r\n     * Check whether this is a local audio track.\r\n     *\r\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\r\n     */\r\n    isLocalAudioTrack() {\r\n        return this.isAudioTrack() && this.isLocal();\r\n    }\r\n\r\n    /**\r\n     * Returns the WebRTC MediaStream instance.\r\n     */\r\n    getOriginalStream() {\r\n        return this.stream;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getStreamId() {\r\n        return this.stream ? this.stream.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack\r\n     * @returns {MediaStreamTrack}\r\n     */\r\n    getTrack() {\r\n        return this.track;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack label\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this.track.label;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getTrackId() {\r\n        return this.track ? this.track.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return meaningful usage label for this track depending on it's media and\r\n     * eventual video type.\r\n     * @returns {string}\r\n     */\r\n    getUsageLabel() {\r\n        if (this.isAudioTrack()) {\r\n            return 'mic';\r\n        }\r\n\r\n        return this.videoType ? this.videoType : 'default';\r\n    }\r\n\r\n    /**\r\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\r\n     * @param container the video/audio container to which this stream is\r\n     *        attached and for which event will be fired.\r\n     * @private\r\n     */\r\n    _maybeFireTrackAttached(container) {\r\n        if (this.conference && container) {\r\n            this.conference._onTrackAttach(this, container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the MediaStream of this track to an HTML container.\r\n     * Adds the container to the list of containers that are displaying the\r\n     * track.\r\n     *\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(container) {\r\n        if (this.stream) {\r\n            this._onTrackAttach(container);\r\n            RTCUtils.attachMediaStream(container, this.stream);\r\n        }\r\n        this.containers.push(container);\r\n        this._maybeFireTrackAttached(container);\r\n        this._attachTTFMTracker(container);\r\n    }\r\n\r\n    /**\r\n     * Removes this JitsiTrack from the passed HTML container.\r\n     *\r\n     * @param container the HTML container to detach from this JitsiTrack. If\r\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\r\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\r\n     * which this JitsiTrack is currently attached.\r\n     */\r\n    detach(container) {\r\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\r\n            const c = cs[i];\r\n\r\n            if (!container) {\r\n                this._onTrackDetach(c);\r\n                RTCUtils.attachMediaStream(c, null);\r\n            }\r\n            if (!container || c === container) {\r\n                cs.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        if (container) {\r\n            this._onTrackDetach(container);\r\n            RTCUtils.attachMediaStream(container, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Removes attached event listeners.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this.removeAllListeners();\r\n\r\n        this.disposed = true;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Returns true if this is a video track and the source of the video is a\r\n     * screen capture as opposed to a camera.\r\n     */\r\n    isScreenSharing() {\r\n        // FIXME: Should be fixed or removed.\r\n    }\r\n\r\n    /**\r\n     * Returns id of the track.\r\n     * @returns {string|null} id of the track or null if this is fake track.\r\n     */\r\n    getId() {\r\n        if (this.stream) {\r\n            return RTCUtils.getStreamID(this.stream);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the MediaStream is active/not ended.\r\n     * When there is no check for active we don't have information and so\r\n     * will return that stream is active (in case of FF).\r\n     * @returns {boolean} whether MediaStream is active.\r\n     */\r\n    isActive() {\r\n        if (typeof this.stream.active !== 'undefined') {\r\n            return this.stream.active;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio level for the stream\r\n     * @param {number} audioLevel value between 0 and 1\r\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\r\n     * is source for the audio level. It can be <tt>undefined</tt> for\r\n     * a local track if the audio level was measured outside of the\r\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\r\n     */\r\n    setAudioLevel(audioLevel, tpc) {\r\n        if (this.audioLevel !== audioLevel) {\r\n            this.audioLevel = audioLevel;\r\n            this.emit(\r\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                audioLevel,\r\n                tpc);\r\n\r\n        // LocalStatsCollector reports a value of 0.008 for muted mics\r\n        // and a value of 0 when there is no audio input.\r\n        } else if (this.audioLevel === 0\r\n            && audioLevel === 0\r\n            && this.isLocal()\r\n            && !this.isWebRTCTrackMuted()) {\r\n            this.emit(\r\n                JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                audioLevel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the msid of the stream attached to the JitsiTrack object or null\r\n     * if no stream is attached.\r\n     */\r\n    getMSID() {\r\n        const streamId = this.getStreamId();\r\n        const trackId = this.getTrackId();\r\n\r\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\r\n    }\r\n\r\n    /**\r\n     * Sets new audio output device for track's DOM elements. Video tracks are\r\n     * ignored.\r\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\r\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\r\n     * @returns {Promise}\r\n     */\r\n    setAudioOutput(audioOutputDeviceId) {\r\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        // All audio communication is done through audio tracks, so ignore\r\n        // changing audio output for video tracks at all.\r\n        if (this.isVideoTrack()) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return (\r\n            Promise.all(\r\n                this.containers.map(\r\n                    element =>\r\n                        element.setSinkId(audioOutputDeviceId)\r\n                            .catch(error => {\r\n                                logger.warn(\r\n                                    'Failed to change audio output device on'\r\n                                        + ' element. Default or previously set'\r\n                                        + ' audio output device will be used.',\r\n                                    element,\r\n                                    error);\r\n                                throw error;\r\n                            }))\r\n            )\r\n                .then(() => {\r\n                    this.emit(\r\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\r\n                        audioOutputDeviceId);\r\n                }));\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport RTC from '../RTC/RTC';\r\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\r\n\r\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\r\n\r\n/**\r\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\r\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\r\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\r\n * score is published to consumers via an EventEmitter.\r\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\r\n *\r\n * @fires VAD_SCORE_PUBLISHED\r\n */\r\nexport default class TrackVADEmitter extends EventEmitter {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\r\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\r\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\r\n     */\r\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\r\n        super();\r\n\r\n        /**\r\n         * Sample rate of the ScriptProcessorNode.\r\n         */\r\n        this._procNodeSampleRate = procNodeSampleRate;\r\n\r\n        /**\r\n         * VAD Processor that allows us to calculate VAD score for PCM samples\r\n         */\r\n        this._vadProcessor = vadProcessor;\r\n\r\n        /**\r\n         * The JitsiLocalTrack instance.\r\n         */\r\n        this._localTrack = jitsiLocalTrack;\r\n\r\n        /**\r\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\r\n         */\r\n        this._bufferResidue = new Float32Array([]);\r\n\r\n        /**\r\n         * The AudioContext instance with the preferred sample frequency.\r\n         */\r\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\r\n\r\n        /**\r\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\r\n         * saves a couple of function calls.\r\n         */\r\n        this._vadSampleSize = vadProcessor.getSampleLength();\r\n\r\n        /**\r\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\r\n         * sample rate.\r\n         */\r\n        this._onAudioProcess = this._onAudioProcess.bind(this);\r\n\r\n        this._initializeAudioContext();\r\n    }\r\n\r\n    /**\r\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\r\n     *\r\n     * @param {string} micDeviceId - Target microphone device id.\r\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\r\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\r\n     * The processor needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\r\n     */\r\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\r\n        return RTC.obtainAudioAndVideoPermissions({\r\n            devices: [ 'audio' ],\r\n            micDeviceId\r\n        }).then(localTrack => {\r\n            // We only expect one audio track when specifying a device id.\r\n            if (!localTrack[0]) {\r\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\r\n            }\r\n\r\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\r\n\r\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\r\n            // life cycle is handled by whoever created this instance.\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets up the audio graph in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initializeAudioContext() {\r\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\r\n\r\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\r\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\r\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\r\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\r\n        // with audio worklet when it's mature enough and has more browser support.\r\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\r\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\r\n    }\r\n\r\n    /**\r\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\r\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\r\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\r\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\r\n     *\r\n     *\r\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\r\n     * @returns {void}\r\n     * @fires VAD_SCORE_PUBLISHED\r\n     */\r\n    _onAudioProcess(audioEvent) {\r\n        // Prepend the residue PCM buffer from the previous process callback.\r\n        const inData = audioEvent.inputBuffer.getChannelData(0);\r\n        const completeInData = [ ...this._bufferResidue, ...inData ];\r\n        const sampleTimestamp = Date.now();\r\n\r\n        let i = 0;\r\n\r\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\r\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\r\n\r\n            // The VAD processor might change the values inside the array so we make a copy.\r\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\r\n\r\n            this.emit(VAD_SCORE_PUBLISHED, {\r\n                timestamp: sampleTimestamp,\r\n                score: vadScore,\r\n                pcmData: pcmSample,\r\n                deviceId: this._localTrack.getDeviceId()\r\n            });\r\n        }\r\n\r\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\r\n    }\r\n\r\n    /**\r\n     * Connects the nodes in the AudioContext to start the flow of audio data.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _connectAudioGraph() {\r\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\r\n        this._audioSource.connect(this._audioProcessingNode);\r\n        this._audioProcessingNode.connect(this._audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the nodes in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _disconnectAudioGraph() {\r\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\r\n        // resulting in calls with and uninitialized context.\r\n        // eslint-disable-next-line no-empty-function\r\n        this._audioProcessingNode.onaudioprocess = () => {};\r\n        this._audioProcessingNode.disconnect();\r\n        this._audioSource.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Cleanup potentially acquired resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _cleanupResources() {\r\n        this._disconnectAudioGraph();\r\n        this._localTrack.stopStream();\r\n    }\r\n\r\n    /**\r\n     * Get the associated track device ID.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._localTrack.getDeviceId();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the associated track label.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this._localTrack.getDeviceLabel();\r\n    }\r\n\r\n    /**\r\n     * Start the emitter by connecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    start() {\r\n        this._connectAudioGraph();\r\n    }\r\n\r\n    /**\r\n     * Stops the emitter by disconnecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        this._disconnectAudioGraph();\r\n        this._bufferResidue = [];\r\n    }\r\n\r\n    /**\r\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n\r\n        this._cleanupResources();\r\n        this._destroyed = true;\r\n    }\r\n}\r\n","/**\r\n * Adapter that creates AudioContext objects depending on the browser.\r\n *\r\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\r\n */\r\nexport function createAudioContext(options) {\r\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\r\n\r\n    if (!AudioContextImpl) {\r\n        return undefined;\r\n    }\r\n\r\n    return new AudioContextImpl(options);\r\n}\r\n","/**\r\n * Indicates that the end-to-end round-trip-time for a participant has changed.\r\n */\r\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger(__filename);\r\nconst SIM_LAYER_1_RID = '1';\r\nconst SIM_LAYER_2_RID = '2';\r\nconst SIM_LAYER_3_RID = '3';\r\n\r\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\r\n\r\n/**\r\n * Handles track related operations on TraceablePeerConnection when browser is\r\n * running in unified plan mode.\r\n */\r\nexport class TPCUtils {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor(peerconnection) {\r\n        this.pc = peerconnection;\r\n\r\n        /**\r\n         * The simulcast encodings that will be configured on the RTCRtpSender\r\n         * for the video tracks in the unified plan mode.\r\n         */\r\n        this.simulcastEncodings = [\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? 2500000 : 200000,\r\n                rid: SIM_LAYER_1_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: 700000,\r\n                rid: SIM_LAYER_2_RID,\r\n                scaleResolutionDownBy: 2.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? 200000 : 2500000,\r\n                rid: SIM_LAYER_3_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\r\n            }\r\n        ];\r\n\r\n        /**\r\n         * Resolution height constraints for the simulcast encodings that\r\n         * are configured for the video tracks.\r\n         */\r\n        this.simulcastStreamConstraints = [];\r\n    }\r\n\r\n    /**\r\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\r\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\r\n     * plan since we have only one FID group per media description.\r\n     * @param {Object} description the webRTC session description instance for the remote\r\n     * description.\r\n     * @private\r\n     */\r\n    _ensureCorrectOrderOfSsrcs(description) {\r\n        const parsedSdp = transform.parse(description.sdp);\r\n\r\n        parsedSdp.media.forEach(mLine => {\r\n            if (mLine.type === 'audio') {\r\n                return;\r\n            }\r\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\r\n                return;\r\n            }\r\n            let reorderedSsrcs = [];\r\n\r\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\r\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\r\n\r\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\r\n            });\r\n            mLine.ssrcs = reorderedSsrcs;\r\n        });\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(parsedSdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains stream encodings that need to be configured on the given track.\r\n     * @param {JitsiLocalTrack} localTrack\r\n     */\r\n    _getStreamEncodings(localTrack) {\r\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\r\n            return this.simulcastEncodings;\r\n        }\r\n\r\n        return [ { active: true } ];\r\n    }\r\n\r\n    /**\r\n     * Takes in a *unified plan* offer and inserts the appropriate\r\n     * parameters for adding simulcast receive support.\r\n     * @param {Object} desc - A session description object\r\n     * @param {String} desc.type - the type (offer/answer)\r\n     * @param {String} desc.sdp - the sdp content\r\n     *\r\n     * @return {Object} A session description (same format as above) object\r\n     * with its sdp field modified to advertise simulcast receive support\r\n     */\r\n    _insertUnifiedPlanSimulcastReceive(desc) {\r\n        // a=simulcast line is not needed on browsers where\r\n        // we munge SDP for turning on simulcast. Remove this check\r\n        // when we move to RID/MID based simulcast on all browsers.\r\n        if (browser.usesSdpMungingForSimulcast()) {\r\n            return desc;\r\n        }\r\n        const sdp = transform.parse(desc.sdp);\r\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\r\n\r\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\r\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\r\n            // the first video description.\r\n            sdp.media.forEach((mline, i) => {\r\n                if (mline.type === 'video' && i !== idx) {\r\n                    sdp.media[i].rids = undefined;\r\n                    sdp.media[i].simulcast = undefined;\r\n\r\n                    // eslint-disable-next-line camelcase\r\n                    sdp.media[i].simulcast_03 = undefined;\r\n                }\r\n            });\r\n\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transform.write(sdp)\r\n            });\r\n        }\r\n\r\n        // In order of highest to lowest spatial quality\r\n        sdp.media[idx].rids = [\r\n            {\r\n                id: SIM_LAYER_1_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_2_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_3_RID,\r\n                direction: 'recv'\r\n            }\r\n        ];\r\n\r\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\r\n        // eslint-disable-next-line max-len\r\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\r\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\r\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\r\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\r\n\r\n        // eslint-disable-next-line camelcase\r\n        sdp.media[idx].simulcast_03 = {\r\n            value: simulcastLine\r\n        };\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Constructs resolution height constraints for the simulcast encodings that are\r\n     * created for a given local video track.\r\n     * @param {MediaStreamTrack} track - the local video track.\r\n     * @returns {void}\r\n     */\r\n    _setSimulcastStreamConstraints(track) {\r\n        if (browser.isReactNative()) {\r\n            return;\r\n        }\r\n\r\n        const height = track.getSettings().height;\r\n\r\n        for (const encoding in this.simulcastEncodings) {\r\n            if (this.simulcastEncodings.hasOwnProperty(encoding)) {\r\n                this.simulcastStreamConstraints.push({\r\n                    height: height / this.simulcastEncodings[encoding].scaleResolutionDownBy,\r\n                    rid: this.simulcastEncodings[encoding].rid\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\r\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\r\n    * @returns {boolean} Returns true if the operation is successful,\r\n    * false otherwise.\r\n    */\r\n    addTrack(localTrack, isInitiator = true) {\r\n        const track = localTrack.getTrack();\r\n\r\n        if (isInitiator) {\r\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\r\n            // to the peerconnection before a session-initiate is sent over to the peer.\r\n            const transceiverInit = {\r\n                direction: 'sendrecv',\r\n                streams: [ localTrack.getOriginalStream() ],\r\n                sendEncodings: []\r\n            };\r\n\r\n            if (!browser.isFirefox()) {\r\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\r\n            }\r\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\r\n        } else {\r\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\r\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\r\n            // unused \"recv-only\" transceiver.\r\n            this.pc.peerconnection.addTrack(track);\r\n        }\r\n\r\n        // Construct the simulcast stream constraints for the newly added track.\r\n        if (localTrack.isVideoTrack() && localTrack.videoType === VideoType.CAMERA && this.pc.isSimulcastOn()) {\r\n            this._setSimulcastStreamConstraints(localTrack.getTrack());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\r\n     * @returns {Promise<boolean>} - Promise that resolves to false if unmute\r\n     * operation is successful, a reject otherwise.\r\n     */\r\n    addTrackUnmute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const track = localTrack.getTrack();\r\n\r\n        // The assumption here is that the first transceiver of the specified\r\n        // media type is that of the local track.\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\r\n\r\n        // If the client starts with audio/video muted setting, the transceiver direction\r\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\r\n        if (transceiver.direction === 'recvonly') {\r\n            const stream = localTrack.getOriginalStream();\r\n\r\n            if (stream) {\r\n                this.pc.peerconnection.addStream(localTrack.getOriginalStream());\r\n                this.setEncodings(localTrack);\r\n                this.pc.localTracks.set(localTrack.rtcId, localTrack);\r\n                transceiver.direction = 'sendrecv';\r\n            }\r\n\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        return transceiver.sender.replaceTrack(track)\r\n            .then(() => {\r\n                this.pc.localTracks.set(localTrack.rtcId, localTrack);\r\n\r\n                return Promise.resolve(false);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Removes the track from the RTCRtpSender as part of the mute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\r\n     * @returns {Promise<boolean>} - Promise that resolves to false if unmute\r\n     * operation is successful, a reject otherwise.\r\n     */\r\n    removeTrackMute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n\r\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\r\n\r\n        return transceiver.sender.replaceTrack(null)\r\n            .then(() => {\r\n                this.pc.localTracks.delete(localTrack.rtcId);\r\n\r\n                return Promise.resolve(false);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Replaces the existing track on a RTCRtpSender with the given track.\r\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\r\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\r\n     * @returns {Promise<false>} Promise that resolves with false as we don't want\r\n     * renegotiation to be triggered automatically after this operation. Renegotiation is\r\n     * done when the browser fires the negotiationeeded event.\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        if (oldTrack && newTrack) {\r\n            const mediaType = newTrack.getType();\r\n            const stream = newTrack.getOriginalStream();\r\n            const track = mediaType === MediaType.AUDIO\r\n                ? stream.getAudioTracks()[0]\r\n                : stream.getVideoTracks()[0];\r\n            const transceiver = this.pc.peerconnection.getTransceivers()\r\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\r\n\r\n            if (!transceiver) {\r\n                return Promise.reject(new Error('replace track failed'));\r\n            }\r\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\r\n\r\n            return transceiver.sender.replaceTrack(track)\r\n                .then(() => {\r\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\r\n\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\r\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                    this.pc._addedStreams.push(stream);\r\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n                        newTrack,\r\n                        this.pc._extractPrimarySSRC(ssrc));\r\n                });\r\n        } else if (oldTrack && !newTrack) {\r\n            if (!this.removeTrackMute(oldTrack)) {\r\n                return Promise.reject(new Error('replace track failed'));\r\n            }\r\n            this.pc.localTracks.delete(oldTrack.rtcId);\r\n            this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n        } else if (newTrack && !oldTrack) {\r\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\r\n\r\n            if (!this.addTrackUnmute(newTrack)) {\r\n                return Promise.reject(new Error('replace track failed'));\r\n            }\r\n            newTrack.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack);\r\n            this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n            this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n        }\r\n\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    /**\r\n    * Enables/disables audio transmission on the peer connection. When\r\n    * disabled the audio transceiver direction will be set to 'inactive'\r\n    * which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable audio media transmission or\r\n    * false to disable.\r\n    * @returns {false} - returns false always so that renegotiation is not automatically\r\n    * triggered after this operation.\r\n    */\r\n    setAudioTransferActive(active) {\r\n        return this.setMediaTransferActive('audio', active);\r\n    }\r\n\r\n    /**\r\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\r\n     * @param {JitsiLocalTrack} track - the current track in use for which\r\n     * the encodings are to be set.\r\n     */\r\n    setEncodings(track) {\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\r\n        const parameters = transceiver.sender.getParameters();\r\n\r\n        parameters.encodings = this._getStreamEncodings(track);\r\n        transceiver.sender.setParameters(parameters);\r\n    }\r\n\r\n    /**\r\n     * Enables/disables media transmission on the peerconnection by changing the direction\r\n     * on the transceiver for the specified media type.\r\n     * @param {String} mediaType - 'audio' or 'video'\r\n     * @param {boolean} active - true to enable media transmission or false\r\n     * to disable.\r\n     * @returns {false} - returns false always so that renegotiation is not automatically\r\n     * triggered after this operation\r\n     */\r\n    setMediaTransferActive(mediaType, active) {\r\n        const transceivers = this.pc.peerconnection.getTransceivers()\r\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n        const localTracks = Array.from(this.pc.localTracks.values())\r\n            .filter(track => track.getType() === mediaType);\r\n\r\n        if (active) {\r\n            transceivers.forEach(transceiver => {\r\n                if (localTracks.length) {\r\n                    transceiver.direction = 'sendrecv';\r\n                    const parameters = transceiver.sender.getParameters();\r\n\r\n                    if (parameters && parameters.encodings && parameters.encodings.length) {\r\n                        parameters.encodings.forEach(encoding => {\r\n                            encoding.active = true;\r\n                        });\r\n                        transceiver.sender.setParameters(parameters);\r\n                    }\r\n                } else {\r\n                    transceiver.direction = 'recvonly';\r\n                }\r\n            });\r\n        } else {\r\n            transceivers.forEach(transceiver => {\r\n                transceiver.direction = 'inactive';\r\n            });\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Enables/disables video media transmission on the peer connection. When\r\n    * disabled the SDP video media direction in the local SDP will be adjusted to\r\n    * 'inactive' which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable video media transmission or\r\n    * false to disable.\r\n    * @returns {false} - returns false always so that renegotiation is not automatically\r\n    * triggered after this operation.\r\n    */\r\n    setVideoTransferActive(active) {\r\n        return this.setMediaTransferActive('video', active);\r\n    }\r\n}\r\n","/**\r\n * A model for keeping track of each user's total\r\n * time as a dominant speaker. The model also\r\n * keeps track of the user's last known name\r\n * in case the user has left the meeting,\r\n * which is also tracked.\r\n */\r\nclass SpeakerStats {\r\n    /**\r\n     * Initializes a new SpeakerStats instance.\r\n     *\r\n     * @constructor\r\n     * @param {string} userId - The id of the user being tracked.\r\n     * @param {string} displayName - The name of the user being tracked.\r\n     * @param {boolean} isLocalStats - True if the stats model tracks\r\n     * the local user.\r\n     * @returns {void}\r\n     */\r\n    constructor(userId, displayName, isLocalStats) {\r\n        this._userId = userId;\r\n        this.setDisplayName(displayName);\r\n        this._isLocalStats = isLocalStats || false;\r\n        this.setDominantSpeaker(false);\r\n        this.totalDominantSpeakerTime = 0;\r\n        this._dominantSpeakerStart = 0;\r\n        this._hasLeft = false;\r\n    }\r\n\r\n    /**\r\n     * Get the user id being tracked.\r\n     *\r\n     * @returns {string} The user id.\r\n     */\r\n    getUserId() {\r\n        return this._userId;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the user being tracked.\r\n     *\r\n     * @returns {string} The user name.\r\n     */\r\n    getDisplayName() {\r\n        return this.displayName;\r\n    }\r\n\r\n    /**\r\n     * Updates the last known name of the user being tracked.\r\n     *\r\n     * @param {string} - The user name.\r\n     * @returns {void}\r\n     */\r\n    setDisplayName(newName) {\r\n        this.displayName = newName;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the stats are tracking the local user.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isLocalStats() {\r\n        return this._isLocalStats;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDominantSpeaker() {\r\n        return this._dominantSpeakerStart > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @param {boolean} - If true, the user will being accumulating time\r\n     * as dominant speaker. If false, the user will not accumulate time\r\n     * and will record any time accumulated since starting as dominant speaker.\r\n     * @returns {void}\r\n     */\r\n    setDominantSpeaker(isNowDominantSpeaker) {\r\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\r\n            this._dominantSpeakerStart = Date.now();\r\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\r\n            const now = Date.now();\r\n            const timeElapsed = now - this._dominantSpeakerStart;\r\n\r\n            this.totalDominantSpeakerTime += timeElapsed;\r\n            this._dominantSpeakerStart = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get how long the tracked user has been dominant speaker.\r\n     *\r\n     * @returns {number} - The speaker time in milliseconds.\r\n     */\r\n    getTotalDominantSpeakerTime() {\r\n        let total = this.totalDominantSpeakerTime;\r\n\r\n        if (this.isDominantSpeaker()) {\r\n            total += Date.now() - this._dominantSpeakerStart;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Get whether or not the user is still in the meeting.\r\n     *\r\n     * @returns {boolean} True if the user is no longer in the meeting.\r\n     */\r\n    hasLeft() {\r\n        return this._hasLeft;\r\n    }\r\n\r\n    /**\r\n     * Set the user as having left the meeting.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    markAsHasLeft() {\r\n        this._hasLeft = true;\r\n        this.setDominantSpeaker(false);\r\n    }\r\n}\r\n\r\nmodule.exports = SpeakerStats;\r\n","const AuthenticationEvents = {\r\n    /**\r\n     * Event callback arguments:\r\n     * function(authenticationEnabled, userIdentity)\r\n     * authenticationEnabled - indicates whether authentication has been enabled\r\n     *                         in this session\r\n     * userIdentity - if user has been logged in then it contains user name. If\r\n     *                contains 'null' or 'undefined' then user is not logged in.\r\n     */\r\n    IDENTITY_UPDATED: 'authentication.identity_updated'\r\n};\r\n\r\nmodule.exports = AuthenticationEvents;\r\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/* global __filename, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport {\r\n    TRACK_IS_DISPOSED,\r\n    TRACK_NO_STREAM_FOUND\r\n} from '../../JitsiTrackErrors';\r\nimport {\r\n    LOCAL_TRACK_STOPPED,\r\n    NO_DATA_FROM_SOURCE,\r\n    TRACK_MUTE_CHANGED\r\n} from '../../JitsiTrackEvents';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport {\r\n    NO_BYTES_SENT,\r\n    TRACK_UNMUTED,\r\n    createNoDataFromSourceEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a single media track(either audio or video).\r\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\r\n */\r\nexport default class JitsiLocalTrack extends JitsiTrack {\r\n    /**\r\n     * Constructs new JitsiLocalTrack instance.\r\n     *\r\n     * @constructor\r\n     * @param {Object} trackInfo\r\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\r\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\r\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\r\n     * JitsiRemoteTrack\r\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\r\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\r\n     * @param trackInfo.effects the effects array contains the effect instance to use\r\n     * @param trackInfo.resolution the video resolution if it's a video track\r\n     * @param trackInfo.deviceId the ID of the local device for this track\r\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\r\n     * call\r\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\r\n     * source. NOTE: defined for desktop sharing tracks only.\r\n     */\r\n    constructor({\r\n        deviceId,\r\n        facingMode,\r\n        mediaType,\r\n        resolution,\r\n        rtcId,\r\n        sourceId,\r\n        sourceType,\r\n        stream,\r\n        track,\r\n        videoType,\r\n        effects = []\r\n    }) {\r\n        super(\r\n            /* conference */ null,\r\n            stream,\r\n            track,\r\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\r\n            mediaType,\r\n            videoType);\r\n\r\n        this._setEffectInProgress = false;\r\n        const effect = effects.find(e => e.isEnabled(this));\r\n\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n\r\n        /**\r\n         * The ID assigned by the RTC module on instance creation.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.rtcId = rtcId;\r\n        this.sourceId = sourceId;\r\n        this.sourceType = sourceType;\r\n\r\n        if (browser.usesNewGumFlow()) {\r\n            // Get the resolution from the track itself because it cannot be\r\n            // certain which resolution webrtc has fallen back to using.\r\n            this.resolution = track.getSettings().height;\r\n            this.maxEnabledResolution = resolution;\r\n\r\n            // Cache the constraints of the track in case of any this track\r\n            // model needs to call getUserMedia again, such as when unmuting.\r\n            this._constraints = track.getConstraints();\r\n\r\n            // Safari returns an empty constraints object, construct the constraints using getSettings.\r\n            if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\r\n                this._constraints = {\r\n                    height: track.getSettings().height,\r\n                    width: track.getSettings().width\r\n                };\r\n            }\r\n        } else {\r\n            // FIXME Currently, Firefox is ignoring our constraints about\r\n            // resolutions so we do not store it, to avoid wrong reporting of\r\n            // local track resolution.\r\n            this.resolution = browser.isFirefox() ? null : resolution;\r\n            this.maxEnabledResolution = this.resolution;\r\n        }\r\n\r\n        this.deviceId = deviceId;\r\n\r\n        /**\r\n         * The <tt>Promise</tt> which represents the progress of a previously\r\n         * queued/scheduled {@link _setMuted} (from the point of view of\r\n         * {@link _queueSetMuted}).\r\n         *\r\n         * @private\r\n         * @type {Promise}\r\n         */\r\n        this._prevSetMuted = Promise.resolve();\r\n\r\n        /**\r\n         * The facing mode of the camera from which this JitsiLocalTrack\r\n         * instance was obtained.\r\n         *\r\n         * @private\r\n         * @type {CameraFacingMode|undefined}\r\n         */\r\n        this._facingMode = facingMode;\r\n\r\n        // Currently there is no way to know the MediaStreamTrack ended due to\r\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\r\n        // Instead we will compare current track's label with device labels from\r\n        // enumerateDevices() list.\r\n        this._trackEnded = false;\r\n\r\n        /**\r\n         * Indicates whether data has been sent or not.\r\n         */\r\n        this._hasSentData = false;\r\n\r\n        /**\r\n         * Used only for detection of audio problems. We want to check only once\r\n         * whether the track is sending data ot not. This flag is set to false\r\n         * after the check.\r\n         */\r\n        this._testDataSent = true;\r\n\r\n        // Currently there is no way to determine with what device track was\r\n        // created (until getConstraints() support), however we can associate\r\n        // tracks with real devices obtained from enumerateDevices() call as\r\n        // soon as it's called.\r\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\r\n        // correspond to the id of a matching device from the available device list.\r\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\r\n\r\n        this._trackMutedTS = 0;\r\n\r\n        this._onDeviceListWillChange = devices => {\r\n            const oldRealDeviceId = this._realDeviceId;\r\n\r\n            this._setRealDeviceIdFromDeviceList(devices);\r\n\r\n            if (\r\n                // Mark track as ended for those browsers that do not support\r\n                // \"readyState\" property. We do not touch tracks created with\r\n                // default device ID \"\".\r\n                (typeof this.getTrack().readyState === 'undefined'\r\n                    && typeof this._realDeviceId !== 'undefined'\r\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\r\n\r\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\r\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\r\n                // addition on some Chrome versions the readyState property is set after the device change event is\r\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\r\n                // detect that the old one was removed.\r\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\r\n            ) {\r\n                this._trackEnded = true;\r\n            }\r\n        };\r\n\r\n        // Subscribe each created local audio track to\r\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\r\n        // handling this event for remote tracks (which are handled in RTC.js),\r\n        // because there might be local tracks not attached to a conference.\r\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\r\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        this._initNoDataFromSourceHandlers();\r\n    }\r\n\r\n    /**\r\n     * Returns if associated MediaStreamTrack is in the 'ended' state\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnded() {\r\n        if (this.isVideoTrack() && this.isMuted()) {\r\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\r\n            // _trackEnded flag.\r\n            return this._trackEnded;\r\n        }\r\n\r\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\r\n    }\r\n\r\n    /**\r\n     * Sets handlers to the MediaStreamTrack object that will detect camera\r\n     * issues.\r\n     */\r\n    _initNoDataFromSourceHandlers() {\r\n        if (!this._isNoDataFromSourceEventsEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this._setHandler('track_mute', () => {\r\n            this._trackMutedTS = window.performance.now();\r\n            this._fireNoDataFromSourceEvent();\r\n        });\r\n\r\n        this._setHandler('track_unmute', () => {\r\n            this._fireNoDataFromSourceEvent();\r\n            Statistics.sendAnalyticsAndLog(\r\n                TRACK_UNMUTED,\r\n                {\r\n                    'media_type': this.getType(),\r\n                    'track_type': 'local',\r\n                    value: window.performance.now() - this._trackMutedTS\r\n                });\r\n        });\r\n\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            this._setHandler('track_ended', () => {\r\n                if (!this.isReceivingData()) {\r\n                    this._fireNoDataFromSourceEvent();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     */\r\n    _isNoDataFromSourceEventsEnabled() {\r\n        // Disable the events for screen sharing.\r\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\r\n    }\r\n\r\n    /**\r\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\r\n     */\r\n    _fireNoDataFromSourceEvent() {\r\n        const value = !this.isReceivingData();\r\n\r\n        this.emit(NO_DATA_FROM_SOURCE, value);\r\n\r\n        // FIXME: Should we report all of those events\r\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\r\n        Statistics.sendLog(JSON.stringify({\r\n            name: NO_DATA_FROM_SOURCE,\r\n            log: value\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Sets real device ID by comparing track information with device\r\n     * information. This is temporary solution until getConstraints() method\r\n     * will be implemented in browsers.\r\n     *\r\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\r\n     * enumerateDevices() call\r\n     */\r\n    _setRealDeviceIdFromDeviceList(devices) {\r\n        const track = this.getTrack();\r\n        const kind = `${track.kind}input`;\r\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\r\n\r\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\r\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\r\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\r\n            // why in order to match it we need to remove the 'Default - ' part.\r\n            const label = (track.label || '').replace('Default - ', '');\r\n\r\n            device = devices.find(d => d.kind === kind && d.label === label);\r\n        }\r\n\r\n        if (device) {\r\n            this._realDeviceId = device.deviceId;\r\n        } else {\r\n            this._realDeviceId = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        super._setStream(stream);\r\n\r\n        if (stream) {\r\n            // Store the MSID for video mute/unmute purposes.\r\n            this.storedMSID = this.getMSID();\r\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\r\n        } else {\r\n            logger.debug(`Setting 'null' stream on ${this}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the effect process and returns the modified stream.\r\n     *\r\n     * @private\r\n     * @param {*} effect - Represents effect instance\r\n     * @returns {void}\r\n     */\r\n    _startStreamEffect(effect) {\r\n        this._streamEffect = effect;\r\n        this._originalStream = this.stream;\r\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\r\n        this.track = this.stream.getTracks()[0];\r\n    }\r\n\r\n    /**\r\n     * Stops the effect process and returns the original stream.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _stopStreamEffect() {\r\n        if (this._streamEffect) {\r\n            this._streamEffect.stopEffect();\r\n            this._setStream(this._originalStream);\r\n            this._originalStream = null;\r\n            this.track = this.stream.getTracks()[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\r\n     *\r\n     * @param {Object|undefined} effect - The new effect to be set.\r\n     */\r\n    _switchStreamEffect(effect) {\r\n        if (this._streamEffect) {\r\n            this._stopStreamEffect();\r\n            this._streamEffect = undefined;\r\n        }\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the effect and switches between the modified stream and original one.\r\n     *\r\n     * @param {Object} effect - Represents the effect instance to be used.\r\n     * @returns {Promise}\r\n     */\r\n    setEffect(effect) {\r\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\r\n            return Promise.reject(new Error('Incompatible effect instance!'));\r\n        }\r\n\r\n        if (this._setEffectInProgress === true) {\r\n            return Promise.reject(new Error('setEffect already in progress!'));\r\n        }\r\n\r\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\r\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\r\n        if (this.isMuted() && !this.isAudioTrack()) {\r\n            this._streamEffect = effect;\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const conference = this.conference;\r\n\r\n        if (!conference) {\r\n            this._switchStreamEffect(effect);\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._setEffectInProgress = true;\r\n\r\n        if (browser.usesUnifiedPlan()) {\r\n            this._switchStreamEffect(effect);\r\n            if (this.isVideoTrack()) {\r\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n            }\r\n\r\n            return conference.replaceTrack(this, this)\r\n                .then(() => {\r\n                    this._setEffectInProgress = false;\r\n                })\r\n                .catch(error => {\r\n                    this._setEffectInProgress = false;\r\n                    this._switchStreamEffect();\r\n                    logger.error('Failed to switch to the new stream!', error);\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\r\n        return conference.removeTrack(this)\r\n            .then(() => {\r\n                this._switchStreamEffect(effect);\r\n                if (this.isVideoTrack()) {\r\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n                }\r\n\r\n                return conference.addTrack(this);\r\n            })\r\n            .then(() => {\r\n                this._setEffectInProgress = false;\r\n            })\r\n            .catch(error => {\r\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\r\n                // everyhting related to the effect functionality.\r\n                this._setEffectInProgress = false;\r\n                this._switchStreamEffect();\r\n                logger.error('Failed to switch to the new stream!', error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously mutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    mute() {\r\n        return this._queueSetMuted(true);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously unmutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    unmute() {\r\n        return this._queueSetMuted(false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\r\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\r\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\r\n     * serialized fashion.\r\n     *\r\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\r\n     * @returns {Promise}\r\n     */\r\n    _queueSetMuted(muted) {\r\n        const setMuted = this._setMuted.bind(this, muted);\r\n\r\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\r\n\r\n        return this._prevSetMuted;\r\n    }\r\n\r\n    /**\r\n     * Mutes / unmutes this track.\r\n     *\r\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\r\n     * otherwise, this track will be unmuted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _setMuted(muted) {\r\n        if (this.isMuted() === muted) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.disposed) {\r\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\r\n        }\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        // A function that will print info about muted status transition\r\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\r\n\r\n        if (this.isAudioTrack()\r\n                || this.videoType === VideoType.DESKTOP\r\n                || !browser.doesVideoMuteByStreamRemove()) {\r\n            logMuteInfo();\r\n            if (this.track) {\r\n                this.track.enabled = !muted;\r\n            }\r\n        } else if (muted) {\r\n            promise = new Promise((resolve, reject) => {\r\n                logMuteInfo();\r\n                this._removeStreamFromConferenceAsMute(\r\n                    () => {\r\n                        if (this._streamEffect) {\r\n                            this._stopStreamEffect();\r\n                        }\r\n\r\n                        // FIXME: Maybe here we should set the SRC for the\r\n                        // containers to something\r\n                        // We don't want any events to be fired on this stream\r\n                        this._unregisterHandlers();\r\n                        this.stopStream();\r\n                        this._setStream(null);\r\n                        resolve();\r\n                    },\r\n                    reject);\r\n            });\r\n        } else {\r\n            logMuteInfo();\r\n\r\n            // This path is only for camera.\r\n            const streamOptions = {\r\n                cameraDeviceId: this.getDeviceId(),\r\n                devices: [ MediaType.VIDEO ],\r\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\r\n                facingMode: this.getCameraFacingMode()\r\n            };\r\n\r\n            if (browser.usesNewGumFlow()) {\r\n                promise\r\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\r\n                        {},\r\n                        streamOptions,\r\n                        { constraints: { video: this._constraints } }));\r\n            } else {\r\n                if (this.resolution) {\r\n                    streamOptions.resolution = this.resolution;\r\n                }\r\n\r\n                promise\r\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\r\n            }\r\n\r\n            promise = promise.then(streamsInfo => {\r\n                // The track kind for presenter track is video as well.\r\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\r\n                const streamInfo\r\n                    = browser.usesNewGumFlow()\r\n                        ? streamsInfo.find(\r\n                            info => info.track.kind === mediaType)\r\n                        : streamsInfo.find(\r\n                            info => info.mediaType === mediaType);\r\n\r\n                if (streamInfo) {\r\n                    this._setStream(streamInfo.stream);\r\n                    this.track = streamInfo.track;\r\n\r\n                    // This is not good when video type changes after\r\n                    // unmute, but let's not crash here\r\n                    if (this.videoType !== streamInfo.videoType) {\r\n                        logger.warn(\r\n                            `${this}: video type has changed after unmute!`,\r\n                            this.videoType, streamInfo.videoType);\r\n                        this.videoType = streamInfo.videoType;\r\n                    }\r\n                } else {\r\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\r\n                }\r\n\r\n                if (this._streamEffect) {\r\n                    this._startStreamEffect(this._streamEffect);\r\n                }\r\n\r\n                this.containers.map(\r\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n\r\n                return this._addStreamToConferenceAsUnmute();\r\n            });\r\n        }\r\n\r\n        return promise\r\n            .then(() => this._sendMuteStatus(muted))\r\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\r\n    }\r\n\r\n    /**\r\n     * Adds stream to conference and marks it as \"unmute\" operation.\r\n     *\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _addStreamToConferenceAsUnmute() {\r\n        if (!this.conference) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // FIXME it would be good to not included conference as part of this\r\n        // process. Only TraceablePeerConnections to which the track is attached\r\n        // should care about this action. The TPCs to which the track is not\r\n        // attached can sync up when track is re-attached.\r\n        // A problem with that is that the \"modify sources\" queue is part of\r\n        // the JingleSessionPC and it would be excluded from the process. One\r\n        // solution would be to extract class between TPC and JingleSessionPC\r\n        // which would contain the queue and would notify the signaling layer\r\n        // when local SSRCs are changed. This would help to separate XMPP from\r\n        // the RTC module.\r\n        return new Promise((resolve, reject) => {\r\n            this.conference._addLocalTrackAsUnmute(this)\r\n                .then(resolve, error => reject(new Error(error)));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes stream from conference and marks it as \"mute\" operation.\r\n     *\r\n     * @param {Function} successCallback will be called on success\r\n     * @param {Function} errorCallback will be called on error\r\n     * @private\r\n     */\r\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\r\n        if (!this.conference) {\r\n            successCallback();\r\n\r\n            return;\r\n        }\r\n        this.conference._removeLocalTrackAsMute(this).then(\r\n            successCallback,\r\n            error => errorCallback(new Error(error)));\r\n    }\r\n\r\n    /**\r\n     * Sends mute status for a track to conference if any.\r\n     *\r\n     * @param {boolean} mute - If track is muted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _sendMuteStatus(mute) {\r\n        if (!this.conference || !this.conference.room) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            this.conference.room[\r\n                this.isAudioTrack()\r\n                    ? 'setAudioMute'\r\n                    : 'setVideoMute'](mute, resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     *\r\n     * Stops sending the media track. And removes it from the HTML.\r\n     * NOTE: Works for local tracks only.\r\n     *\r\n     * @extends JitsiTrack#dispose\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this._switchStreamEffect();\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        if (this.conference) {\r\n            promise = this.conference.removeTrack(this);\r\n        }\r\n\r\n        if (this.stream) {\r\n            this.stopStream();\r\n            this.detach();\r\n        }\r\n\r\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        if (this._onAudioOutputDeviceChanged) {\r\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        return promise.then(() => super.dispose());\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\r\n     * otherwise.\r\n     *\r\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        // this.stream will be null when we mute local video on Chrome\r\n        if (!this.stream) {\r\n            return true;\r\n        }\r\n        if (this.isVideoTrack() && !this.isActive()) {\r\n            return true;\r\n        }\r\n\r\n        return !this.track || !this.track.enabled;\r\n    }\r\n\r\n    /**\r\n     * Sets the JitsiConference object associated with the track. This is temp\r\n     * solution.\r\n     *\r\n     * @param conference the JitsiConference object\r\n     */\r\n    _setConference(conference) {\r\n        this.conference = conference;\r\n\r\n        // We want to keep up with postponed events which should have been fired\r\n        // on \"attach\" call, but for local track we not always have the\r\n        // conference before attaching. However this may result in duplicated\r\n        // events if they have been triggered on \"attach\" already.\r\n        for (let i = 0; i < this.containers.length; i++) {\r\n            this._maybeFireTrackAttached(this.containers[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt>.\r\n     *\r\n     * @returns {boolean} <tt>true</tt>\r\n     */\r\n    isLocal() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns device id associated with track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._realDeviceId || this.deviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.conference && this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Handles bytes sent statistics.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\r\n     * @param {number} bytesSent the new value\r\n     * NOTE: used only for audio tracks to detect audio issues.\r\n     */\r\n    _onByteSentStatsReceived(tpc, bytesSent) {\r\n        if (bytesSent > 0) {\r\n            this._hasSentData = true;\r\n        }\r\n        const iceConnectionState = tpc.getConnectionState();\r\n\r\n        if (this._testDataSent && iceConnectionState === 'connected') {\r\n            setTimeout(() => {\r\n                if (!this._hasSentData) {\r\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\r\n                        ${bytesSent}`);\r\n\r\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\r\n                }\r\n            }, 3000);\r\n            this._testDataSent = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns facing mode for video track from camera. For other cases (e.g.\r\n     * audio track or 'desktop' video track) returns undefined.\r\n     *\r\n     * @returns {CameraFacingMode|undefined}\r\n     */\r\n    getCameraFacingMode() {\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            // MediaStreamTrack#getSettings() is not implemented in many\r\n            // browsers, so we need feature checking here. Progress on the\r\n            // respective browser's implementation can be tracked at\r\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\r\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\r\n            // for Firefox. Even if a browser implements getSettings() already,\r\n            // it might still not return anything for 'facingMode'.\r\n            let trackSettings;\r\n\r\n            try {\r\n                trackSettings = this.track.getSettings();\r\n            } catch (e) {\r\n                // XXX React-native-webrtc, for example, defines\r\n                // MediaStreamTrack#getSettings() but the implementation throws\r\n                // a \"Not implemented\" Error.\r\n            }\r\n            if (trackSettings && 'facingMode' in trackSettings) {\r\n                return trackSettings.facingMode;\r\n            }\r\n\r\n            if (typeof this._facingMode !== 'undefined') {\r\n                return this._facingMode;\r\n            }\r\n\r\n            // In most cases we are showing a webcam. So if we've gotten here,\r\n            // it should be relatively safe to assume that we are probably\r\n            // showing the user-facing camera.\r\n            return CameraFacingMode.USER;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the associated MediaStream.\r\n     */\r\n    stopStream() {\r\n        /**\r\n         * Indicates that we are executing {@link #stopStream} i.e.\r\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\r\n         * associated with this <tt>JitsiTrack</tt> instance.\r\n         *\r\n         * @private\r\n         * @type {boolean}\r\n         */\r\n        this._stopStreamInProgress = true;\r\n\r\n        try {\r\n            RTCUtils.stopMediaStream(this.stream);\r\n        } finally {\r\n            this._stopStreamInProgress = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches the camera facing mode if the WebRTC implementation supports the\r\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\r\n     * question is implemented in react-native-webrtc only. When such a WebRTC\r\n     * implementation is executing, the method is the preferred way to switch\r\n     * between the front/user-facing and the back/environment-facing cameras\r\n     * because it will likely be (as is the case of react-native-webrtc)\r\n     * noticeably faster that creating a new MediaStreamTrack via a new\r\n     * getUserMedia call with the switched facingMode constraint value.\r\n     * Moreover, the approach with a new getUserMedia call may not even work:\r\n     * WebRTC on Android and iOS is either very slow to open the camera a second\r\n     * time or plainly freezes attempting to do that.\r\n     */\r\n    _switchCamera() {\r\n        if (this.isVideoTrack()\r\n                && this.videoType === VideoType.CAMERA\r\n                && typeof this.track._switchCamera === 'function') {\r\n            this.track._switchCamera();\r\n\r\n            this._facingMode\r\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\r\n                    ? CameraFacingMode.USER\r\n                    : CameraFacingMode.ENVIRONMENT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the attached MediaStream is receiving data from source or\r\n     * not. If the stream property is null(because of mute or another reason)\r\n     * this method will return false.\r\n     * NOTE: This method doesn't indicate problem with the streams directly.\r\n     * For example in case of video mute the method will return false or if the\r\n     * user has disposed the track.\r\n     *\r\n     * @returns {boolean} true if the stream is receiving data and false\r\n     * this otherwise.\r\n     */\r\n    isReceivingData() {\r\n        if (this.isVideoTrack()\r\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.stream) {\r\n            return false;\r\n        }\r\n\r\n        // In older version of the spec there is no muted property and\r\n        // readyState can have value muted. In the latest versions\r\n        // readyState can have values \"live\" and \"ended\" and there is\r\n        // muted boolean property. If the stream is muted that means that\r\n        // we aren't receiving any data from the source. We want to notify\r\n        // the users for error if the stream is muted or ended on it's\r\n        // creation.\r\n\r\n        // For video blur enabled use the original video stream\r\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\r\n\r\n        return stream.getTracks().some(track =>\r\n            (!('readyState' in track) || track.readyState === 'live')\r\n                && (!('muted' in track) || track.muted !== true));\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this local track instance.\r\n     *\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\nimport TrackVADEmitter from './TrackVADEmitter';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\r\n\r\n/**\r\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\r\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\r\n */\r\nexport default class VADAudioAnalyser extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADAudioAnalyser</tt>\r\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\r\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\r\n     * needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @constructor\r\n     */\r\n    constructor(conference, createVADProcessor) {\r\n        super();\r\n\r\n        /**\r\n         * Member function that instantiates a VAD processor.\r\n         */\r\n        this._createVADProcessor = createVADProcessor;\r\n\r\n        /**\r\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\r\n         * period voice probability scores.\r\n         */\r\n        this._vadEmitter = null;\r\n\r\n        /**\r\n         * Current state of the _vadEmitter\r\n         */\r\n        this._isVADEmitterRunning = false;\r\n\r\n        /**\r\n         * Array of currently attached VAD processing services.\r\n         */\r\n        this._detectionServices = [];\r\n\r\n        /**\r\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\r\n         * coming from the conference.\r\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\r\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\r\n         * i.e. (TRACK_MUTE_CHANGED event callback).\r\n         */\r\n        this._vadInitTracker = Promise.resolve();\r\n\r\n        /**\r\n         * Listens for {@link TrackVADEmitter} events and processes them.\r\n         */\r\n        this._processVADScore = this._processVADScore.bind(this);\r\n\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Attach a VAD detector service to the analyser and handle it's state changes.\r\n     *\r\n     * @param {Object} vadTMDetector\r\n     */\r\n    addVADDetectionService(vadService) {\r\n        this._detectionServices.push(vadService);\r\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\r\n            // When the state of a detector changes check if there are any active detectors attached so that\r\n            // the _vadEmitter doesn't run needlessly.\r\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\r\n\r\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\r\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\r\n            // that needs it.\r\n            if (!activeDetector.length && this._isVADEmitterRunning) {\r\n                this._stopVADEmitter();\r\n            } else if (!this._isVADEmitterRunning) {\r\n                this._startVADEmitter();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start the {@link TrackVADEmitter} and attach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _startVADEmitter() {\r\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.start();\r\n        this._isVADEmitterRunning = true;\r\n    }\r\n\r\n    /**\r\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _stopVADEmitter() {\r\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.stop();\r\n        this._isVADEmitterRunning = false;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    _processVADScore(vadScore) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.processVADScore(vadScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the isMuted state of all attached detection services.\r\n     *\r\n     * @param {boolean} isMuted\r\n     */\r\n    _changeDetectorsMuteState(isMuted) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.changeMuteState(isMuted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\r\n     * Only take into account local audio tracks.\r\n     * @param {JitsiTrack} track - The added track.\r\n     * @returns {void}\r\n     * @listens TRACK_ADDED\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\r\n            // destroy/create the processing context in the proper order.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\r\n                .then(vadProcessor =>\r\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\r\n                )\r\n                .then(vadEmitter => {\r\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\r\n\r\n                    this._vadEmitter = vadEmitter;\r\n\r\n                    // Iterate through the detection services and set their appropriate mute state, depending on\r\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\r\n                    this._changeDetectorsMuteState(track.isMuted());\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\r\n     * local audio tracks.\r\n     * @param {JitsiTrack} track - The track whose mute state has changed.\r\n     * @returns {void}\r\n     * @listens TRACK_MUTE_CHANGED\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // On a mute toggle reset the state.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                // Set mute status for the attached detection services.\r\n                this._changeDetectorsMuteState(track.isMuted());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\r\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\r\n     *\r\n     * @param {JitsiTrack} track - The removed track.\r\n     * @returns {void}\r\n     * @listens TRACK_REMOVED\r\n     */\r\n    _trackRemoved(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Use the promise to make sure operations are in sequence.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\r\n\r\n                // Track was removed, clean up and set appropriate states.\r\n                if (this._vadEmitter) {\r\n                    this._stopVADEmitter();\r\n                    this._vadEmitter.destroy();\r\n                    this._vadEmitter = null;\r\n                }\r\n\r\n                // Reset state of detectors when active track is removed.\r\n                for (const detector of this._detectionServices) {\r\n                    detector.reset();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { $iq } from 'strophe.js';\r\n\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\n/**\r\n * Represents a recording session.\r\n */\r\nexport default class JibriSession {\r\n    /**\r\n     * Initializes a new JibriSession instance.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(options = {}) {\r\n        this._connection = options.connection;\r\n        this._mode = options.mode;\r\n\r\n        this._setSessionID(options.sessionID);\r\n        this.setStatus(options.status);\r\n    }\r\n\r\n    /**\r\n     * Returns the error related to the session instance, if any.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getError() {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Returns the session ID of the session instance.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getID() {\r\n        return this._sessionID;\r\n    }\r\n\r\n    /**\r\n     * Returns the initiator of the session instance.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\r\n     */\r\n    getInitiator() {\r\n        return this._initiator;\r\n    }\r\n\r\n    /**\r\n     * Returns the streaming URL of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getLiveStreamViewURL() {\r\n        return this._liveStreamViewURL;\r\n    }\r\n\r\n    /**\r\n     * Returns the current status of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant that stopped the session.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\r\n     */\r\n    getTerminator() {\r\n        return this._terminator;\r\n    }\r\n\r\n    /**\r\n     * Returns the current recording mode of the session, such as \"file\".\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getMode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known error message related to the session.\r\n     *\r\n     * @param {string} error - The error string explaining why the session\r\n     * entered an error state.\r\n     * @returns {void}\r\n     */\r\n    setError(error) {\r\n        this._error = error;\r\n    }\r\n\r\n    /**\r\n     * Sets the last live stream URL for the session instance. Usually this is\r\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\r\n     *\r\n     * @param {string} url - The live stream URL associated with the session.\r\n     * @returns {void}\r\n     */\r\n    setLiveStreamViewURL(url) {\r\n        this._liveStreamViewURL = url;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known status for this recording session.\r\n     *\r\n     * @param {string} status - The new status to set.\r\n     * @returns {void}\r\n     */\r\n    setStatus(status) {\r\n        this._status = status;\r\n    }\r\n\r\n    /**\r\n     * Sets the creator's jid of the session.\r\n     * @param {JitsiParticipant} participant - The creator of the session.\r\n     */\r\n    setInitiator(participant) {\r\n        this._initiator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sets the jid of the participant that stopped the session.\r\n     * @param {JitsiParticipant} participant  - The participant's jid,\r\n     * that stopped the session.\r\n     */\r\n    setTerminator(participant) {\r\n        this._terminator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sends a message to start the actual recording.\r\n     *\r\n     * @param {Object} options - Additional arguments for starting the\r\n     * recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Promise\r\n     */\r\n    start({ appData, broadcastId, focusMucJid, streamId }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'start',\r\n                    appData,\r\n                    focusMucJid,\r\n                    broadcastId,\r\n                    streamId\r\n                }),\r\n                result => {\r\n                    // All users will eventually receive the 'pending' status\r\n                    // from the backend, but for the user initiating the session\r\n                    // it's better to give some instant feedback that recording\r\n                    // is starting so fire 'pending' here manually.\r\n                    this.setStatus('pending');\r\n                    this._setSessionID(\r\n                        recordingXMLUtils.getSessionIdFromIq(result));\r\n\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    this._setErrorFromIq(error);\r\n\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to actually stop the recording session.\r\n     *\r\n     * @param {Object} options - Additional arguments for stopping the\r\n     * recording.\r\n     * @param {Object} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @returns Promise\r\n     */\r\n    stop({ focusMucJid }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'stop',\r\n                    focusMucJid\r\n                }),\r\n                resolve,\r\n                reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the message to change the status of the recording session.\r\n     *\r\n     * @param {string} status - The new status to which the recording session\r\n     * should transition.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Object - The XMPP IQ message.\r\n     */\r\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\r\n        return $iq({\r\n            to: focusMucJid,\r\n            type: 'set'\r\n        })\r\n        .c('jibri', {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            'app_data': appData,\r\n            'recording_mode': this._mode,\r\n            'streamid': streamId,\r\n            'you_tube_broadcast_id': broadcastId\r\n        })\r\n        .up();\r\n    }\r\n\r\n    /**\r\n     * Handles the error from an iq and stores the error.\r\n     *\r\n     * @param {Node} errorIq - The error response from an Iq.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setErrorFromIq(errorIq) {\r\n        const error = errorIq.getElementsByTagName('error')[0];\r\n\r\n        this.setError(error.children[0].tagName);\r\n    }\r\n\r\n    /**\r\n     * Sets the known session ID for this recording session.\r\n     *\r\n     * @param {string} sessionID\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setSessionID(sessionID) {\r\n        this._sessionID = sessionID;\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\n\r\nconst AUDIO_PERMISSION_NAME = 'microphone';\r\nconst PERMISSION_GRANTED_STATUS = 'granted';\r\nconst VIDEO_PERMISSION_NAME = 'camera';\r\n\r\n/**\r\n * Media devices utilities for Jitsi.\r\n */\r\nclass JitsiMediaDevices {\r\n    /**\r\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\r\n     * instance of this class.\r\n     */\r\n    constructor() {\r\n        this._eventEmitter = new EventEmitter();\r\n        this._grantedPermissions = {};\r\n\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            devices =>\r\n                this._eventEmitter.emit(\r\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_AVAILABLE,\r\n            devices =>\r\n                this._logOutputDevice(\r\n                    this.getAudioOutputDevice(),\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.GRANTED_PERMISSIONS,\r\n            grantedPermissions =>\r\n                this._handleGrantedPermissions(grantedPermissions));\r\n\r\n        // Test if the W3C Permissions API is implemented and the 'camera' and\r\n        // 'microphone' permissions are implemented. (Testing for at least one\r\n        // of them seems sufficient).\r\n        this._permissionsApiSupported = new Promise(resolve => {\r\n            if (!navigator.permissions) {\r\n                resolve(false);\r\n\r\n                return;\r\n            }\r\n\r\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\r\n                .then(() => resolve(true), () => resolve(false));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updated the local granted permissions cache. A permissions might be\r\n     * granted, denied, or undefined. This is represented by having its media\r\n     * type key set to {@code true} or {@code false} respectively.\r\n     *\r\n     * @param {Object} grantedPermissions - Array with the permissions\r\n     * which were granted.\r\n     */\r\n    _handleGrantedPermissions(grantedPermissions) {\r\n        this._grantedPermissions = {\r\n            ...this._grantedPermissions,\r\n            ...grantedPermissions\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gathers data and sends it to statistics.\r\n     * @param deviceID the device id to log\r\n     * @param devices list of devices\r\n     */\r\n    _logOutputDevice(deviceID, devices) {\r\n        const device\r\n            = devices.find(\r\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     * @param {function} callback\r\n     */\r\n    enumerateDevices(callback) {\r\n        RTC.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/micropones.\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return RTC.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return RTC.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Checks if the permission for the given device was granted.\r\n     *\r\n     * @param {'audio'|'video'} [type] - type of devices to check,\r\n     *      undefined stands for both 'audio' and 'video' together\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    isDevicePermissionGranted(type) {\r\n        return new Promise(resolve => {\r\n            // Shortcut: first check if we already know the permission was\r\n            // granted.\r\n            if (type in this._grantedPermissions) {\r\n                resolve(this._grantedPermissions[type]);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check using the Permissions API.\r\n            this._permissionsApiSupported.then(supported => {\r\n                if (!supported) {\r\n                    // Workaround on Safari for audio input device\r\n                    // selection to work. Safari doesn't support the\r\n                    // permissions query.\r\n                    if (browser.isSafari()) {\r\n                        resolve(true);\r\n\r\n                        return;\r\n                    }\r\n                    resolve(false);\r\n\r\n                    return;\r\n                }\r\n\r\n                const promises = [];\r\n\r\n                switch (type) {\r\n                case MediaType.VIDEO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                case MediaType.AUDIO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                default:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                }\r\n\r\n                Promise.all(promises).then(\r\n                    results => resolve(results.every(permissionStatus => {\r\n                        // The status attribute is deprecated, and state\r\n                        // should be used instead, but check both for now\r\n                        // for backwards compatibility.\r\n                        const grantStatus = permissionStatus.state\r\n                            || permissionStatus.status;\r\n\r\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\r\n                    })),\r\n                    () => resolve(false)\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if it is possible to be simultaneously capturing audio\r\n     * from more than one device.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return !browser.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, 'default' stands\r\n     * for default device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return RTC.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\r\n     *      default device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n        if (availableDevices && availableDevices.length > 0) {\r\n            // if we have devices info report device to stats\r\n            // normally this will not happen on startup as this method is called\r\n            // too early. This will happen only on user selection of new device\r\n            this._logOutputDevice(\r\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\r\n        }\r\n\r\n        return RTC.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Adds an event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    addEventListener(event, handler) {\r\n        this._eventEmitter.addListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Removes event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    removeEventListener(event, handler) {\r\n        this._eventEmitter.removeListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Emits an event.\r\n     * @param {string} event - event name\r\n     */\r\n    emitEvent(event, ...args) {\r\n        this._eventEmitter.emit(event, ...args);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        // Defer to the browser capabilities to allow exposure of the api to the\r\n        // consumer but prevent other files from having to import\r\n        // JitsiMediaDevices.\r\n        return browser.supportsVideo();\r\n    }\r\n}\r\n\r\nexport default new JitsiMediaDevices();\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*jslint latedef:false*/\r\n\r\n/**\r\n * Ordered log levels.\r\n */\r\nvar levels = {\r\n    \"trace\": 0,\r\n    \"debug\": 1,\r\n    \"info\": 2,\r\n    \"log\": 3,\r\n    \"warn\": 4,\r\n    \"error\": 5\r\n};\r\n\r\n/**\r\n * The default transport - console\r\n * @type LoggerTransport\r\n */\r\nLogger.consoleTransport = console;\r\n\r\n/**\r\n * The array which stores currently registered global transports.\r\n * @type {[LoggerTransport]}\r\n */\r\nvar globalTransports = [ Logger.consoleTransport ];\r\n\r\n/**\r\n * Adds given {@link LoggerTransport} instance to the list of global\r\n * transports which means that it'll be used by all {@link Logger}s\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.addGlobalTransport = function(transport) {\r\n    if (globalTransports.indexOf(transport) === -1) {\r\n        globalTransports.push(transport);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes given {@link LoggerTransport} instance from the list of global\r\n * transports\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.removeGlobalTransport = function(transport) {\r\n    var transportIdx = globalTransports.indexOf(transport);\r\n    if (transportIdx !== -1) {\r\n        globalTransports.splice(transportIdx, 1);\r\n    }\r\n};\r\n\r\n/**\r\n * The global configuration options.\r\n */\r\nvar globalOptions = {};\r\n\r\n/**\r\n * Sets global options which will be used by all loggers. Changing these works\r\n * even after other loggers are created.\r\n */\r\nLogger.setGlobalOptions = function(options) {\r\n    globalOptions = options || {};\r\n};\r\n\r\n/**\r\n * Parses Error's object stack trace and extracts information about the last\r\n * caller before the log method was called.\r\n * @returns JS object with info about the caller - method name, file location,\r\n * line and column.\r\n */\r\nfunction getCallerInfo() {\r\n    var callerInfo = {\r\n        methodName: \"\",\r\n        fileLocation: \"\",\r\n        line: null,\r\n        column: null\r\n    };\r\n    //gets the part of the stack without the logger wrappers\r\n    var error = new Error();\r\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\r\n    if(!stack || stack.length < 1) {\r\n        return callerInfo;\r\n    }\r\n    var m = null;\r\n    if(stack[3]) {\r\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\r\n    }\r\n    if(!m || m.length <= 4) {\r\n        //Firefox && Safari\r\n        if(stack[2].indexOf(\"log@\") === 0){\r\n            //Safari\r\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\r\n        } else {\r\n            //Firefox\r\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\r\n        }\r\n        return callerInfo;\r\n    }\r\n\r\n    callerInfo.methodName = m[1];\r\n    callerInfo.fileLocation = m[2];\r\n    callerInfo.line = m[3];\r\n    callerInfo.column = m[4];\r\n    return callerInfo;\r\n}\r\n\r\n/**\r\n * Logs messages using the transports and level from the logger.\r\n * @param logger a logger instance.\r\n * @param level the log level of the message. See the levels variable.\r\n * @param arguments array with arguments that will be logged.\r\n */\r\nfunction log() {\r\n    var logger = arguments[0], level = arguments[1],\r\n        args = Array.prototype.slice.call(arguments, 2);\r\n    if(levels[level] < logger.level) {\r\n        return;\r\n    }\r\n\r\n    var callerInfo\r\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\r\n            getCallerInfo();\r\n    var transports = globalTransports.concat(logger.transports);\r\n    for(var i = 0; i < transports.length; i++) {\r\n        var t = transports[i];\r\n        var l = t[level];\r\n        if(l && typeof(l) === \"function\") {\r\n            var logPrefixes = [];\r\n\r\n            logPrefixes.push(new Date().toISOString());\r\n\r\n            if (logger.id) {\r\n                logPrefixes.push(\"[\" + logger.id + \"]\");\r\n            }\r\n\r\n            if (callerInfo && callerInfo.methodName.length > 1) {\r\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\r\n            }\r\n\r\n            var fullLogParts = logPrefixes.concat(args);\r\n\r\n            l.bind(t).apply(t, fullLogParts);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * Constructs new logger object.\r\n * @param level the logging level for the new logger\r\n * @param id optional identifier for the logger instance.\r\n * @param {LoggerTransport} transports optional list of handlers(objects) for\r\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\r\n * @param options optional configuration file for how the logger should behave.\r\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\r\n * method invocation should be included in the log. Defaults to false, so the\r\n * call site will be included.\r\n */\r\nfunction Logger(level, id, transports, options) {\r\n    this.id = id;\r\n    this.options = options || {};\r\n    this.transports = transports;\r\n    if(!this.transports) {\r\n        this.transports = [];\r\n    }\r\n    this.level = levels[level];\r\n    var methods = Object.keys(levels);\r\n    for(var i = 0; i < methods.length; i++){\r\n        this[methods[i]] =\r\n            log.bind(null, this, methods[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the log level for the logger.\r\n * @param level the new log level.\r\n */\r\nLogger.prototype.setLevel = function (level) {\r\n    this.level = levels[level];\r\n};\r\nmodule.exports = Logger;\r\n\r\n/**\r\n * Enum for the supported log levels.\r\n */\r\nLogger.levels = {\r\n    TRACE: \"trace\",\r\n    DEBUG: \"debug\",\r\n    INFO: \"info\",\r\n    LOG: \"log\",\r\n    WARN: \"warn\",\r\n    ERROR: \"error\"\r\n};\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\r\n\r\nconst RecordingResult = require('./recordingResult');\r\n\r\n/**\r\n * Possible audio formats MIME types\r\n */\r\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\r\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\r\n\r\n/**\r\n * A TrackRecorder object holds all the information needed for recording a\r\n * single JitsiTrack (either remote or local)\r\n * @param track The JitsiTrack the object is going to hold\r\n */\r\nconst TrackRecorder = function(track) {\r\n    // The JitsiTrack holding the stream\r\n    this.track = track;\r\n\r\n    // The MediaRecorder recording the stream\r\n    this.recorder = null;\r\n\r\n    // The array of data chunks recorded from the stream\r\n    // acts as a buffer until the data is stored on disk\r\n    this.data = null;\r\n\r\n    // the name of the person of the JitsiTrack. This can be undefined and/or\r\n    // not unique\r\n    this.name = null;\r\n\r\n    // the time of the start of the recording\r\n    this.startTime = null;\r\n};\r\n\r\n/**\r\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also define the timestamp and try to update the name\r\n * @param trackRecorder the TrackRecorder to start\r\n */\r\nfunction startRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to startRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.start();\r\n    trackRecorder.startTime = new Date();\r\n}\r\n\r\n/**\r\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also try to update the name\r\n * @param trackRecorder the TrackRecorder to stop\r\n */\r\nfunction stopRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to stopRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.stop();\r\n}\r\n\r\n/**\r\n * Determines which kind of audio recording the browser supports\r\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\r\n */\r\nfunction determineCorrectFileType() {\r\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\r\n        return AUDIO_WEBM;\r\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\r\n        return AUDIO_OGG;\r\n    }\r\n    throw new Error(\r\n        'unable to create a MediaRecorder with the right mimetype!');\r\n}\r\n\r\n/**\r\n * main exported object of the file, holding all\r\n * relevant functions and variables for the outside world\r\n * @param jitsiConference the jitsiConference which this object\r\n * is going to record\r\n */\r\nfunction AudioRecorder(jitsiConference) {\r\n    // array of TrackRecorders, where each trackRecorder\r\n    // holds the JitsiTrack, MediaRecorder and recorder data\r\n    this.recorders = [];\r\n\r\n    // get which file type is supported by the current browser\r\n    this.fileType = determineCorrectFileType();\r\n\r\n    // boolean flag for active recording\r\n    this.isRecording = false;\r\n\r\n    // the jitsiconference the object is recording\r\n    this.jitsiConference = jitsiConference;\r\n}\r\n\r\n/**\r\n * Add the the exported module so that it can be accessed by other files\r\n */\r\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\r\n\r\n/**\r\n * Adds a new TrackRecorder object to the array.\r\n *\r\n * @param track the track potentially holding an audio stream\r\n */\r\nAudioRecorder.prototype.addTrack = function(track) {\r\n    if (track.isAudioTrack()) {\r\n        // create the track recorder\r\n        const trackRecorder = this.instantiateTrackRecorder(track);\r\n\r\n        // push it to the local array of all recorders\r\n\r\n        this.recorders.push(trackRecorder);\r\n\r\n        // update the name of the trackRecorders\r\n        this.updateNames();\r\n\r\n        // If we're already recording, immediately start recording this new\r\n        // track.\r\n        if (this.isRecording) {\r\n            startRecorder(trackRecorder);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\r\n * data array for the trackRecorder.\r\n * @param track the JitsiTrack holding the audio MediaStream(s)\r\n */\r\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\r\n    const trackRecorder = new TrackRecorder(track);\r\n\r\n    // Create a new stream which only holds the audio track\r\n    const originalStream = trackRecorder.track.getOriginalStream();\r\n    const stream = createEmptyStream();\r\n\r\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\r\n\r\n    // Create the MediaRecorder\r\n    trackRecorder.recorder = new MediaRecorder(stream,\r\n        { mimeType: this.fileType });\r\n\r\n    // array for holding the recorder data. Resets it when\r\n    // audio already has been recorder once\r\n    trackRecorder.data = [];\r\n\r\n    // function handling a dataEvent, e.g the stream gets new data\r\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\r\n        if (dataEvent.data.size > 0) {\r\n            trackRecorder.data.push(dataEvent.data);\r\n        }\r\n    };\r\n\r\n    return trackRecorder;\r\n};\r\n\r\n/**\r\n * Notifies the module that a specific track has stopped, e.g participant left\r\n * the conference.\r\n * if the recording has not started yet, the TrackRecorder will be removed from\r\n * the array. If the recording has started, the recorder will stop recording\r\n * but not removed from the array so that the recorded stream can still be\r\n * accessed\r\n *\r\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\r\n */\r\nAudioRecorder.prototype.removeTrack = function(track) {\r\n    if (track.isVideoTrack()) {\r\n        return;\r\n    }\r\n\r\n    const array = this.recorders;\r\n    let i;\r\n\r\n    for (i = 0; i < array.length; i++) {\r\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\r\n            const recorderToRemove = array[i];\r\n\r\n            if (this.isRecording) {\r\n                stopRecorder(recorderToRemove);\r\n            } else {\r\n                // remove the TrackRecorder from the array\r\n                array.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // make sure the names are up to date\r\n    this.updateNames();\r\n};\r\n\r\n/**\r\n * Tries to update the name value of all TrackRecorder in the array.\r\n * If it hasn't changed,it will keep the exiting name. If it changes to a\r\n * undefined value, the old value will also be kept.\r\n */\r\nAudioRecorder.prototype.updateNames = function() {\r\n    const conference = this.jitsiConference;\r\n\r\n    this.recorders.forEach(trackRecorder => {\r\n        if (trackRecorder.track.isLocal()) {\r\n            trackRecorder.name = 'the transcriber';\r\n        } else {\r\n            const id = trackRecorder.track.getParticipantId();\r\n            const participant = conference.getParticipantById(id);\r\n            const newName = participant.getDisplayName();\r\n\r\n            if (newName !== 'undefined') {\r\n                trackRecorder.name = newName;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.start = function() {\r\n    if (this.isRecording) {\r\n        throw new Error('audiorecorder is already recording');\r\n    }\r\n\r\n    // set boolean isRecording flag to true so if new participants join the\r\n    // conference, that track can instantly start recording as well\r\n    this.isRecording = true;\r\n\r\n    // start all the mediaRecorders\r\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\r\n\r\n    // log that recording has started\r\n    console.log(\r\n        `Started the recording of the audio. There are currently ${\r\n            this.recorders.length} recorders active.`);\r\n};\r\n\r\n/**\r\n * Stops the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.stop = function() {\r\n    // set the boolean flag to false\r\n    this.isRecording = false;\r\n\r\n    // stop all recorders\r\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\r\n    console.log('stopped recording');\r\n};\r\n\r\n/**\r\n * link hacking to download all recorded audio streams\r\n */\r\nAudioRecorder.prototype.download = function() {\r\n    this.recorders.forEach(trackRecorder => {\r\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n\r\n        document.body.appendChild(a);\r\n        a.style = 'display: none';\r\n        a.href = url;\r\n        a.download = `test.${this.fileType.split('/')[1]}`;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    });\r\n};\r\n\r\n/**\r\n * returns the audio files of all recorders as an array of objects,\r\n * which include the name of the owner of the track and the starting time stamp\r\n * @returns {Array} an array of RecordingResult objects\r\n */\r\nAudioRecorder.prototype.getRecordingResults = function() {\r\n    if (this.isRecording) {\r\n        throw new Error(\r\n            'cannot get blobs because the AudioRecorder is still recording!');\r\n    }\r\n\r\n    // make sure the names are up to date before sending them off\r\n    this.updateNames();\r\n\r\n    const array = [];\r\n\r\n    this.recorders.forEach(\r\n        recorder =>\r\n            array.push(\r\n                new RecordingResult(\r\n                    new Blob(recorder.data, { type: this.fileType }),\r\n                    recorder.name,\r\n                    recorder.startTime)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Gets the mime type of the recorder audio\r\n * @returns {String} the mime type of the recorder audio\r\n */\r\nAudioRecorder.prototype.getFileType = function() {\r\n    return this.fileType;\r\n};\r\n\r\n/**\r\n * Creates a empty MediaStream object which can be used\r\n * to add MediaStreamTracks to\r\n * @returns MediaStream\r\n */\r\nfunction createEmptyStream() {\r\n    if (typeof MediaStream !== 'undefined') {\r\n        return new MediaStream();\r\n    }\r\n    throw new Error('cannot create a clean mediaStream');\r\n}\r\n\r\n/**\r\n * export the main object AudioRecorder\r\n */\r\nmodule.exports = AudioRecorder;\r\n","import JitsiConference from './JitsiConference';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport XMPP from './modules/xmpp/xmpp';\r\nimport {\r\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\r\n    createConnectionFailedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\n\r\n/**\r\n * Creates a new connection object for the Jitsi Meet server side video\r\n * conferencing service. Provides access to the JitsiConference interface.\r\n * @param appID identification for the provider of Jitsi Meet video conferencing\r\n * services.\r\n * @param token the JWT token used to authenticate with the server(optional)\r\n * @param options Object with properties / settings related to connection with\r\n * the server.\r\n * @constructor\r\n */\r\nexport default function JitsiConnection(appID, token, options) {\r\n    this.appID = appID;\r\n    this.token = token;\r\n    this.options = options;\r\n    this.xmpp = new XMPP(options, token);\r\n\r\n    /* eslint-disable max-params */\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\r\n        (errType, msg, credentials, details) => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createConnectionFailedEvent(errType, msg, details));\r\n        });\r\n    /* eslint-enable max-params */\r\n\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\r\n        msg => {\r\n            // we can see disconnects from normal tab closing of the browser\r\n            // and then there are no msgs, but we want to log only disconnects\r\n            // when there is real error\r\n            // XXX Do we need the difference in handling between the log and\r\n            // analytics event here?\r\n            if (msg) {\r\n                Statistics.sendAnalytics(\r\n                    ANALYTICS_CONNECTION_DISCONNECTED,\r\n                    { message: msg });\r\n            }\r\n            Statistics.sendLog(\r\n                JSON.stringify(\r\n                    {\r\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\r\n                        msg\r\n                    }));\r\n        });\r\n}\r\n\r\n/**\r\n * Connect the client with the server.\r\n * @param options {object} connecting options\r\n * (for example authentications parameters).\r\n */\r\nJitsiConnection.prototype.connect = function(options = {}) {\r\n    this.xmpp.connect(options.id, options.password);\r\n};\r\n\r\n/**\r\n * Attach to existing connection. Can be used for optimizations. For example:\r\n * if the connection is created on the server we can attach to it and start\r\n * using it.\r\n *\r\n * @param options {object} connecting options - rid, sid and jid.\r\n */\r\nJitsiConnection.prototype.attach = function(options) {\r\n    this.xmpp.attach(options);\r\n};\r\n\r\n/**\r\n * Disconnect the client from the server.\r\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n */\r\nJitsiConnection.prototype.disconnect = function(...args) {\r\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\r\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\r\n    // may optionally pass the event which triggered the disconnect in order to\r\n    // provide the implementation with finer-grained context.\r\n    return this.xmpp.disconnect(...args);\r\n};\r\n\r\n/**\r\n * Returns the jid of the participant associated with the XMPP connection.\r\n *\r\n * @returns {string} The jid of the participant.\r\n */\r\nJitsiConnection.prototype.getJid = function() {\r\n    return this.xmpp.getJid();\r\n};\r\n\r\n/**\r\n * This method allows renewal of the tokens if they are expiring.\r\n * @param token the new token.\r\n */\r\nJitsiConnection.prototype.setToken = function(token) {\r\n    this.token = token;\r\n};\r\n\r\n/**\r\n * Creates and joins new conference.\r\n * @param name the name of the conference; if null - a generated name will be\r\n * provided from the api\r\n * @param options Object with properties / settings related to the conference\r\n * that will be created.\r\n * @returns {JitsiConference} returns the new conference object.\r\n */\r\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\r\n    return new JitsiConference({\r\n        name,\r\n        config: options,\r\n        connection: this\r\n    });\r\n};\r\n\r\n/**\r\n * Subscribes the passed listener to the event.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.addEventListener = function(event, listener) {\r\n    this.xmpp.addListener(event, listener);\r\n};\r\n\r\n/**\r\n * Unsubscribes the passed handler.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\r\n    this.xmpp.removeListener(event, listener);\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConnection.prototype.getConnectionTimes = function() {\r\n    return this.xmpp.connectionTimes;\r\n};\r\n\r\n/**\r\n * Adds new feature to the list of supported features for the local\r\n * participant.\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.addFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Removes a feature from the list of supported features for the local\r\n * participant\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.removeFeature(feature, submit);\r\n};\r\n","/* global __filename, $, Promise */\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiParticipant from './JitsiParticipant';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\r\nimport IceFailedHandling\r\n    from './modules/connectivity/IceFailedHandling';\r\nimport ParticipantConnectionStatusHandler\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\r\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\r\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\r\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\r\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\r\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\r\nimport E2ePing from './modules/e2eping/e2eping';\r\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\r\nimport { QualityController } from './modules/qualitycontrol/QualityController';\r\nimport RecordingManager from './modules/recording/RecordingManager';\r\nimport Settings from './modules/settings/Settings';\r\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\r\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\r\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport Transcriber from './modules/transcription/transcriber';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport RandomUtil from './modules/util/RandomUtil';\r\nimport ComponentsVersions from './modules/version/ComponentsVersions';\r\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport {\r\n    ACTION_JINGLE_RESTART,\r\n    ACTION_JINGLE_SI_RECEIVED,\r\n    ACTION_JINGLE_SI_TIMEOUT,\r\n    ACTION_JINGLE_TERMINATE,\r\n    ACTION_P2P_DECLINED,\r\n    ACTION_P2P_ESTABLISHED,\r\n    ACTION_P2P_FAILED,\r\n    ACTION_P2P_SWITCH_TO_JVB,\r\n    ICE_ESTABLISHMENT_DURATION_DIFF,\r\n    createConferenceEvent,\r\n    createJingleEvent,\r\n    createP2PEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * How long since Jicofo is supposed to send a session-initiate, before\r\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\r\n * @type {number}\r\n */\r\nconst JINGLE_SI_TIMEOUT = 5000;\r\n\r\n/**\r\n * Creates a JitsiConference object with the given name and properties.\r\n * Note: this constructor is not a part of the public API (objects should be\r\n * created using JitsiConnection.createConference).\r\n * @param options.config properties / settings related to the conference that\r\n * will be created.\r\n * @param options.name the name of the conference\r\n * @param options.connection the JitsiConnection object for this\r\n * JitsiConference.\r\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\r\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\r\n * calculated and submitted to the analytics module.\r\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\r\n * restart logic.\r\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\r\n * the peer to peer mode will be enabled. It means that when there are only 2\r\n * participants in the conference an attempt to make direct connection will be\r\n * made. If the connection succeeds the conference will stop sending data\r\n * through the JVB connection and will use the direct one instead.\r\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\r\n * seconds, before the conference switches back to P2P, after the 3rd\r\n * participant has left the room.\r\n * @param {number} [options.config.channelLastN=-1] The requested amount of\r\n * videos are going to be delivered after the value is in effect. Set to -1 for\r\n * unlimited or all available videos.\r\n * @param {number} [options.config.forceJVB121Ratio]\r\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\r\n * conference should be moved to the JVB instead of P2P. The decision is made on\r\n * the responder side, after ICE succeeds on the P2P connection.\r\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\r\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\r\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\r\n * (don't open any channel).\r\n * @constructor\r\n *\r\n * FIXME Make all methods which are called from lib-internal classes\r\n *       to non-public (use _). To name a few:\r\n *       {@link JitsiConference.onLocalRoleChanged}\r\n *       {@link JitsiConference.onUserRoleChanged}\r\n *       {@link JitsiConference.onMemberLeft}\r\n *       and so on...\r\n */\r\nexport default function JitsiConference(options) {\r\n    if (!options.name || options.name.toLowerCase() !== options.name) {\r\n        const errmsg\r\n            = 'Invalid conference name (no conference name passed or it '\r\n                + 'contains invalid characters like capital letters)!';\r\n\r\n        logger.error(errmsg);\r\n        throw new Error(errmsg);\r\n    }\r\n    this.eventEmitter = new EventEmitter();\r\n    this.options = options;\r\n    this.eventManager = new JitsiConferenceEventManager(this);\r\n    this.participants = {};\r\n    this._init(options);\r\n    this.componentsVersions = new ComponentsVersions(this);\r\n\r\n    /**\r\n     * Jingle session instance for the JVB connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.jvbJingleSession = null;\r\n    this.lastDominantSpeaker = null;\r\n    this.dtmfManager = null;\r\n    this.somebodySupportsDTMF = false;\r\n    this.authEnabled = false;\r\n    this.startAudioMuted = false;\r\n    this.startVideoMuted = false;\r\n    this.startMutedPolicy = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n    this.isMutedByFocus = false;\r\n\r\n    // when muted by focus we receive the jid of the initiator of the mute\r\n    this.mutedByFocusActor = null;\r\n\r\n    // Flag indicates if the 'onCallEnded' method was ever called on this\r\n    // instance. Used to log extra analytics event for debugging purpose.\r\n    // We need to know if the potential issue happened before or after\r\n    // the restart.\r\n    this.wasStopped = false;\r\n\r\n    // Conference properties, maintained by jicofo.\r\n    this.properties = {};\r\n\r\n    /**\r\n     * The object which monitors local and remote connection statistics (e.g.\r\n     * sending bitrate) and calculates a number which represents the connection\r\n     * quality.\r\n     */\r\n    this.connectionQuality\r\n        = new ConnectionQuality(this, this.eventEmitter, options);\r\n\r\n    /**\r\n     * Reports average RTP statistics to the analytics module.\r\n     * @type {AvgRTPStatsReporter}\r\n     */\r\n    this.avgRtpStatsReporter\r\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\r\n\r\n    /**\r\n     * Detects issues with the audio of remote participants.\r\n     * @type {AudioOutputProblemDetector}\r\n     */\r\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\r\n\r\n    /**\r\n     * Indicates whether the connection is interrupted or not.\r\n     */\r\n    this.isJvbConnectionInterrupted = false;\r\n\r\n    /**\r\n     * The object which tracks active speaker times\r\n     */\r\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\r\n\r\n    /* P2P related fields below: */\r\n\r\n    /**\r\n     * Stores reference to deferred start P2P task. It's created when 3rd\r\n     * participant leaves the room in order to avoid ping pong effect (it\r\n     * could be just a page reload).\r\n     * @type {number|null}\r\n     */\r\n    this.deferredStartP2PTask = null;\r\n\r\n    const delay\r\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\r\n\r\n    /**\r\n     * A delay given in seconds, before the conference switches back to P2P\r\n     * after the 3rd participant has left.\r\n     * @type {number}\r\n     */\r\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\r\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\r\n\r\n    /**\r\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\r\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\r\n     * and running.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    /**\r\n     * Flag set to <tt>true</tt> when P2P session has been established\r\n     * (ICE has been connected) and this conference is currently in the peer to\r\n     * peer mode (P2P connection is the active one).\r\n     * @type {boolean}\r\n     */\r\n    this.p2p = false;\r\n\r\n    /**\r\n     * A JingleSession for the direct peer to peer connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.p2pJingleSession = null;\r\n\r\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\r\n    this.recordingManager = new RecordingManager(this.room);\r\n    this._conferenceJoinAnalyticsEventSent = false;\r\n}\r\n\r\n// FIXME convert JitsiConference to ES6 - ASAP !\r\nJitsiConference.prototype.constructor = JitsiConference;\r\n\r\n/**\r\n * Create a resource for the a jid. We use the room nickname (the resource part\r\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\r\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\r\n * into a 32bit field.\r\n *\r\n * @param {string} jid - The id set onto the XMPP connection.\r\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\r\n * to the XMPP service with a password.\r\n * @returns {string}\r\n * @static\r\n */\r\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\r\n    let mucNickname;\r\n\r\n    if (isAuthenticatedUser) {\r\n        // For authenticated users generate a random ID.\r\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n    } else {\r\n        // We try to use the first part of the node (which for anonymous users\r\n        // on prosody is a UUID) to match the previous behavior (and maybe make\r\n        // debugging easier).\r\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\r\n            .toLowerCase();\r\n\r\n        // But if this doesn't have the required format we just generate a new\r\n        // random nickname.\r\n        const re = /[0-9a-f]{8}/g;\r\n\r\n        if (!re.test(mucNickname)) {\r\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n        }\r\n    }\r\n\r\n    return mucNickname;\r\n};\r\n\r\n/**\r\n * Initializes the conference object properties\r\n * @param options {object}\r\n * @param options.connection {JitsiConnection} overrides this.connection\r\n */\r\nJitsiConference.prototype._init = function(options = {}) {\r\n    // Override connection and xmpp properties (Useful if the connection\r\n    // reloaded)\r\n    if (options.connection) {\r\n        this.connection = options.connection;\r\n        this.xmpp = this.connection.xmpp;\r\n\r\n        // Setup XMPP events only if we have new connection object.\r\n        this.eventManager.setupXMPPListeners();\r\n    }\r\n\r\n    const { config } = this.options;\r\n\r\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\r\n    this.room = this.xmpp.createRoom(\r\n        this.options.name, {\r\n            ...config,\r\n            statsId: this._statsCurrentId\r\n        },\r\n        JitsiConference.resourceCreator\r\n    );\r\n\r\n    // Connection interrupted/restored listeners\r\n    this._onIceConnectionInterrupted\r\n        = this._onIceConnectionInterrupted.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\r\n\r\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\r\n\r\n    this._onIceConnectionEstablished\r\n        = this._onIceConnectionEstablished.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\r\n\r\n    this._updateProperties = this._updateProperties.bind(this);\r\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n        this._updateProperties);\r\n\r\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\r\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n    this.e2eping = new E2ePing(\r\n        this,\r\n        config,\r\n        (message, to) => {\r\n            try {\r\n                this.sendMessage(\r\n                    message, to, true /* sendThroughVideobridge */);\r\n            } catch (error) {\r\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\r\n            }\r\n        });\r\n\r\n    if (!this.rtc) {\r\n        this.rtc = new RTC(this, options);\r\n        this.eventManager.setupRTCListeners();\r\n    }\r\n\r\n    this.qualityController = new QualityController(this);\r\n\r\n    this.participantConnectionStatus\r\n        = new ParticipantConnectionStatusHandler(\r\n            this.rtc,\r\n            this,\r\n            {\r\n                // Both these options are not public API, leaving it here only\r\n                // as an entry point through config for tuning up purposes.\r\n                // Default values should be adjusted as soon as optimal values\r\n                // are discovered.\r\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\r\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\r\n            });\r\n    this.participantConnectionStatus.init();\r\n\r\n    if (!this.statistics) {\r\n        this.statistics = new Statistics(this.xmpp, {\r\n            aliasName: this._statsCurrentId,\r\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\r\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\r\n            siteID: config.siteID,\r\n            customScriptUrl: config.callStatsCustomScriptUrl,\r\n            callStatsID: config.callStatsID,\r\n            callStatsSecret: config.callStatsSecret,\r\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\r\n            roomName: this.options.name,\r\n            applicationName: config.applicationName,\r\n            getWiFiStatsMethod: config.getWiFiStatsMethod\r\n        });\r\n        Statistics.analytics.addPermanentProperties({\r\n            'callstats_name': this._statsCurrentId\r\n        });\r\n    }\r\n\r\n    this.eventManager.setupChatRoomListeners();\r\n\r\n    // Always add listeners because on reload we are executing leave and the\r\n    // listeners are removed from statistics module.\r\n    this.eventManager.setupStatisticsListeners();\r\n\r\n    // Disable VAD processing on Safari since it causes audio input to\r\n    // fail on some of the mobile devices.\r\n    if (config.enableTalkWhileMuted && !browser.isSafari()) {\r\n\r\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\r\n        // based detection.\r\n        if (config.createVADProcessor) {\r\n            logger.info('Using VAD detection for generating talk while muted events');\r\n\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\r\n\r\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Disable noisy mic detection on safari since it causes the audio input to\r\n    // fail on Safari on iPadOS.\r\n    if (config.enableNoisyMicDetection && !browser.isSafari()) {\r\n        if (config.createVADProcessor) {\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadNoiseDetection = new VADNoiseDetection();\r\n\r\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Generates events based on no audio input detector.\r\n    if (config.enableNoAudioDetection) {\r\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\r\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\r\n        });\r\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\r\n        });\r\n    }\r\n\r\n\r\n    if ('channelLastN' in config) {\r\n        this.setLastN(config.channelLastN);\r\n    }\r\n\r\n    /**\r\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\r\n     * @type {Jvb121EventGenerator}\r\n     */\r\n    this.jvb121Status = new Jvb121EventGenerator(this);\r\n\r\n    // creates dominant speaker detection that works only in p2p mode\r\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\r\n\r\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\r\n        this.setLocalParticipantProperty(\r\n            'region', config.deploymentInfo.userRegion);\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the conference.\r\n * @param password {string} the password\r\n */\r\nJitsiConference.prototype.join = function(password) {\r\n    if (this.room) {\r\n        this.room.join(password).then(() => this._maybeSetSITimeout());\r\n    }\r\n};\r\n\r\n/**\r\n * Authenticates and upgrades the role of the local participant/user.\r\n *\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the local participant/user finishes\r\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process.\r\n */\r\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\r\n    return authenticateAndUpgradeRole.call(this, {\r\n        ...options,\r\n        onCreateResource: JitsiConference.resourceCreator\r\n    });\r\n};\r\n\r\n/**\r\n * Check if joined to the conference.\r\n */\r\nJitsiConference.prototype.isJoined = function() {\r\n    return this.room && this.room.joined;\r\n};\r\n\r\n/**\r\n * Tells whether or not the P2P mode is enabled in the configuration.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PEnabled = function() {\r\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\r\n\r\n        // FIXME: remove once we have a default config template. -saghul\r\n        || typeof this.options.config.p2p === 'undefined';\r\n};\r\n\r\n/**\r\n * When in P2P test mode, the conference will not automatically switch to P2P\r\n * when there 2 participants.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\r\n    return Boolean(this.options.config.testing\r\n        && this.options.config.testing.p2pTestMode);\r\n};\r\n\r\n/**\r\n * Leaves the conference.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.leave = function() {\r\n    if (this.participantConnectionStatus) {\r\n        this.participantConnectionStatus.dispose();\r\n        this.participantConnectionStatus = null;\r\n    }\r\n    if (this.avgRtpStatsReporter) {\r\n        this.avgRtpStatsReporter.dispose();\r\n        this.avgRtpStatsReporter = null;\r\n    }\r\n\r\n    if (this._audioOutputProblemDetector) {\r\n        this._audioOutputProblemDetector.dispose();\r\n        this._audioOutputProblemDetector = null;\r\n    }\r\n\r\n    if (this.e2eping) {\r\n        this.e2eping.stop();\r\n        this.e2eping = null;\r\n    }\r\n\r\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\r\n\r\n    this.rtc.closeBridgeChannel();\r\n    if (this.statistics) {\r\n        this.statistics.dispose();\r\n    }\r\n\r\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n\r\n    // Close both JVb and P2P JingleSessions\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.close();\r\n        this.jvbJingleSession = null;\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        this.p2pJingleSession.close();\r\n        this.p2pJingleSession = null;\r\n    }\r\n\r\n    // leave the conference\r\n    if (this.room) {\r\n        const room = this.room;\r\n\r\n        // Unregister connection state listeners\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_INTERRUPTED,\r\n            this._onIceConnectionInterrupted);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_RESTORED,\r\n            this._onIceConnectionRestored);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_ESTABLISHED,\r\n            this._onIceConnectionEstablished);\r\n\r\n        room.removeListener(\r\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n            this._updateProperties);\r\n\r\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n        this.eventManager.removeXMPPListeners();\r\n\r\n        this.room = null;\r\n\r\n        return room.leave()\r\n            .then(() => {\r\n                if (this.rtc) {\r\n                    this.rtc.destroy();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // remove all participants because currently the conference\r\n                // won't be usable anyway. This is done on success automatically\r\n                // by the ChatRoom instance.\r\n                this.getParticipants().forEach(\r\n                    participant => this.onMemberLeft(participant.getJid()));\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // If this.room == null we are calling second time leave().\r\n    return Promise.reject(\r\n        new Error('The conference is has been already left'));\r\n};\r\n\r\n/**\r\n * Returns the currently active media session if any.\r\n *\r\n * @returns {JingleSessionPC|undefined}\r\n * @private\r\n */\r\nJitsiConference.prototype._getActiveMediaSession = function() {\r\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\r\n};\r\n\r\n/**\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n * @private\r\n */\r\nJitsiConference.prototype._getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Returns name of this conference.\r\n */\r\nJitsiConference.prototype.getName = function() {\r\n    return this.options.name;\r\n};\r\n\r\n/**\r\n * Returns the {@link JitsiConnection} used by this this conference.\r\n */\r\nJitsiConference.prototype.getConnection = function() {\r\n    return this.connection;\r\n};\r\n\r\n/**\r\n * Check if authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isAuthEnabled = function() {\r\n    return this.authEnabled;\r\n};\r\n\r\n/**\r\n * Check if user is logged in.\r\n */\r\nJitsiConference.prototype.isLoggedIn = function() {\r\n    return Boolean(this.authIdentity);\r\n};\r\n\r\n/**\r\n * Get authorized login.\r\n */\r\nJitsiConference.prototype.getAuthLogin = function() {\r\n    return this.authIdentity;\r\n};\r\n\r\n/**\r\n * Check if external authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isExternalAuthEnabled = function() {\r\n    return this.room && this.room.moderator.isExternalAuthEnabled();\r\n};\r\n\r\n/**\r\n * Get url for external authentication.\r\n * @param {boolean} [urlForPopup] if true then return url for login popup,\r\n *                                else url of login page.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!this.isExternalAuthEnabled()) {\r\n            reject();\r\n\r\n            return;\r\n        }\r\n        if (urlForPopup) {\r\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\r\n        } else {\r\n            this.room.moderator.getLoginUrl(resolve, reject);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the local tracks of the given media type, or all local tracks if no\r\n * specific type is given.\r\n * @param {MediaType} [mediaType] Optional media type (audio or video).\r\n */\r\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = [];\r\n\r\n    if (this.rtc) {\r\n        tracks = this.rtc.getLocalTracks(mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Obtains local audio track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalAudioTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains local video track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalVideoTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\r\n};\r\n\r\n/**\r\n * Attaches a handler for events(For example - \"participant joined\".) in the\r\n * conference. All possible event are defined in JitsiConferenceEvents.\r\n * @param eventId the event ID.\r\n * @param handler handler for the event.\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.on = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.on(eventId, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes event listener\r\n * @param eventId the event ID.\r\n * @param [handler] optional, the specific handler to unbind\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.off = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.removeListener(eventId, handler);\r\n    }\r\n};\r\n\r\n// Common aliases for event emitter\r\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\r\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\r\n\r\n/**\r\n * Receives notifications from other participants about commands / custom events\r\n * (sent by sendCommand or sendCommandOnce methods).\r\n * @param command {String} the name of the command\r\n * @param handler {Function} handler for the command\r\n */\r\nJitsiConference.prototype.addCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.addPresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n  * Removes command  listener\r\n  * @param command {String} the name of the command\r\n  * @param handler {Function} handler to remove for the command\r\n  */\r\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.removePresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends text message to the other participants in the conference\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendTextMessage = function(\r\n        message, elementName = 'body') {\r\n    if (this.room) {\r\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\r\n\r\n        this.room.sendMessage(message, elementName, displayName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send private text message to another participant of the conference\r\n * @param id the id of the participant to send a private message.\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendPrivateTextMessage = function(\r\n        id, message, elementName = 'body') {\r\n    if (this.room) {\r\n        this.room.sendPrivateMessage(id, message, elementName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send presence command.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommand = function(name, values) {\r\n    if (this.room) {\r\n        this.room.addToPresence(name, values);\r\n        this.room.sendPresence();\r\n    } else {\r\n        logger.warn('Not sending a command, room not initialized.');\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Send presence command one time.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\r\n    this.sendCommand(name, values);\r\n    this.removeCommand(name);\r\n};\r\n\r\n/**\r\n * Removes presence command.\r\n * @param name {String} the name of the command.\r\n **/\r\nJitsiConference.prototype.removeCommand = function(name) {\r\n    if (this.room) {\r\n        this.room.removeFromPresence(name);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the display name for this conference.\r\n * @param name the display name to set\r\n */\r\nJitsiConference.prototype.setDisplayName = function(name) {\r\n    if (this.room) {\r\n        this.room.addToPresence('nick', {\r\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n            value: name\r\n        });\r\n        this.room.sendPresence();\r\n    }\r\n};\r\n\r\n/**\r\n * Set new subject for this conference. (available only for moderator)\r\n * @param {string} subject new subject\r\n */\r\nJitsiConference.prototype.setSubject = function(subject) {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.setSubject(subject);\r\n    }\r\n};\r\n\r\n/**\r\n * Get a transcriber object for all current participants in this conference\r\n * @return {Transcriber} the transcriber object\r\n */\r\nJitsiConference.prototype.getTranscriber = function() {\r\n    if (this.transcriber === undefined) {\r\n        this.transcriber = new Transcriber();\r\n\r\n        // add all existing local audio tracks to the transcriber\r\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n        for (const localAudio of localAudioTracks) {\r\n            this.transcriber.addTrack(localAudio);\r\n        }\r\n\r\n        // and all remote audio tracks\r\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const remoteTrack of remoteAudioTracks) {\r\n            this.transcriber.addTrack(remoteTrack);\r\n        }\r\n    }\r\n\r\n    return this.transcriber;\r\n};\r\n\r\n/**\r\n * Returns the transcription status.\r\n *\r\n * @returns {String} \"on\" or \"off\".\r\n */\r\nJitsiConference.prototype.getTranscriptionStatus = function() {\r\n    return this.room.transcriptionStatus;\r\n};\r\n\r\n/**\r\n * Adds JitsiLocalTrack object to the conference.\r\n * @param track the JitsiLocalTrack object.\r\n * @returns {Promise<JitsiLocalTrack>}\r\n * @throws {Error} if the specified track is a video track and there is already\r\n * another video track in the conference.\r\n */\r\nJitsiConference.prototype.addTrack = function(track) {\r\n    if (track.isVideoTrack()) {\r\n        // Ensure there's exactly 1 local video track in the conference.\r\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\r\n\r\n        if (localVideoTrack) {\r\n            // Don't be excessively harsh and severe if the API client happens\r\n            // to attempt to add the same local video track twice.\r\n            if (track === localVideoTrack) {\r\n                return Promise.resolve(track);\r\n            }\r\n\r\n            return Promise.reject(new Error(\r\n                'cannot add second video track to the conference'));\r\n\r\n        }\r\n    }\r\n\r\n    return this.replaceTrack(null, track);\r\n};\r\n\r\n/**\r\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\r\n * @param {number} audioLevel the audio level\r\n * @param {TraceablePeerConnection} [tpc]\r\n */\r\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\r\n        audioLevel,\r\n        tpc) {\r\n    const activeTpc = this.getActivePeerConnection();\r\n\r\n    // There will be no TraceablePeerConnection if audio levels do not come from\r\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\r\n    // Audio Analyser API and emits local audio levels events through\r\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\r\n    // optional.\r\n    if (!tpc || activeTpc === tpc) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this.myUserId(), audioLevel);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_MUTE_CHANGED change conference event.\r\n * @param track the JitsiTrack object related to the event.\r\n */\r\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\r\n    // check if track was muted by focus and now is unmuted by user\r\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\r\n        this.isMutedByFocus = false;\r\n\r\n        // unmute local user on server\r\n        this.room.muteParticipant(this.room.myroomjid, false);\r\n    }\r\n\r\n    let actorParticipant;\r\n\r\n    if (this.mutedByFocusActor) {\r\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\r\n\r\n        actorParticipant = this.participants[actorId];\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\r\n};\r\n\r\n/**\r\n * Clear JitsiLocalTrack properties and listeners.\r\n * @param track the JitsiLocalTrack object.\r\n */\r\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\r\n    track._setConference(null);\r\n    this.rtc.removeLocalTrack(track);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        track.muteHandler);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        track.audioLevelHandler);\r\n\r\n    // send event for stopping screen sharing\r\n    // FIXME: we assume we have only one screen sharing track\r\n    // if we change this we need to fix this check\r\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n        this.statistics.sendScreenSharingEvent(false);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n};\r\n\r\n/**\r\n * Removes JitsiLocalTrack from the conference and performs\r\n * a new offer/answer cycle.\r\n * @param {JitsiLocalTrack} track\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.removeTrack = function(track) {\r\n    return this.replaceTrack(track, null);\r\n};\r\n\r\n/**\r\n * Replaces oldTrack with newTrack and performs a single offer/answer\r\n *  cycle after both operations are done.  Either oldTrack or newTrack\r\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\r\n *  effectively just removes 'oldTrack'\r\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\r\n * @param {JitsiLocalTrack} newTrack the new stream to use\r\n * @returns {Promise} resolves when the replacement is finished\r\n */\r\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    // First do the removal of the oldTrack at the JitsiConference level\r\n    if (oldTrack) {\r\n        if (oldTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n    if (newTrack) {\r\n        if (newTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n\r\n    // Now replace the stream at the lower levels\r\n    return this._doReplaceTrack(oldTrack, newTrack)\r\n        .then(() => {\r\n            if (oldTrack) {\r\n                this.onLocalTrackRemoved(oldTrack);\r\n            }\r\n            if (newTrack) {\r\n                // Now handle the addition of the newTrack at the\r\n                // JitsiConference level\r\n                this._setupNewTrack(newTrack);\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }, error => Promise.reject(new Error(error)));\r\n};\r\n\r\n/**\r\n * Replaces the tracks at the lower level by going through the Jingle session\r\n * and WebRTC peer connection. The method will resolve immediately if there is\r\n * currently no JingleSession started.\r\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\r\n * the process or <tt>null</t> if the method should act as \"add track\"\r\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\r\n * <tt>null</tt> if the method should act as \"remove track\"\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n * @private\r\n */\r\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\r\n    const replaceTrackPromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no JVB JingleSession');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no P2P JingleSession');\r\n    }\r\n\r\n    return Promise.all(replaceTrackPromises);\r\n};\r\n\r\n/**\r\n * Operations related to creating a new track\r\n * @param {JitsiLocalTrack} newTrack the new track being created\r\n */\r\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\r\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\r\n            && newTrack.videoType !== VideoType.DESKTOP)) {\r\n        // Report active device to statistics\r\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\r\n        const device\r\n            = devices.find(\r\n                d =>\r\n                    d.kind === `${newTrack.getTrack().kind}input`\r\n                        && d.label === newTrack.getTrack().label);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n    if (newTrack.isVideoTrack()) {\r\n        this.removeCommand('videoType');\r\n        this.sendCommand('videoType', {\r\n            value: newTrack.videoType,\r\n            attributes: {\r\n                xmlns: 'http://jitsi.org/jitmeet/video'\r\n            }\r\n        });\r\n    }\r\n    this.rtc.addLocalTrack(newTrack);\r\n\r\n    // ensure that we're sharing proper \"is muted\" state\r\n    if (newTrack.isAudioTrack()) {\r\n        this.room.setAudioMute(newTrack.isMuted());\r\n    } else {\r\n        this.room.setVideoMute(newTrack.isMuted());\r\n    }\r\n\r\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\r\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\r\n    newTrack.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        newTrack.muteHandler);\r\n    newTrack.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        newTrack.audioLevelHandler);\r\n\r\n    newTrack._setConference(this);\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\r\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\r\n * removed on video mute).\r\n * @param {JitsiLocalTrack} track the local track that will be added as part of\r\n * the unmute operation.\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n */\r\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\r\n    const addAsUnmutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no JVB Jingle session started yet');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no P2P Jingle session started yet');\r\n    }\r\n\r\n    return Promise.all(addAsUnmutePromises);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\r\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\r\n * that is to stop sending any data and turn off the HW camera device.\r\n * @param {JitsiLocalTrack} track the local track that will be removed.\r\n * @return {Promise}\r\n */\r\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\r\n    const removeAsMutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.jvbJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no JVB JingleSession started yet');\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.p2pJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no P2P JingleSession started yet');\r\n    }\r\n\r\n    return Promise.all(removeAsMutePromises);\r\n};\r\n\r\n/**\r\n * Get role of the local user.\r\n * @returns {string} user role: 'moderator' or 'none'\r\n */\r\nJitsiConference.prototype.getRole = function() {\r\n    return this.room.role;\r\n};\r\n\r\n/**\r\n * Returns whether or not the current conference has been joined as a hidden\r\n * user.\r\n *\r\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\r\n * no connection is active.\r\n */\r\nJitsiConference.prototype.isHidden = function() {\r\n    if (!this.connection) {\r\n        return null;\r\n    }\r\n\r\n    return Strophe.getDomainFromJid(this.connection.getJid())\r\n        === this.options.config.hiddenDomain;\r\n};\r\n\r\n/**\r\n * Check if local user is moderator.\r\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\r\n * we're no longer in the conference room then <tt>null</tt> is returned.\r\n */\r\nJitsiConference.prototype.isModerator = function() {\r\n    return this.room ? this.room.isModerator() : null;\r\n};\r\n\r\n/**\r\n * Set password for the room.\r\n * @param {string} password new password for the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.lock = function(password) {\r\n    if (!this.isModerator()) {\r\n        return Promise.reject(new Error('You are not moderator.'));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.room.lockRoom(\r\n            password || '',\r\n            () => resolve(),\r\n            err => reject(err),\r\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\r\n    });\r\n};\r\n\r\n/**\r\n * Remove password from the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.unlock = function() {\r\n    return this.lock();\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the selected participant in\r\n * order to receive higher video quality (if simulcast is enabled).\r\n * Or cache it if channel is not created and send it once channel is available.\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipant = function(participantId) {\r\n    this.selectParticipants([ participantId ]);\r\n};\r\n\r\n/*\r\n * Elects participants with given ids to be the selected participants in order\r\n * to receive higher video quality (if simulcast is enabled). The argument\r\n * should be an array of participant id strings or an empty array; an error will\r\n * be thrown if a non-array is passed in. The error is thrown as a layer of\r\n * protection against passing an invalid argument, as the error will happen in\r\n * the bridge and may not be visible in the client.\r\n *\r\n * @param {Array<strings>} participantIds - An array of identifiers for\r\n * participants.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipants = function(participantIds) {\r\n    if (!Array.isArray(participantIds)) {\r\n        throw new Error('Invalid argument; participantIds must be an array.');\r\n    }\r\n\r\n    this.rtc.selectEndpoints(participantIds);\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the pinned participant in\r\n * order to always receive video for this participant (even when last n is\r\n * enabled).\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n */\r\nJitsiConference.prototype.pinParticipant = function(participantId) {\r\n    this.rtc.pinEndpoint(participantId);\r\n};\r\n\r\n/**\r\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\r\n * @returns {number}\r\n */\r\nJitsiConference.prototype.getLastN = function() {\r\n    return this.rtc.getLastN();\r\n};\r\n\r\n/**\r\n * Selects a new value for \"lastN\". The requested amount of videos are going\r\n * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n * all available videos.\r\n * @param lastN the new number of videos the user would like to receive.\r\n * @throws Error or RangeError if the given value is not a number or is smaller\r\n * than -1.\r\n */\r\nJitsiConference.prototype.setLastN = function(lastN) {\r\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\r\n        throw new Error(`Invalid value for lastN: ${lastN}`);\r\n    }\r\n    const n = Number(lastN);\r\n\r\n    if (n < -1) {\r\n        throw new RangeError('lastN cannot be smaller than -1');\r\n    }\r\n    this.rtc.setLastN(n);\r\n\r\n    // If the P2P session is not fully established yet, we wait until it gets\r\n    // established.\r\n    if (this.p2pJingleSession) {\r\n        const isVideoActive = n !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    `Failed to adjust video transfer status (${isVideoActive})`,\r\n                    error);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the participant given by participantId is currently included in\r\n * the last N.\r\n * @param {string} participantId the identifier of the participant we would\r\n * like to check.\r\n * @return {boolean} true if the participant with id is in the last N set or\r\n * if there's no last N set, false otherwise.\r\n * @deprecated this method should never be used to figure out the UI, but\r\n * {@link ParticipantConnectionStatus} should be used instead.\r\n */\r\nJitsiConference.prototype.isInLastN = function(participantId) {\r\n    return this.rtc.isInLastN(participantId);\r\n};\r\n\r\n/**\r\n * @return Array<JitsiParticipant> an array of all participants in this\r\n * conference.\r\n */\r\nJitsiConference.prototype.getParticipants = function() {\r\n    return Object.keys(this.participants).map(function(key) {\r\n        return this.participants[key];\r\n    }, this);\r\n};\r\n\r\n/**\r\n * Returns the number of participants in the conference, including the local\r\n * participant.\r\n * @param countHidden {boolean} Whether or not to include hidden participants\r\n * in the count. Default: false.\r\n **/\r\nJitsiConference.prototype.getParticipantCount\r\n    = function(countHidden = false) {\r\n\r\n        let participants = this.getParticipants();\r\n\r\n        if (!countHidden) {\r\n            participants = participants.filter(p => !p.isHidden());\r\n        }\r\n\r\n        // Add one for the local participant.\r\n        return participants.length + 1;\r\n    };\r\n\r\n/**\r\n * @returns {JitsiParticipant} the participant in this conference with the\r\n * specified id (or undefined if there isn't one).\r\n * @param id the id of the participant.\r\n */\r\nJitsiConference.prototype.getParticipantById = function(id) {\r\n    return this.participants[id];\r\n};\r\n\r\n/**\r\n * Grant owner rights to the participant.\r\n * @param {string} id id of the participant to grant owner rights to.\r\n */\r\nJitsiConference.prototype.grantOwner = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.setAffiliation(participant.getJid(), 'owner');\r\n};\r\n\r\n/**\r\n * Kick participant from this conference.\r\n * @param {string} id id of the participant to kick\r\n */\r\nJitsiConference.prototype.kickParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.kick(participant.getJid());\r\n};\r\n\r\n/**\r\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\r\n * analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearSITimeout = function() {\r\n    if (this._sessionInitiateTimeout\r\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\r\n        window.clearTimeout(this._sessionInitiateTimeout);\r\n        this._sessionInitiateTimeout = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\r\n * event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeSetSITimeout = function() {\r\n    // Jicofo is supposed to invite if there are at least 2 participants\r\n    if (!this.jvbJingleSession\r\n            && this.getParticipantCount() >= 2\r\n            && !this._sessionInitiateTimeout) {\r\n        this._sessionInitiateTimeout = window.setTimeout(() => {\r\n            this._sessionInitiateTimeout = null;\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_SI_TIMEOUT,\r\n                {\r\n                    p2p: false,\r\n                    value: JINGLE_SI_TIMEOUT\r\n                }));\r\n        }, JINGLE_SI_TIMEOUT);\r\n    }\r\n};\r\n\r\n/**\r\n * Mutes a participant.\r\n * @param {string} id The id of the participant to mute.\r\n */\r\nJitsiConference.prototype.muteParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.muteParticipant(participant.getJid(), true);\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Notifies this JitsiConference that a new member has joined its chat room.\r\n *\r\n * FIXME This should NOT be exposed!\r\n *\r\n * @param jid the jid of the participant in the MUC\r\n * @param nick the display name of the participant\r\n * @param role the role of the participant in the MUC\r\n * @param isHidden indicates if this is a hidden participant (system\r\n * participant for example a recorder).\r\n * @param statsID the participant statsID (optional)\r\n * @param status the initial status if any\r\n * @param identity the member identity, if any\r\n * @param botType the member botType, if any\r\n */\r\nJitsiConference.prototype.onMemberJoined = function(\r\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant\r\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\r\n\r\n    participant._role = role;\r\n    participant._botType = botType;\r\n    this.participants[id] = participant;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_JOINED,\r\n        id,\r\n        participant);\r\n\r\n    this._updateFeatures(participant);\r\n\r\n    this._maybeStartOrStopP2P();\r\n    this._maybeSetSITimeout();\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Updates features for a participant.\r\n * @param {JitsiParticipant} participant - The participant to query for features.\r\n * @returns {void}\r\n * @private\r\n */\r\nJitsiConference.prototype._updateFeatures = function(participant) {\r\n    participant.getFeatures()\r\n        .then(features => {\r\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\r\n            this.updateDTMFSupport();\r\n\r\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\r\n                participant.setProperty('features_jigasi', true);\r\n            }\r\n\r\n            if (features.has('https://jitsi.org/meet/e2ee')) {\r\n                participant.setProperty('features_e2ee', true);\r\n            }\r\n        })\r\n        .catch(() => false);\r\n};\r\n\r\n/**\r\n * Get notified when member bot type had changed.\r\n * @param jid the member jid\r\n * @param botType the new botType value\r\n * @private\r\n */\r\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\r\n\r\n    // find the participant and mark it as non bot, as the real one will join\r\n    // in a moment\r\n    const peers = this.getParticipants();\r\n    const botParticipant = peers.find(p => p.getJid() === jid);\r\n\r\n    if (botParticipant) {\r\n        botParticipant._botType = botType;\r\n        const id = Strophe.getResourceFromJid(jid);\r\n\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\r\n            id,\r\n            botType);\r\n    }\r\n\r\n    // if botType changed to undefined, botType was removed, in case of\r\n    // poltergeist mode this is the moment when the poltergeist had exited and\r\n    // the real participant had already replaced it.\r\n    // In this case we can check and try p2p\r\n    if (!botParticipant._botType) {\r\n        this._maybeStartOrStopP2P();\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.onMemberLeft = function(jid) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant = this.participants[id];\r\n\r\n    delete this.participants[id];\r\n\r\n    const removedTracks = this.rtc.removeRemoteTracks(id);\r\n\r\n    removedTracks.forEach(\r\n        track =>\r\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\r\n\r\n    // there can be no participant in case the member that left is focus\r\n    if (participant) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.USER_LEFT, id, participant);\r\n    }\r\n\r\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\r\n    this._maybeClearSITimeout();\r\n};\r\n\r\n/**\r\n * Designates an event indicating that we were kicked from the XMPP MUC.\r\n * @param {boolean} isSelfPresence - whether it is for local participant\r\n * or another participant.\r\n * @param {string} actorId - the id of the participant who was initiator\r\n * of the kick.\r\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\r\n * this is the id of the participant which was kicked.\r\n */\r\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\r\n    // This check which be true when we kick someone else. With the introduction of lobby\r\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\r\n    // avoid emitting an event where `undefined` kicked someone.\r\n    if (actorId === this.myUserId()) {\r\n        return;\r\n    }\r\n\r\n    const actorParticipant = this.participants[actorId];\r\n\r\n    if (isSelfPresence) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.KICKED, actorParticipant);\r\n\r\n        this.leave();\r\n\r\n        return;\r\n    }\r\n\r\n    const kickedParticipant = this.participants[kickedParticipantId];\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\r\n};\r\n\r\n/**\r\n * Method called on local MUC role change.\r\n * @param {string} role the name of new user's role as defined by XMPP MUC.\r\n */\r\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\r\n    // Emit role changed for local  JID\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\r\n};\r\n\r\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    participant._role = role;\r\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\r\n};\r\n\r\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n\r\n    if (participant._displayName === displayName) {\r\n        return;\r\n    }\r\n\r\n    participant._displayName = displayName;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n        id,\r\n        displayName);\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\r\n * JitsiConference\r\n */\r\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\r\n    if (track.isP2P && !this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\r\n\r\n        return;\r\n    } else if (!track.isP2P && this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote JVB track, when in P2P - IGNORED');\r\n\r\n        return;\r\n    }\r\n\r\n    const id = track.getParticipantId();\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        logger.error(`No participant found for id: ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Add track to JitsiParticipant.\r\n    participant._tracks.push(track);\r\n\r\n    if (this.transcriber) {\r\n        this.transcriber.addTrack(track);\r\n    }\r\n\r\n    const emitter = this.eventEmitter;\r\n\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        (audioLevel, tpc) => {\r\n            const activeTPC = this.getActivePeerConnection();\r\n\r\n            if (activeTPC === tpc) {\r\n                emitter.emit(\r\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    id,\r\n                    audioLevel);\r\n            }\r\n        }\r\n    );\r\n\r\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'session-answer' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which an answer was\r\n * received.\r\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P setAnswer');\r\n\r\n        this.p2pJingleSession.setAnswer(answer);\r\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'transport-info' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\r\n * received\r\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\r\n * element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P addIceCandidates');\r\n        this.p2pJingleSession.addIceCandidates(transportInfo);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} removedTrack\r\n */\r\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\r\n    this.getParticipants().forEach(participant => {\r\n        const tracks = participant.getTracks();\r\n\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            if (tracks[i] === removedTrack) {\r\n                // Since the tracks have been compared and are\r\n                // considered equal the result of splice can be ignored.\r\n                participant._tracks.splice(i, 1);\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\r\n\r\n                if (this.transcriber) {\r\n                    this.transcriber.removeTrack(removedTrack);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }, this);\r\n};\r\n\r\n/**\r\n * Handles an incoming call event for the P2P jingle session.\r\n */\r\nJitsiConference.prototype._onIncomingCallP2P = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n\r\n    let rejectReason;\r\n\r\n    if (!browser.supportsP2P()) {\r\n        rejectReason = {\r\n            reason: 'unsupported-applications',\r\n            reasonDescription: 'P2P not supported',\r\n            errorMsg: 'This client does not support P2P connections'\r\n        };\r\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P disabled',\r\n            errorMsg: 'P2P mode disabled in the configuration'\r\n        };\r\n    } else if (this.p2pJingleSession) {\r\n        // Reject incoming P2P call (already in progress)\r\n        rejectReason = {\r\n            reason: 'busy',\r\n            reasonDescription: 'P2P already in progress',\r\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\r\n        };\r\n    } else if (!this._shouldBeInP2PMode()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P requirements not met',\r\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\r\n        };\r\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\r\n    }\r\n\r\n    if (rejectReason) {\r\n        this._rejectIncomingCall(jingleSession, rejectReason);\r\n    } else {\r\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles an incoming call event.\r\n */\r\nJitsiConference.prototype.onIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n    // Handle incoming P2P call\r\n    if (jingleSession.isP2P) {\r\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\r\n    } else {\r\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\r\n            const description = 'Rejecting session-initiate from non-focus.';\r\n\r\n            this._rejectIncomingCall(\r\n                jingleSession, {\r\n                    reason: 'security-error',\r\n                    reasonDescription: description,\r\n                    errorMsg: description\r\n                });\r\n\r\n            return;\r\n        }\r\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\r\n    }\r\n};\r\n\r\n/**\r\n * Accepts an incoming call event for the JVB jingle session.\r\n */\r\nJitsiConference.prototype._acceptJvbIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n\r\n    // Accept incoming call\r\n    this.jvbJingleSession = jingleSession;\r\n    this.room.connectionTimes['session.initiate'] = now;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    if (this.wasStopped) {\r\n        Statistics.sendAnalyticsAndLog(\r\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\r\n    }\r\n\r\n    const serverRegion\r\n        = $(jingleOffer)\r\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\r\n            .attr('region');\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\r\n        serverRegion);\r\n\r\n    this._maybeClearSITimeout();\r\n    Statistics.sendAnalytics(createJingleEvent(\r\n        ACTION_JINGLE_SI_RECEIVED,\r\n        {\r\n            p2p: false,\r\n            value: now\r\n        }));\r\n\r\n    try {\r\n        jingleSession.initialize(this.room, this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: Boolean(this._e2eEncryption)\r\n        });\r\n    } catch (error) {\r\n        GlobalOnErrorHandler.callErrorHandler(error);\r\n    }\r\n\r\n    // Open a channel with the videobridge.\r\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\r\n\r\n    // Add local tracks to the session\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    try {\r\n        jingleSession.acceptOffer(\r\n            jingleOffer,\r\n            () => {\r\n                // If for any reason invite for the JVB session arrived after\r\n                // the P2P has been established already the media transfer needs\r\n                // to be turned off here.\r\n                if (this.isP2PActive() && this.jvbJingleSession) {\r\n                    this._suspendMediaTransferForJvbConnection();\r\n                }\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                    jingleSession);\r\n                if (!this.isP2PActive()) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n                        jingleSession);\r\n                }\r\n            },\r\n            error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to accept incoming Jingle session', error);\r\n            },\r\n            localTracks\r\n        );\r\n\r\n        // Start callstats as soon as peerconnection is initialized,\r\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\r\n        // happen in case if user doesn't have or denied permission to\r\n        // both camera and microphone.\r\n        logger.info('Starting CallStats for JVB connection...');\r\n        this.statistics.startCallStats(\r\n            this.jvbJingleSession.peerconnection,\r\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\r\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\r\n    } catch (e) {\r\n        GlobalOnErrorHandler.callErrorHandler(e);\r\n        logger.error(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the BridgeChannel.\r\n *\r\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\r\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\r\n * BridgeChannel mode.\r\n * @param {TraceablePeerConnection} pc the peer connection which will be used\r\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\r\n */\r\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\r\n    let wsUrl = null;\r\n    const webSocket\r\n        = $(offerIq)\r\n            .find('>content>transport>web-socket')\r\n            .first();\r\n\r\n    if (webSocket.length === 1) {\r\n        wsUrl = webSocket[0].getAttribute('url');\r\n    }\r\n\r\n    let bridgeChannelType;\r\n\r\n    switch (this.options.config.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        bridgeChannelType = 'datachannel';\r\n        break;\r\n    case 'websocket':\r\n        bridgeChannelType = 'websocket';\r\n        break;\r\n    }\r\n\r\n    if (bridgeChannelType === 'datachannel') {\r\n        this.rtc.initializeBridgeChannel(pc, null);\r\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\r\n        this.rtc.initializeBridgeChannel(null, wsUrl);\r\n    }\r\n};\r\n\r\n/**\r\n * Rejects incoming Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\r\n * @param {object} [options]\r\n * @param {string} options.reason the name of the reason element as defined\r\n * by Jingle\r\n * @param {string} options.reasonDescription the reason description which will\r\n * be included in Jingle 'session-terminate' message.\r\n * @param {string} options.errorMsg an error message to be logged on global\r\n * error handler\r\n * @private\r\n */\r\nJitsiConference.prototype._rejectIncomingCall = function(\r\n        jingleSession,\r\n        options) {\r\n    if (options && options.errorMsg) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\r\n    }\r\n\r\n    // Terminate the jingle session with a reason\r\n    jingleSession.terminate(\r\n        null /* success callback => we don't care */,\r\n        error => {\r\n            logger.warn(\r\n                'An error occurred while trying to terminate'\r\n                    + ' invalid Jingle session', error);\r\n        }, {\r\n            reason: options && options.reason,\r\n            reasonDescription: options && options.reasonDescription,\r\n            sendSessionTerminate: true\r\n        });\r\n};\r\n\r\n/**\r\n * Handles the call ended event.\r\n * XXX is this due to the remote side terminating the Jingle session?\r\n *\r\n * @param {JingleSessionPC} jingleSession the jingle session which has been\r\n * terminated.\r\n * @param {String} reasonCondition the Jingle reason condition.\r\n * @param {String|null} reasonText human readable reason text which may provide\r\n * more details about why the call has been terminated.\r\n */\r\nJitsiConference.prototype.onCallEnded = function(\r\n        jingleSession,\r\n        reasonCondition,\r\n        reasonText) {\r\n    logger.info(\r\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\r\n            jingleSession.isP2P}`);\r\n    if (jingleSession === this.jvbJingleSession) {\r\n        this.wasStopped = true;\r\n\r\n        Statistics.sendAnalytics(\r\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\r\n\r\n        // Stop the stats\r\n        if (this.statistics) {\r\n            this.statistics.stopRemoteStats(\r\n                this.jvbJingleSession.peerconnection);\r\n            logger.info('Stopping JVB CallStats');\r\n            this.statistics.stopCallStats(\r\n                this.jvbJingleSession.peerconnection);\r\n        }\r\n\r\n        // Current JVB JingleSession is no longer valid, so set it to null\r\n        this.jvbJingleSession = null;\r\n\r\n        // Let the RTC service do any cleanups\r\n        this.rtc.onCallEnded();\r\n    } else if (jingleSession === this.p2pJingleSession) {\r\n        // It's the responder who decides to enforce JVB mode, so that both\r\n        // initiator and responder are aware if it was intentional.\r\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\r\n            logger.info('In forced JVB 121 mode...');\r\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        } else if (reasonCondition === 'connectivity-error'\r\n            && reasonText === 'ICE FAILED') {\r\n            // It can happen that the other peer detects ICE failed and\r\n            // terminates the session, before we get the event on our side.\r\n            // But we are able to parse the reason and mark it here.\r\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n        }\r\n        this._stopP2PSession();\r\n    } else {\r\n        logger.error(\r\n            'Received onCallEnded for invalid session',\r\n            jingleSession.sid,\r\n            jingleSession.remoteJid,\r\n            reasonCondition,\r\n            reasonText);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles the suspend detected event. Leaves the room and fires suspended.\r\n * @param {JingleSessionPC} jingleSession\r\n */\r\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\r\n    if (!jingleSession.isP2P) {\r\n        this.leave();\r\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.updateDTMFSupport = function() {\r\n    let somebodySupportsDTMF = false;\r\n    const participants = this.getParticipants();\r\n\r\n    // check if at least 1 participant supports DTMF\r\n    for (let i = 0; i < participants.length; i += 1) {\r\n        if (participants[i].supportsDTMF()) {\r\n            somebodySupportsDTMF = true;\r\n            break;\r\n        }\r\n    }\r\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\r\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\r\n            somebodySupportsDTMF);\r\n    }\r\n};\r\n\r\n/**\r\n * Allows to check if there is at least one user in the conference\r\n * that supports DTMF.\r\n * @returns {boolean} true if somebody supports DTMF, false otherwise\r\n */\r\nJitsiConference.prototype.isDTMFSupported = function() {\r\n    return this.somebodySupportsDTMF;\r\n};\r\n\r\n/**\r\n * Returns the local user's ID\r\n * @return {string} local user's ID\r\n */\r\nJitsiConference.prototype.myUserId = function() {\r\n    return (\r\n        this.room && this.room.myroomjid\r\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\r\n            : null);\r\n};\r\n\r\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    if (peerConnection) {\r\n        peerConnection.sendTones(tones, duration, pause);\r\n    } else {\r\n        logger.warn('cannot sendTones: no peer connection');\r\n    }\r\n};\r\n\r\n/**\r\n * Starts recording the current conference.\r\n *\r\n * @param {Object} options - Configuration for the recording. See\r\n * {@link Chatroom#startRecording} for more info.\r\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\r\n */\r\nJitsiConference.prototype.startRecording = function(options) {\r\n    if (this.room) {\r\n        return this.recordingManager.startRecording(options);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Stop a recording session.\r\n *\r\n * @param {string} sessionID - The ID of the recording session that\r\n * should be stopped.\r\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\r\n */\r\nJitsiConference.prototype.stopRecording = function(sessionID) {\r\n    if (this.room) {\r\n        return this.recordingManager.stopRecording(sessionID);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Returns true if the SIP calls are supported and false otherwise\r\n */\r\nJitsiConference.prototype.isSIPCallingSupported = function() {\r\n    if (this.room) {\r\n        return this.room.isSIPCallingSupported();\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Dials a number.\r\n * @param number the number\r\n */\r\nJitsiConference.prototype.dial = function(number) {\r\n    if (this.room) {\r\n        return this.room.dial(number);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Hangup an existing call\r\n */\r\nJitsiConference.prototype.hangup = function() {\r\n    if (this.room) {\r\n        return this.room.hangup();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the transcription service.\r\n */\r\nJitsiConference.prototype.startTranscriber = function() {\r\n    return this.dial('jitsi_meet_transcribe');\r\n};\r\n\r\n\r\n/**\r\n * Stops the transcription service.\r\n */\r\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\r\n\r\n/**\r\n * Returns the phone number for joining the conference.\r\n */\r\nJitsiConference.prototype.getPhoneNumber = function() {\r\n    if (this.room) {\r\n        return this.room.getPhoneNumber();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the pin for joining the conference with phone.\r\n */\r\nJitsiConference.prototype.getPhonePin = function() {\r\n    if (this.room) {\r\n        return this.room.getPhonePin();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the meeting unique ID if any.\r\n *\r\n * @returns {string|undefined}\r\n */\r\nJitsiConference.prototype.getMeetingUniqueId = function() {\r\n    if (this.room) {\r\n        return this.room.getMeetingId();\r\n    }\r\n};\r\n\r\n/**\r\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\r\n * which connection is currently active.\r\n *\r\n * @return {TraceablePeerConnection|null} null if there isn't any active\r\n * <tt>TraceablePeerConnection</tt> currently available.\r\n * @public (FIXME how to make package local ?)\r\n */\r\nJitsiConference.prototype.getActivePeerConnection = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection;\r\n    }\r\n\r\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\r\n};\r\n\r\n/**\r\n * Returns the connection state for the current room. Its ice connection state\r\n * for its session.\r\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\r\n * be converted to \"connected\".\r\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\r\n * peer connection at this time.\r\n */\r\nJitsiConference.prototype.getConnectionState = function() {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    return peerConnection ? peerConnection.getConnectionState() : null;\r\n};\r\n\r\n/**\r\n * Make all new participants mute their audio/video on join.\r\n * @param policy {Object} object with 2 boolean properties for video and audio:\r\n * @param {boolean} audio if audio should be muted.\r\n * @param {boolean} video if video should be muted.\r\n */\r\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\r\n    if (!this.isModerator()) {\r\n        return;\r\n    }\r\n    this.startMutedPolicy = policy;\r\n    this.room.addToPresence('startmuted', {\r\n        attributes: {\r\n            audio: policy.audio,\r\n            video: policy.video,\r\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\r\n        }\r\n    });\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Returns current start muted policy\r\n * @returns {Object} with 2 properties - audio and video.\r\n */\r\nJitsiConference.prototype.getStartMutedPolicy = function() {\r\n    return this.startMutedPolicy;\r\n};\r\n\r\n/**\r\n * Check if audio is muted on join.\r\n */\r\nJitsiConference.prototype.isStartAudioMuted = function() {\r\n    return this.startAudioMuted;\r\n};\r\n\r\n/**\r\n * Check if video is muted on join.\r\n */\r\nJitsiConference.prototype.isStartVideoMuted = function() {\r\n    return this.startVideoMuted;\r\n};\r\n\r\n/**\r\n * Get object with internal logs.\r\n */\r\nJitsiConference.prototype.getLogs = function() {\r\n    const data = this.xmpp.getJingleLog();\r\n\r\n    const metadata = {};\r\n\r\n    metadata.time = new Date();\r\n    metadata.url = window.location.href;\r\n    metadata.ua = navigator.userAgent;\r\n\r\n    const log = this.xmpp.getXmppLog();\r\n\r\n    if (log) {\r\n        metadata.xmpp = log;\r\n    }\r\n\r\n    data.metadata = metadata;\r\n\r\n    return data;\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConference.prototype.getConnectionTimes = function() {\r\n    return this.room.connectionTimes;\r\n};\r\n\r\n/**\r\n * Sets a property for the local participant.\r\n */\r\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\r\n    this.sendCommand(`jitsi_participant_${name}`, { value });\r\n};\r\n\r\n/**\r\n *  Removes a property for the local participant and sends the updated presence.\r\n */\r\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\r\n    this.removeCommand(`jitsi_participant_${name}`);\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Gets a local participant property.\r\n *\r\n * @return value of the local participant property if the tagName exists in the\r\n * list of properties, otherwise returns undefined.\r\n */\r\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\r\n    const property = this.room.presMap.nodes.find(prop =>\r\n        prop.tagName === `jitsi_participant_${name}`\r\n    );\r\n\r\n    return property ? property.value : undefined;\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats if enabled.\r\n *\r\n * @param overallFeedback an integer between 1 and 5 indicating the\r\n * user feedback\r\n * @param detailedFeedback detailed feedback from the user. Not yet used\r\n * @returns {Promise} Resolves if feedback is submitted successfully.\r\n */\r\nJitsiConference.prototype.sendFeedback = function(\r\n        overallFeedback,\r\n        detailedFeedback) {\r\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nJitsiConference.prototype.isCallstatsEnabled = function() {\r\n    return this.statistics.isCallstatsEnabled();\r\n};\r\n\r\n\r\n/**\r\n * Handles track attached to container (Calls associateStreamWithVideoTag method\r\n * from statistics module)\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\r\n * @param container the container\r\n */\r\nJitsiConference.prototype._onTrackAttach = function(track, container) {\r\n    const isLocal = track.isLocal();\r\n    let ssrc = null;\r\n    const isP2P = track.isP2P;\r\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\r\n    const peerConnection\r\n        = isP2P\r\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\r\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\r\n\r\n    if (isLocal) {\r\n        // Local tracks have SSRC stored on per peer connection basis\r\n        if (peerConnection) {\r\n            ssrc = peerConnection.getLocalSSRC(track);\r\n        }\r\n    } else {\r\n        ssrc = track.getSSRC();\r\n    }\r\n    if (!container.id || !ssrc || !peerConnection) {\r\n        return;\r\n    }\r\n\r\n    this.statistics.associateStreamWithVideoTag(\r\n        peerConnection,\r\n        ssrc,\r\n        isLocal,\r\n        remoteUserId,\r\n        track.getUsageLabel(),\r\n        container.id);\r\n};\r\n\r\n/**\r\n * Logs an \"application log\" message.\r\n * @param message {string} The message to log. Note that while this can be a\r\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\r\n * log valid JSON strings, with an \"id\" field used for distinguishing between\r\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\r\n */\r\nJitsiConference.prototype.sendApplicationLog = function(message) {\r\n    Statistics.sendLog(message);\r\n};\r\n\r\n/**\r\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n * focus.\r\n * @param mucJid the full MUC address of the user to be checked.\r\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\r\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\r\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\r\n */\r\nJitsiConference.prototype._isFocus = function(mucJid) {\r\n    return this.room ? this.room.isFocus(mucJid) : null;\r\n};\r\n\r\n/**\r\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\r\n */\r\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\r\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\r\n};\r\n\r\n/**\r\n * Sends a message via the data channel.\r\n * @param to {string} the id of the endpoint that should receive the message.\r\n * If \"\" the message will be sent to all participants.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\r\n    this.rtc.sendChannelMessage(to, payload);\r\n};\r\n\r\n/**\r\n * Sends a broadcast message via the data channel.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\r\n    this.sendEndpointMessage('', payload);\r\n};\r\n\r\n/**\r\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\r\n * broadcasts it to all endpoints in the conference.\r\n * @param {string} to The ID of the endpoint/participant which is to receive\r\n * the message, or '' to broadcast the message to all endpoints in the\r\n * conference.\r\n * @param {string|object} message the message to send. If this is of type\r\n * 'string' it will be sent as a chat message. If it is of type 'object', it\r\n * will be encapsulated in a format recognized by jitsi-meet and converted to\r\n * JSON before being sent.\r\n * @param {boolean} sendThroughVideobridge Whether to send the message through\r\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\r\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\r\n */\r\nJitsiConference.prototype.sendMessage = function(\r\n        message,\r\n        to = '',\r\n        sendThroughVideobridge = false) {\r\n    const messageType = typeof message;\r\n\r\n    // Through videobridge we support only objects. Through XMPP we support\r\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\r\n    // regular chat messages).\r\n    if (messageType !== 'object'\r\n            && (sendThroughVideobridge || messageType !== 'string')) {\r\n        logger.error(`Can not send a message of type ${messageType}`);\r\n\r\n        return;\r\n    }\r\n\r\n    if (sendThroughVideobridge) {\r\n        this.sendEndpointMessage(to, message);\r\n    } else {\r\n        let messageToSend = message;\r\n\r\n        // Name of packet extension of message stanza to send the required\r\n        // message in.\r\n        let elementName = 'body';\r\n\r\n        if (messageType === 'object') {\r\n            elementName = 'json-message';\r\n\r\n            // Mark as valid JSON message if not already\r\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\r\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\r\n            }\r\n\r\n            try {\r\n                messageToSend = JSON.stringify(messageToSend);\r\n            } catch (e) {\r\n                logger.error('Can not send a message, stringify failed: ', e);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (to) {\r\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\r\n        } else {\r\n            // Broadcast\r\n            this.sendTextMessage(messageToSend, elementName);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nJitsiConference.prototype.isConnectionInterrupted = function() {\r\n    return this.isP2PActive()\r\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = true;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = true;\r\n    }\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\r\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\r\n    // eventually come up with the new offer (at least for the time being).\r\n    if (session.isP2P) {\r\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\r\n        // and \"bad\" connection\r\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n\r\n        if (this.p2pJingleSession) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(\r\n                    ACTION_P2P_FAILED,\r\n                    {\r\n                        initiator: this.p2pJingleSession.isInitiator\r\n                    }));\r\n\r\n        }\r\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\r\n    } else if (session && this.jvbJingleSession === session) {\r\n        this._delayedIceFailed = new IceFailedHandling(this);\r\n        this._delayedIceFailed.start(session);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = false;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = false;\r\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n    }\r\n\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\r\n    }\r\n};\r\n\r\n/**\r\n * Accept incoming P2P Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance\r\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\r\n * @private\r\n */\r\nJitsiConference.prototype._acceptP2PIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    // Accept the offer\r\n    this.p2pJingleSession = jingleSession;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: Boolean(this._e2eEncryption)\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.acceptOffer(\r\n        jingleOffer,\r\n        () => {\r\n            logger.debug('Got RESULT for P2P \"session-accept\"');\r\n\r\n            this.eventEmitter.emit(\r\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                this.p2pJingleSession);\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to accept incoming P2P Jingle session', error);\r\n        },\r\n        localTracks);\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the JVB session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteJVBTracks = function() {\r\n    this._addRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the P2P session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteP2PTracks = function() {\r\n    this._addRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track added\" events for given Jingle session.\r\n * @param {string} logName the session's nickname which will appear in log\r\n * messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Adding remote ${logName} track: ${track}`);\r\n        this.onRemoteTrackAdded(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\r\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\r\n * the P2P connection if the event comes from the P2P session.\r\n * @param {JingleSessionPC} jingleSession the session instance.\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionEstablished = function(\r\n        jingleSession) {\r\n    if (this.p2pJingleSession !== null) {\r\n        // store the establishment time of the p2p session as a field of the\r\n        // JitsiConference because the p2pJingleSession might get disposed (thus\r\n        // the value is lost).\r\n        this.p2pEstablishmentDuration\r\n            = this.p2pJingleSession.establishmentDuration;\r\n    }\r\n\r\n    if (this.jvbJingleSession !== null) {\r\n        this.jvbEstablishmentDuration\r\n            = this.jvbJingleSession.establishmentDuration;\r\n    }\r\n\r\n    let done = false;\r\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\r\n\r\n    // We don't care about the JVB case, there's nothing to be done\r\n    if (!jingleSession.isP2P) {\r\n        done = true;\r\n    } else if (this.p2pJingleSession !== jingleSession) {\r\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\r\n\r\n        done = true;\r\n    } else if (!jingleSession.isInitiator\r\n        && typeof forceJVB121Ratio === 'number'\r\n        && Math.random() < forceJVB121Ratio) {\r\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\r\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        this._stopP2PSession('decline', 'force JVB121');\r\n\r\n        done = true;\r\n    }\r\n\r\n    if (!isNaN(this.p2pEstablishmentDuration)\r\n        && !isNaN(this.jvbEstablishmentDuration)) {\r\n        const establishmentDurationDiff\r\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\r\n\r\n        Statistics.sendAnalytics(\r\n            ICE_ESTABLISHMENT_DURATION_DIFF,\r\n            { value: establishmentDurationDiff });\r\n    }\r\n\r\n    if (jingleSession.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\r\n    }\r\n\r\n    if (done) {\r\n\r\n        return;\r\n    }\r\n\r\n    // Update P2P status and emit events\r\n    this._setP2PStatus(true);\r\n\r\n    // Remove remote tracks\r\n    if (this.jvbJingleSession) {\r\n        this._removeRemoteJVBTracks();\r\n    } else {\r\n        logger.info('Not removing remote JVB tracks - no session yet');\r\n    }\r\n\r\n    this._addRemoteP2PTracks();\r\n\r\n    // Stop media transfer over the JVB connection\r\n    if (this.jvbJingleSession) {\r\n        this._suspendMediaTransferForJvbConnection();\r\n    }\r\n\r\n    logger.info('Starting remote stats with p2p connection');\r\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\r\n\r\n    Statistics.sendAnalyticsAndLog(\r\n        createP2PEvent(\r\n            ACTION_P2P_ESTABLISHED,\r\n            {\r\n                initiator: this.p2pJingleSession.isInitiator\r\n            }));\r\n\r\n};\r\n\r\n/**\r\n * Called when the chat room reads a new list of properties from jicofo's\r\n * presence. The properties may have changed, but they don't have to.\r\n *\r\n * @param {Object} properties - The properties keyed by the property name\r\n * ('key').\r\n * @private\r\n */\r\nJitsiConference.prototype._updateProperties = function(properties = {}) {\r\n    const changed = !isEqual(properties, this.properties);\r\n\r\n    this.properties = properties;\r\n    if (changed) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\r\n            this.properties);\r\n\r\n        // Some of the properties need to be added to analytics events.\r\n        const analyticsKeys = [\r\n\r\n            // The number of jitsi-videobridge instances currently used for the\r\n            // conference.\r\n            'bridge-count',\r\n\r\n            // The conference creation time (set by jicofo).\r\n            'created-ms',\r\n            'octo-enabled'\r\n        ];\r\n\r\n        analyticsKeys.forEach(key => {\r\n            if (properties[key] !== undefined) {\r\n                Statistics.analytics.addPermanentProperties({\r\n                    [key.replace('-', '_')]: properties[key]\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Gets a conference property with a given key.\r\n *\r\n * @param {string} key - The key.\r\n * @returns {*} The value\r\n */\r\nJitsiConference.prototype.getProperty = function(key) {\r\n    return this.properties[key];\r\n};\r\n\r\n/**\r\n * Clears the deferred start P2P task if it has been scheduled.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\r\n    if (this.deferredStartP2PTask) {\r\n        logger.info('Cleared deferred start P2P task');\r\n        clearTimeout(this.deferredStartP2PTask);\r\n        this.deferredStartP2PTask = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the JVB\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the P2P\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track removed\" events for given Jingle session.\r\n * @param {string} sessionNickname the session's nickname which will appear in\r\n * log messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteTracks = function(\r\n        sessionNickname,\r\n        remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\r\n        this.onRemoteTrackRemoved(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Resumes media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\r\n    logger.info('Resuming media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\r\n        () => {\r\n            logger.info('Resumed media transfer over the JVB connection!');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to resume media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Sets new P2P status and updates some events/states hijacked from\r\n * the <tt>JitsiConference</tt>.\r\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\r\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\r\n * @private\r\n */\r\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\r\n    if (this.p2p === newStatus) {\r\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\r\n\r\n        return;\r\n    }\r\n    this.p2p = newStatus;\r\n    if (newStatus) {\r\n        logger.info('Peer to peer connection established!');\r\n\r\n        // When we end up in a valid P2P session need to reset the properties\r\n        // in case they have persisted, after session with another peer.\r\n        Statistics.analytics.addPermanentProperties({\r\n            p2pFailed: false,\r\n            forceJvb121: false\r\n        });\r\n\r\n        // Sync up video transfer active in case p2pJingleSession not existed\r\n        // when the lastN value was being adjusted.\r\n        const isVideoActive = this.rtc.getLastN() !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    'Failed to sync up P2P video transfer status'\r\n                        + `(${isVideoActive})`, error);\r\n            });\r\n    } else {\r\n        logger.info('Peer to peer connection closed!');\r\n    }\r\n\r\n    // Put the JVB connection on hold/resume\r\n    if (this.jvbJingleSession) {\r\n        this.statistics.sendConnectionResumeOrHoldEvent(\r\n            this.jvbJingleSession.peerconnection, !newStatus);\r\n    }\r\n\r\n    // Clear dtmfManager, so that it can be recreated with new connection\r\n    this.dtmfManager = null;\r\n\r\n    // Update P2P status\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.P2P_STATUS,\r\n        this,\r\n        this.p2p);\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n        this._getActiveMediaSession());\r\n\r\n    // Refresh connection interrupted/restored\r\n    this.eventEmitter.emit(\r\n        this.isConnectionInterrupted()\r\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\r\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\r\n};\r\n\r\n/**\r\n * Starts new P2P session.\r\n * @param {string} remoteJid the JID of the remote participant\r\n * @private\r\n */\r\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\r\n    this._maybeClearDeferredStartP2P();\r\n    if (this.p2pJingleSession) {\r\n        logger.error('P2P session already started!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.isP2PConnectionInterrupted = false;\r\n    this.p2pJingleSession\r\n        = this.xmpp.connection.jingle.newP2PJingleSession(\r\n            this.room.myroomjid,\r\n            remoteJid);\r\n    logger.info(\r\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: Boolean(this._e2eEncryption)\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    // NOTE one may consider to start P2P with the local tracks detached,\r\n    // but no data will be sent until ICE succeeds anyway. And we switch\r\n    // immediately once the P2P ICE connects.\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.invite(localTracks);\r\n};\r\n\r\n/**\r\n * Suspends media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\r\n    logger.info('Suspending media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\r\n        () => {\r\n            logger.info('Suspended media transfer over the JVB connection !');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to suspend media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Method when called will decide whether it's the time to start or stop\r\n * the P2P session.\r\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\r\n * originates from the user left event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\r\n    if (!browser.supportsP2P()\r\n        || !this.isP2PEnabled()\r\n        || this.isP2PTestModeEnabled()) {\r\n        logger.info('Auto P2P disabled');\r\n\r\n        return;\r\n    }\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n\r\n    // FIXME 1 peer and it must *support* P2P switching\r\n    const shouldBeInP2P = this._shouldBeInP2PMode();\r\n\r\n    // Clear deferred \"start P2P\" task\r\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\r\n        this._maybeClearDeferredStartP2P();\r\n    }\r\n\r\n    // Start peer to peer session\r\n    if (!this.p2pJingleSession && shouldBeInP2P) {\r\n        const peer = peerCount && peers[0];\r\n\r\n\r\n        const myId = this.myUserId();\r\n        const peersId = peer.getId();\r\n\r\n        if (myId > peersId) {\r\n            logger.debug(\r\n                'I\\'m the bigger peersId - '\r\n                + 'the other peer should start P2P', myId, peersId);\r\n\r\n            return;\r\n        } else if (myId === peersId) {\r\n            logger.error('The same IDs ? ', myId, peersId);\r\n\r\n            return;\r\n        }\r\n\r\n        const jid = peer.getJid();\r\n\r\n        if (userLeftEvent) {\r\n            if (this.deferredStartP2PTask) {\r\n                logger.error('Deferred start P2P task\\'s been set already!');\r\n\r\n                return;\r\n            }\r\n            logger.info(\r\n                `Will start P2P with: ${jid} after ${\r\n                    this.backToP2PDelay} seconds...`);\r\n            this.deferredStartP2PTask = setTimeout(\r\n                this._startP2PSession.bind(this, jid),\r\n                this.backToP2PDelay * 1000);\r\n        } else {\r\n            logger.info(`Will start P2P with: ${jid}`);\r\n            this._startP2PSession(jid);\r\n        }\r\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\r\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\r\n\r\n        // Log that there will be a switch back to the JVB connection\r\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\r\n        }\r\n        this._stopP2PSession();\r\n    }\r\n};\r\n\r\n/**\r\n * Tells whether or not this conference should be currently in the P2P mode.\r\n *\r\n * @private\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._shouldBeInP2PMode = function() {\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\r\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\r\n\r\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\r\n\r\n    return shouldBeInP2P;\r\n};\r\n\r\n/**\r\n * Stops the current P2P session.\r\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\r\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\r\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\r\n * description that will be included in the session terminate message\r\n * @private\r\n */\r\nJitsiConference.prototype._stopP2PSession = function(\r\n        reason,\r\n        reasonDescription) {\r\n    if (!this.p2pJingleSession) {\r\n        logger.error('No P2P session to be stopped!');\r\n\r\n        return;\r\n    }\r\n\r\n    const wasP2PEstablished = this.isP2PActive();\r\n\r\n    // Swap remote tracks, but only if the P2P has been fully established\r\n    if (wasP2PEstablished) {\r\n        if (this.jvbJingleSession) {\r\n            this._resumeMediaTransferForJvbConnection();\r\n        }\r\n\r\n        // Remove remote P2P tracks\r\n        this._removeRemoteP2PTracks();\r\n    }\r\n\r\n    // Stop P2P stats\r\n    logger.info('Stopping remote stats for P2P connection');\r\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\r\n    logger.info('Stopping CallStats for P2P connection');\r\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\r\n\r\n    this.p2pJingleSession.terminate(\r\n        () => {\r\n            logger.info('P2P session terminate RESULT');\r\n        },\r\n        error => {\r\n            // Because both initiator and responder are simultaneously\r\n            // terminating their JingleSessions in case of the 'to JVB switch'\r\n            // when 3rd participant joins, both will dispose their sessions and\r\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\r\n            // want to log this as an error since it's expected behaviour.\r\n            //\r\n            // We want them both to terminate, because in case of initiator's\r\n            // crash the responder would stay in P2P mode until ICE fails which\r\n            // could take up to 20 seconds.\r\n            //\r\n            // NOTE lack of 'reason' is considered as graceful session terminate\r\n            // where both initiator and responder terminate their sessions\r\n            // simultaneously.\r\n            if (reason) {\r\n                logger.error(\r\n                    'An error occurred while trying to terminate'\r\n                        + ' P2P Jingle session', error);\r\n            }\r\n        }, {\r\n            reason: reason ? reason : 'success',\r\n            reasonDescription: reasonDescription\r\n                ? reasonDescription : 'Turing off P2P session',\r\n            sendSessionTerminate: this.room\r\n                && this.getParticipantById(\r\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\r\n        });\r\n\r\n    this.p2pJingleSession = null;\r\n\r\n    // Update P2P status and other affected events/states\r\n    this._setP2PStatus(false);\r\n\r\n    if (wasP2PEstablished) {\r\n        // Add back remote JVB tracks\r\n        if (this.jvbJingleSession) {\r\n            this._addRemoteJVBTracks();\r\n        } else {\r\n            logger.info('Not adding remote JVB tracks - no session yet');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Checks whether or not the conference is currently in the peer to peer mode.\r\n * Being in peer to peer mode means that the direct connection has been\r\n * established and the P2P connection is being used for media transmission.\r\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\r\n */\r\nJitsiConference.prototype.isP2PActive = function() {\r\n    return this.p2p;\r\n};\r\n\r\n/**\r\n * Returns the current ICE state of the P2P connection.\r\n * NOTE: method is used by the jitsi-meet-torture tests.\r\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\r\n * no P2P connection.\r\n */\r\nJitsiConference.prototype.getP2PConnectionState = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection.getConnectionState();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n\r\n/**\r\n * Manually starts new P2P session (should be used only in the tests).\r\n */\r\nJitsiConference.prototype.startP2PSession = function() {\r\n    const peers = this.getParticipants();\r\n\r\n    // Start peer to peer session\r\n    if (peers.length === 1) {\r\n        const peerJid = peers[0].getJid();\r\n\r\n        this._startP2PSession(peerJid);\r\n    } else {\r\n        throw new Error(\r\n            'There must be exactly 1 participant to start the P2P session !');\r\n    }\r\n};\r\n\r\n/**\r\n * Manually stops the current P2P session (should be used only in the tests)\r\n */\r\nJitsiConference.prototype.stopP2PSession = function() {\r\n    this._stopP2PSession();\r\n};\r\n\r\n/**\r\n * Get a summary of how long current participants have been the dominant speaker\r\n * @returns {object}\r\n */\r\nJitsiConference.prototype.getSpeakerStats = function() {\r\n    return this.speakerStatsCollector.getStats();\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should receive from remote\r\n * participants.\r\n *\r\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\r\n * this receiver is willing to receive.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\r\n    this.qualityController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should send to remote\r\n * participants.\r\n * @param {number} maxFrameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\r\n    return this.qualityController.setPreferredSendMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Creates a video SIP GW session and returns it if service is enabled. Before\r\n * creating a session one need to check whether video SIP GW service is\r\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\r\n * if there are available nodes to serve this request, after creating the\r\n * session those nodes can be taken and the request about using the\r\n * created session can fail.\r\n *\r\n * @param {string} sipAddress - The sip address to be used.\r\n * @param {string} displayName - The display name to be used for this session.\r\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\r\n * initialised and there is no room.\r\n */\r\nJitsiConference.prototype.createVideoSIPGWSession\r\n    = function(sipAddress, displayName) {\r\n        if (!this.room) {\r\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\r\n        }\r\n\r\n        return this.videoSIPGWHandler\r\n            .createVideoSIPGWSession(sipAddress, displayName);\r\n    };\r\n\r\n/**\r\n * Sends a conference.join analytics event.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`\r\n    }));\r\n    this._conferenceJoinAnalyticsEventSent = true;\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is supported. Note that not all participants\r\n * in the conference may support it.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype.isE2EESupported = function() {\r\n    const config = this.options.config;\r\n\r\n    return browser.supportsInsertableStreams() && !(config.testing && config.testing.disableE2EE);\r\n};\r\n\r\n/**\r\n * Initializes the E2E encryption module. Currently any active media session muste be restarted due to\r\n * the limitation that the insertable streams constraint can only be set when a new PeerConnection instance is created.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._initializeE2EEncryption = function() {\r\n    this._e2eEncryption = new E2EEncryption(this, { salt: this.options.name });\r\n\r\n    // Need to re-create the peerconnections in order to apply the insertable streams constraint\r\n    this.p2pJingleSession && this.stopP2PSession();\r\n\r\n    const jvbJingleSession = this.jvbJingleSession;\r\n\r\n    jvbJingleSession && jvbJingleSession.terminate(\r\n        null /* success callback => we don't care */,\r\n        error => {\r\n            logger.warn(`An error occurred while trying to terminate ${jvbJingleSession}`, error);\r\n        }, {\r\n            reason: 'success',\r\n            reasonDescription: 'restart required',\r\n            requestRestart: true,\r\n            sendSessionTerminate: true\r\n        });\r\n\r\n    this._maybeStartOrStopP2P(false);\r\n};\r\n\r\n/**\r\n * Sets the key to be used for End-To-End encryption.\r\n *\r\n * @param {string} key the key to be used.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.setE2EEKey = function(key) {\r\n    if (!this.isE2EESupported()) {\r\n        logger.warn('Cannot set E2EE key: platform is not supported.');\r\n\r\n        return;\r\n    }\r\n\r\n    if (!this._e2eEncryption) {\r\n        this._initializeE2EEncryption();\r\n    }\r\n\r\n    this._e2eEncryption.setKey(key);\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\r\n *\r\n * @returns {boolean} whether lobby is supported in the backend.\r\n */\r\nJitsiConference.prototype.isLobbySupported = function() {\r\n    return Boolean(this.room && this.room.getLobby().isSupported());\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if the room has members only enabled.\r\n *\r\n * @returns {boolean} whether conference room is members only.\r\n */\r\nJitsiConference.prototype.isMembersOnly = function() {\r\n    return Boolean(this.room && this.room.membersOnlyEnabled);\r\n};\r\n\r\n/**\r\n * Enables lobby by moderators\r\n *\r\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\r\n */\r\nJitsiConference.prototype.enableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        return this.room.getLobby().enable();\r\n    }\r\n\r\n    return Promise.reject(\r\n        new Error('The conference not started or user is not moderator'));\r\n};\r\n\r\n/**\r\n * Disabled lobby by moderators\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.disableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.getLobby().disable();\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\r\n *\r\n * @param {string} displayName Display name should be set to show it to moderators.\r\n * @param {string} email Optional email is used to present avatar to the moderator.\r\n * @returns {Promise<never>}\r\n */\r\nJitsiConference.prototype.joinLobby = function(displayName, email) {\r\n    if (this.room) {\r\n        return this.room.getLobby().join(displayName, email);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference not started'));\r\n};\r\n\r\n/**\r\n * Denies an occupant in the lobby room access to the conference.\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().denyAccess(id);\r\n    }\r\n};\r\n\r\n/**\r\n * Approves the request to join the conference to a participant waiting in the lobby.\r\n *\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().approveAccess(id);\r\n    }\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport AuthenticationEvents\r\n    from './service/authentication/AuthenticationEvents';\r\nimport {\r\n    ACTION_JINGLE_SA_TIMEOUT,\r\n    createBridgeDownEvent,\r\n    createConnectionStageReachedEvent,\r\n    createFocusLeftEvent,\r\n    createJingleEvent,\r\n    createRemotelyMutedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Setups all event listeners related to conference\r\n * @param conference {JitsiConference} the conference\r\n */\r\nexport default function JitsiConferenceEventManager(conference) {\r\n    this.conference = conference;\r\n    this.xmppListeners = {};\r\n\r\n    // Listeners related to the conference only\r\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n        track => {\r\n            if (!track.isLocal() || !conference.statistics) {\r\n                return;\r\n            }\r\n            const session\r\n                = track.isP2P\r\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\r\n\r\n            // TPC will be null, before the conference starts, but the event\r\n            // still should be queued\r\n            const tpc = (session && session.peerconnection) || null;\r\n\r\n            conference.statistics.sendMuteEvent(\r\n                tpc,\r\n                track.isMuted(),\r\n                track.getType());\r\n        });\r\n}\r\n\r\n/**\r\n * Setups event listeners related to conference.chatRoom\r\n */\r\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\r\n    const conference = this.conference;\r\n    const chatRoom = conference.room;\r\n\r\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\r\n        this.conference.eventEmitter);\r\n\r\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\r\n        if (!jingleSession.isP2P) {\r\n            // If using DataChannel as bridge channel, it must be closed\r\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\r\n            // event for the channel established with the new bridge.\r\n            // TODO: This may be bypassed when using a WebSocket as bridge\r\n            // channel.\r\n            conference.rtc.closeBridgeChannel();\r\n        }\r\n\r\n        // else: there are no DataChannels in P2P session (at least for now)\r\n    });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.ICE_RESTART_SUCCESS,\r\n        (jingleSession, offerIq) => {\r\n            // The JVB data chanel needs to be reopened in case the conference\r\n            // has been moved to a new bridge.\r\n            !jingleSession.isP2P\r\n                && conference._setBridgeChannel(\r\n                    offerIq, jingleSession.peerconnection);\r\n        });\r\n\r\n\r\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\r\n        actor => {\r\n            // TODO: Add a way to differentiate between commands which caused\r\n            // us to mute and those that did not change our state (i.e. we were\r\n            // already muted).\r\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\r\n\r\n            conference.mutedByFocusActor = actor;\r\n\r\n            // set isMutedByFocus when setAudioMute Promise ends\r\n            conference.rtc.setAudioMute(true).then(\r\n                () => {\r\n                    conference.isMutedByFocus = true;\r\n                    conference.mutedByFocusActor = null;\r\n                })\r\n                .catch(\r\n                    error => {\r\n                        conference.mutedByFocusActor = null;\r\n                        logger.warn(\r\n                            'Error while audio muting due to focus request', error);\r\n                    });\r\n        }\r\n    );\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\r\n        JitsiConferenceEvents.SUBJECT_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\r\n        JitsiConferenceEvents.CONFERENCE_JOINED);\r\n\r\n    // send some analytics events\r\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\r\n        () => {\r\n            this.conference.isJvbConnectionInterrupted = false;\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `conference_${key}`,\r\n                        { value: chatRoom.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `xmpp_${key}`,\r\n                        { value: chatRoom.xmpp.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\r\n        if (!session.isP2P) {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n        }\r\n    });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\r\n    chatRoom.addListener(\r\n        XMPPEvents.BRIDGE_DOWN,\r\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.RESERVATION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\r\n\r\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n        jingleSession => {\r\n            conference._onIceConnectionFailed(jingleSession);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\r\n        JitsiConferenceEvents.CONFERENCE_ERROR,\r\n        JitsiConferenceErrors.CHAT_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\r\n\r\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\r\n        () => {\r\n            Statistics.sendAnalytics(createFocusLeftEvent());\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.FOCUS_LEFT);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\r\n        jingleSession => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createJingleEvent(\r\n                    ACTION_JINGLE_SA_TIMEOUT,\r\n                    { p2p: jingleSession.isP2P }));\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\r\n        (session, jid) => {\r\n\r\n            if (jid) {\r\n                const participant = conference.getParticipantById(\r\n                    Strophe.getResourceFromJid(jid));\r\n\r\n                if (session.getStatus() === 'off') {\r\n                    session.setTerminator(participant);\r\n                } else if (session.getStatus() === 'on') {\r\n                    session.setInitiator(participant);\r\n                }\r\n            }\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                session);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(\r\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\r\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\r\n\r\n    chatRoom.setParticipantPropertyListener((node, from) => {\r\n        const participant = conference.getParticipantById(from);\r\n\r\n        if (!participant) {\r\n            return;\r\n        }\r\n\r\n        participant.setProperty(\r\n            node.tagName.substring('jitsi_participant_'.length),\r\n            node.value);\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.KICKED,\r\n        conference.onMemberKicked.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\r\n        conference.onSuspendDetected.bind(conference));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\r\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\r\n        conference.onMemberJoined.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\r\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n        conference._onMemberBotTypeChanged.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\r\n        conference.onMemberLeft.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\r\n        JitsiConferenceEvents.CONFERENCE_LEFT);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\r\n\r\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\r\n        conference.onDisplayNameChanged.bind(conference));\r\n\r\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\r\n        conference.onLocalRoleChanged(role);\r\n\r\n        // log all events for the recorder operated by the moderator\r\n        if (conference.statistics && conference.isModerator()) {\r\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                recorderSession => {\r\n                    const logObject = {\r\n                        error: recorderSession.getError(),\r\n                        id: 'recorder_status',\r\n                        status: recorderSession.getStatus()\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n                });\r\n        }\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\r\n        conference.onUserRoleChanged.bind(conference));\r\n\r\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\r\n        (authEnabled, authIdentity) => {\r\n            conference.authEnabled = authEnabled;\r\n            conference.authIdentity = authIdentity;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\r\n                authIdentity);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\r\n                id, txt, ts, displayName);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                id, txt, ts);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\r\n        (jid, status) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (!participant || participant._status === status) {\r\n                return;\r\n            }\r\n            participant._status = status;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const id = Strophe.getResourceFromJid(from);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\r\n                    + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\r\n        let isModerator = false;\r\n\r\n        if (conference.myUserId() === from && conference.isModerator()) {\r\n            isModerator = true;\r\n        } else {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant && participant.isModerator()) {\r\n                isModerator = true;\r\n            }\r\n        }\r\n\r\n        if (!isModerator) {\r\n            return;\r\n        }\r\n\r\n        const startAudioMuted = data.attributes.audio === 'true';\r\n        const startVideoMuted = data.attributes.video === 'true';\r\n\r\n        let updated = false;\r\n\r\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\r\n            conference.startMutedPolicy.audio = startAudioMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\r\n            conference.startMutedPolicy.video = startVideoMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (updated) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\r\n                conference.startMutedPolicy\r\n            );\r\n        }\r\n    });\r\n\r\n    if (conference.statistics) {\r\n        // FIXME ICE related events should end up in RTCEvents eventually\r\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n            session => {\r\n                conference.statistics.sendIceConnectionFailedEvent(\r\n                    session.peerconnection);\r\n            });\r\n\r\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\r\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\r\n            (e, pc) => {\r\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.rtc\r\n */\r\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\r\n    const conference = this.conference;\r\n    const rtc = conference.rtc;\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_ADDED,\r\n        conference.onRemoteTrackAdded.bind(conference));\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_REMOVED,\r\n        conference.onRemoteTrackRemoved.bind(conference));\r\n\r\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n        id => {\r\n            if (conference.lastDominantSpeaker !== id && conference.room) {\r\n                conference.lastDominantSpeaker = id;\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\r\n\r\n                if (conference.statistics && conference.myUserId() === id) {\r\n                    // We are the new dominant speaker.\r\n                    conference.statistics.sendDominantSpeakerEvent(\r\n                        conference.room.roomjid);\r\n                }\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n        const now = window.performance.now();\r\n        const key = 'data.channel.opened';\r\n\r\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n        logger.log(`(TIME) ${key}:\\t`, now);\r\n        conference.room.connectionTimes[key] = now;\r\n        Statistics.sendAnalytics(\r\n            createConnectionStageReachedEvent(key, { value: now }));\r\n\r\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\r\n    });\r\n\r\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\r\n                        + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'local_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'remote_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateOfferFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n        (track, ssrc) => {\r\n            // when starting screen sharing, the track is created and when\r\n            // we do set local description and we process the ssrc we\r\n            // will be notified for it and we will report it with the event\r\n            // for screen sharing\r\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Removes event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    conference.xmpp.caps.removeListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\r\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\r\n\r\n    Object.keys(this.xmppListeners).forEach(eventName => {\r\n        conference.xmpp.removeListener(\r\n            eventName,\r\n            this.xmppListeners[eventName]);\r\n    });\r\n    this.xmppListeners = {};\r\n};\r\n\r\n\r\n/**\r\n * Setups event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    const featuresChangedListener = from => {\r\n        const participant\r\n            = conference.getParticipantById(\r\n            Strophe.getResourceFromJid(from));\r\n\r\n        if (participant) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                participant);\r\n        }\r\n    };\r\n\r\n    conference.xmpp.caps.addListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        featuresChangedListener);\r\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\r\n        = featuresChangedListener;\r\n\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_INCOMING,\r\n        conference.onIncomingCall.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ACCEPTED,\r\n        conference.onCallAccepted.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.TRANSPORT_INFO,\r\n        conference.onTransportInfo.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ENDED,\r\n        conference.onCallEnded.bind(conference));\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\r\n        (audioMuted, videoMuted) => {\r\n            if (conference.options.config.ignoreStartMuted) {\r\n                return;\r\n            }\r\n\r\n            conference.startAudioMuted = audioMuted;\r\n            conference.startVideoMuted = videoMuted;\r\n\r\n            // mute existing local tracks because this is initial mute from\r\n            // Jicofo\r\n            conference.getLocalTracks().forEach(track => {\r\n                switch (track.getType()) {\r\n                case MediaType.AUDIO:\r\n                    conference.startAudioMuted && track.mute();\r\n                    break;\r\n                case MediaType.VIDEO:\r\n                    conference.startVideoMuted && track.mute();\r\n                    break;\r\n                }\r\n            });\r\n\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\r\n        });\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\r\n        createdTimestamp => {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\r\n        });\r\n};\r\n\r\n/**\r\n * Add XMPP listener and save its reference for remove on leave conference.\r\n */\r\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\r\n        eventName, listener) {\r\n    this.xmppListeners[eventName] = listener;\r\n    this.conference.xmpp.addListener(eventName, listener);\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.statistics\r\n */\r\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    if (!conference.statistics) {\r\n        return;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\r\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\r\n    });\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    // Forward the \"before stats disposed\" event\r\n    conference.statistics.addBeforeDisposedListener(() => {\r\n        conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\r\n    });\r\n\r\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\r\n    if (!conference.options.config.startSilent) {\r\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\r\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\r\n                const ssrc = tpc.getLocalSSRC(track);\r\n\r\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\r\n                    return;\r\n                }\r\n\r\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\r\n            });\r\n        });\r\n    }\r\n};\r\n","import { BrowserDetection } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// TODO: Move this code to js-utils.\r\n\r\n// NOTE: Now we are extending BrowserDetection in order to preserve\r\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\r\n// and BrowserDetection as separate objects in future.\r\n\r\n/**\r\n * Implements browser capabilities for lib-jitsi-meet.\r\n */\r\nexport default class BrowserCapabilities extends BrowserDetection {\r\n    /**\r\n     * Creates new BrowserCapabilities instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        logger.info(\r\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\r\n    }\r\n\r\n    /**\r\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\r\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\r\n     * off the camera device).\r\n     * @return {boolean} <tt>true</tt> if the current browser supports this\r\n     * strategy or <tt>false</tt> otherwise.\r\n     */\r\n    doesVideoMuteByStreamRemove() {\r\n        return this.isChromiumBased() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the current browser support peer to peer connections\r\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\r\n     * otherwise.\r\n     */\r\n    supportsP2P() {\r\n        return !this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is Chromium based, that is, it's either\r\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\r\n     * Chrome.\r\n     *\r\n     * This includes the following browsers:\r\n     * - Chrome and Chromium\r\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\r\n     *   such as Brave and Vivaldi\r\n     * - Browsers which are NOT Chrome but use it as their engine, and have\r\n     *   custom detection code: Opera, Electron and NW.JS\r\n     */\r\n    isChromiumBased() {\r\n        return this.isChrome()\r\n            || this.isElectron()\r\n            || this.isNWJS()\r\n            || this.isOpera();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is supported.\r\n     *\r\n     * @returns {boolean} true if the browser is supported, false otherwise.\r\n     */\r\n    isSupported() {\r\n        return this.isChromiumBased()\r\n            || this.isFirefox()\r\n            || this.isReactNative()\r\n            || (this.isSafari() && !this.isVersionLessThan('12.1'));\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current environment needs a user interaction\r\n     * with the page before any unmute can occur.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isUserInteractionRequiredForUnmute() {\r\n        return this.isFirefox() && this.isVersionLessThan('68');\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\r\n     * user's connection is interrupted and the video stops playback.\r\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\r\n     * otherwise.\r\n     */\r\n    supportsVideoMuteOnConnInterrupted() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports upload and download bandwidth\r\n     * statistics.\r\n     * @return {boolean}\r\n     */\r\n    supportsBandwidthStatistics() {\r\n        // FIXME bandwidth stats are currently not implemented for FF on our\r\n        // side, but not sure if not possible ?\r\n        return !this.isFirefox() && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser support the device change event.\r\n     * @return {boolean}\r\n     */\r\n    supportsDeviceChangeEvent() {\r\n        return navigator.mediaDevices\r\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\r\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports RTT statistics for srflx local\r\n     * candidates through the legacy getStats() API.\r\n     */\r\n    supportsLocalCandidateRttStatistics() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports audio level stats on the receivers.\r\n     */\r\n    supportsReceiverStats() {\r\n        return typeof window.RTCRtpReceiver !== 'undefined'\r\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports round trip time statistics for\r\n     * the ICE candidate pair.\r\n     * @return {boolean}\r\n     */\r\n    supportsRTTStatistics() {\r\n        // Firefox does not seem to report RTT for ICE candidate pair:\r\n        // eslint-disable-next-line max-len\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\r\n        // It does report mozRTT for RTP streams, but at the time of this\r\n        // writing it's value does not make sense most of the time\r\n        // (is reported as 1):\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\r\n        // For Chrome and others we rely on 'googRtt'.\r\n        return !this.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses plan B.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesPlanB() {\r\n        return !this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses SDP munging for turning on simulcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesSdpMungingForSimulcast() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses unified plan.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesUnifiedPlan() {\r\n        if (this.isFirefox()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isSafari() && typeof window.RTCRtpTransceiver !== 'undefined') {\r\n            // eslint-disable-next-line max-len\r\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\r\n            // eslint-disable-next-line no-undef\r\n            return Object.keys(RTCRtpTransceiver.prototype)\r\n                   .indexOf('currentDirection') > -1;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser should be using the new\r\n     * getUserMedia flow, which utilizes the adapter shim. This method should\r\n     * be temporary and used while migrating all browsers to use adapter and\r\n     * the new getUserMedia.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesNewGumFlow() {\r\n        const REQUIRED_CHROME_VERSION = 61;\r\n\r\n        if (this.isChrome()) {\r\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\r\n        }\r\n\r\n        if (this.isFirefox() || this.isSafari()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isChromiumBased()) {\r\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\r\n     * getUserMedia flow and Edge.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesAdapter() {\r\n        return this.usesNewGumFlow();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\r\n     * to the bridge instead of the ssrcs.\r\n     */\r\n    usesRidsForSimulcast() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports getDisplayMedia.\r\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\r\n     */\r\n    supportsGetDisplayMedia() {\r\n        return typeof navigator.getDisplayMedia !== 'undefined'\r\n            || (typeof navigator.mediaDevices !== 'undefined'\r\n                && typeof navigator.mediaDevices.getDisplayMedia\r\n                    !== 'undefined');\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports insertable streams, needed for E2EE.\r\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\r\n     */\r\n    supportsInsertableStreams() {\r\n        return Boolean(typeof window.RTCRtpSender !== 'undefined'\r\n            && (window.RTCRtpSender.prototype.createEncodedStreams\r\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams));\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\r\n     * https://webrtc.org/web-apis/chrome/unified-plan/\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsSdpSemantics() {\r\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\r\n    }\r\n\r\n    /**\r\n     * Returns the version of a Chromium based browser.\r\n     *\r\n     * @returns {Number}\r\n     */\r\n    _getChromiumBasedVersion() {\r\n        if (this.isChromiumBased()) {\r\n            // NW.JS doesn't expose the Chrome version in the UA string.\r\n            if (this.isNWJS()) {\r\n                // eslint-disable-next-line no-undef\r\n                return Number.parseInt(process.versions.chromium, 10);\r\n            }\r\n\r\n            // Here we process all browsers which use the Chrome engine but\r\n            // don't necessarily identify as Chrome. We cannot use the version\r\n            // comparing functions because the Electron, Opera and NW.JS\r\n            // versions are inconsequential here, as we need to know the actual\r\n            // Chrome engine version.\r\n            const ua = navigator.userAgent;\r\n\r\n            if (ua.match(/Chrome/)) {\r\n                const version\r\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\r\n\r\n                return version;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    TYPE_OPERATIONAL,\r\n    TYPE_PAGE,\r\n    TYPE_TRACK,\r\n    TYPE_UI\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nconst MAX_CACHE_SIZE = 100;\r\n\r\n// eslist-disable-line no-undef\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class provides an API to lib-jitsi-meet and its users for sending\r\n * analytics events. It serves as a bridge to different backend implementations\r\n * (\"analytics handlers\") and a cache for events attempted to be sent before\r\n * the analytics handlers were enabled.\r\n *\r\n * The API is designed to be an easy replacement for the previous version of\r\n * this adapter, and is meant to be extended with more convenience methods.\r\n *\r\n *\r\n * The API calls are translated to objects with the following structure, which\r\n * are then passed to the sendEvent(event) function of the underlying handlers:\r\n *\r\n * {\r\n *    type,\r\n *\r\n *    action,\r\n *    actionSubject,\r\n *    actionSubjectId,\r\n *    attributes,\r\n *    categories,\r\n *    containerId,\r\n *    containerType,\r\n *    name,\r\n *    objectId,\r\n *    objectType,\r\n *    source,\r\n *    tags\r\n * }\r\n *\r\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\r\n * other properties are considered required according to the type.\r\n *\r\n * For events with type 'page', the required properties are: name.\r\n *\r\n * For events with type 'operational' and 'ui', the required properties are:\r\n * action, actionSubject, source\r\n *\r\n * For events with type 'page', the required properties are:\r\n * action, actionSubject, source, containerType, containerId, objectType,\r\n * objectId\r\n */\r\nclass AnalyticsAdapter {\r\n    /**\r\n     * Creates new AnalyticsAdapter instance.\r\n     */\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Reset the state to the initial one.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        /**\r\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\r\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\r\n         * any more events, and it can not be re-enabled.\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The set of handlers to which events will be sent.\r\n         * @type {Set<any>}\r\n         */\r\n        this.analyticsHandlers = new Set();\r\n\r\n        /**\r\n         * The cache of events which are not sent yet. The cache is enabled\r\n         * while this field is truthy, and disabled otherwise.\r\n         * @type {Array}\r\n         */\r\n        this.cache = [];\r\n\r\n        /**\r\n         * Map of properties that will be added to every event. Note that the\r\n         * keys will be prefixed with \"permanent.\".\r\n         */\r\n        this.permanentProperties = {};\r\n\r\n        /**\r\n         * The name of the conference that this AnalyticsAdapter is associated\r\n         * with.\r\n         * @type {null}\r\n         */\r\n        this.conferenceName = '';\r\n\r\n        this.addPermanentProperties({\r\n            'user_agent': navigator.userAgent,\r\n            'browser_name': browser.getName()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose analytics. Clears all handlers.\r\n     */\r\n    dispose() {\r\n        logger.warn('Disposing of analytics adapter.');\r\n\r\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                if (typeof handler.dispose === 'function') {\r\n                    handler.dispose();\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setAnalyticsHandlers([]);\r\n        this.disposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the handlers that are going to be used to send analytics. Sends any\r\n     * cached events.\r\n     * @param {Array} handlers the handlers\r\n     */\r\n    setAnalyticsHandlers(handlers) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        this.analyticsHandlers = new Set(handlers);\r\n\r\n        this._setUserProperties();\r\n\r\n        // Note that we disable the cache even if the set of handlers is empty.\r\n        const cache = this.cache;\r\n\r\n        this.cache = null;\r\n        if (cache) {\r\n            cache.forEach(event => this._sendEvent(event));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the user properties to the analytics handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _setUserProperties() {\r\n        this.analyticsHandlers.forEach(handler => {\r\n            try {\r\n                handler.setUserProperties(this.permanentProperties);\r\n            } catch (error) {\r\n                logger.warn('Error in setUserProperties method of one of the '\r\n                    + `analytics handlers: ${error}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\r\n     * Permanent properties will be added as \"attributes\" to events sent to\r\n     * the underlying \"analytics handlers\", and their keys will be prefixed\r\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\r\n     * result in {\"permanent_key\": \"value\"} object to be added to the\r\n     * \"attributes\" field of events.\r\n     *\r\n     * @param {Object} properties the properties to add\r\n     */\r\n    addPermanentProperties(properties) {\r\n        this.permanentProperties = {\r\n            ...this.permanentProperties,\r\n            ...properties\r\n        };\r\n\r\n        this._setUserProperties();\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the conference that this AnalyticsAdapter is associated\r\n     * with.\r\n     * @param name the name to set.\r\n     */\r\n    setConferenceName(name) {\r\n        this.conferenceName = name;\r\n        this.addPermanentProperties({ 'conference_name': name });\r\n    }\r\n\r\n    /**\r\n     * Sends an event with a given name and given properties. The first\r\n     * parameter is either a string or an object. If it is a string, it is used\r\n     * as the event name and the second parameter is used at the attributes to\r\n     * attach to the event. If it is an object, it represents the whole event,\r\n     * including any desired attributes, and the second parameter is ignored.\r\n     *\r\n     * @param {String|Object} eventName either a string to be used as the name\r\n     * of the event, or an event object. If an event object is passed, the\r\n     * properties parameters is ignored.\r\n     * @param {Object} properties the properties/attributes to attach to the\r\n     * event, if eventName is a string.\r\n     */\r\n    sendEvent(eventName, properties = {}) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        let event = null;\r\n\r\n        if (typeof eventName === 'string') {\r\n            event = {\r\n                type: TYPE_OPERATIONAL,\r\n                action: eventName,\r\n                actionSubject: eventName,\r\n                source: eventName,\r\n                attributes: properties\r\n            };\r\n        } else if (typeof eventName === 'object') {\r\n            event = eventName;\r\n        }\r\n\r\n        if (!this._verifyRequiredFields(event)) {\r\n            logger.error(\r\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Checks whether an event has all of the required fields set, and tries\r\n     * to fill in some of the missing fields with reasonable default values.\r\n     * Returns true if after this operation the event has all of the required\r\n     * fields set, and false otherwise (if some of the required fields were not\r\n     * set and the attempt to fill them in with a default failed).\r\n     *\r\n     * @param event the event object.\r\n     * @return {boolean} true if the event (after the call to this function)\r\n     * contains all of the required fields, and false otherwise.\r\n     * @private\r\n     */\r\n    _verifyRequiredFields(event) {\r\n        if (!event) {\r\n            return false;\r\n        }\r\n\r\n        if (!event.type) {\r\n            event.type = TYPE_OPERATIONAL;\r\n        }\r\n\r\n        const type = event.type;\r\n\r\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\r\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\r\n            logger.error(`Unknown event type: ${type}`);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (type === TYPE_PAGE) {\r\n            return Boolean(event.name);\r\n        }\r\n\r\n        // Try to set some reasonable default values in case some of the\r\n        // parameters required by the handler API are missing.\r\n        event.action = event.action || event.name || event.actionSubject;\r\n        event.actionSubject = event.actionSubject || event.name || event.action;\r\n        event.source = event.source || event.name || event.action\r\n            || event.actionSubject;\r\n\r\n        if (!event.action || !event.actionSubject || !event.source) {\r\n            logger.error(\r\n                'Required field missing (action, actionSubject or source)');\r\n\r\n            return false;\r\n        }\r\n\r\n        // Track events have additional required fields.\r\n        if (type === TYPE_TRACK) {\r\n            event.objectType = event.objectType || 'generic-object-type';\r\n            event.containerType = event.containerType || 'conference';\r\n            if (event.containerType === 'conference' && !event.containerId) {\r\n                event.containerId = this.conferenceName;\r\n            }\r\n\r\n\r\n            if (!event.objectType || !event.objectId\r\n                || !event.containerType || !event.containerId) {\r\n                logger.error(\r\n                    'Required field missing (containerId, containerType, '\r\n                        + 'objectId or objectType)');\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Saves an event to the cache, if the cache is enabled.\r\n     * @param event the event to save.\r\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\r\n     * if the cache was disabled).\r\n     * @private\r\n     */\r\n    _maybeCacheEvent(event) {\r\n        if (this.cache) {\r\n            this.cache.push(event);\r\n\r\n            // We limit the size of the cache, in case the user fails to ever\r\n            // set the analytics handlers.\r\n            if (this.cache.length > MAX_CACHE_SIZE) {\r\n                this.cache.splice(0, 1);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    _sendEvent(event) {\r\n        if (this._maybeCacheEvent(event)) {\r\n            // The event was consumed by the cache.\r\n        } else {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                try {\r\n                    handler.sendEvent(event);\r\n                } catch (e) {\r\n                    logger.warn(`Error sending analytics event: ${e}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AnalyticsAdapter();\r\n","import { browsers } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\n\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\r\n * reported by RTCPeerConnection#getStats mapped by browser.\r\n */\r\nconst KEYS_BY_BROWSER_TYPE = {};\r\n\r\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsLost': 'packetsLost',\r\n    'packetsSent': 'packetsSent',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'framerateMean': 'framerateMean',\r\n    'ip': 'address',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\r\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\r\n    'sendBandwidth': 'googAvailableSendBandwidth',\r\n    'remoteAddress': 'googRemoteAddress',\r\n    'transportType': 'googTransportType',\r\n    'localAddress': 'googLocalAddress',\r\n    'activeConnection': 'googActiveConnection',\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsSent': 'packetsSent',\r\n    'packetsLost': 'packetsLost',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'googCodecName': 'googCodecName',\r\n    'googFrameHeightReceived': 'googFrameHeightReceived',\r\n    'googFrameWidthReceived': 'googFrameWidthReceived',\r\n    'googFrameHeightSent': 'googFrameHeightSent',\r\n    'googFrameWidthSent': 'googFrameWidthSent',\r\n    'googFrameRateReceived': 'googFrameRateReceived',\r\n    'googFrameRateSent': 'googFrameRateSent',\r\n    'audioInputLevel': 'audioInputLevel',\r\n    'audioOutputLevel': 'audioOutputLevel',\r\n    'currentRoundTripTime': 'googRtt',\r\n    'remoteCandidateType': 'googRemoteCandidateType',\r\n    'localCandidateType': 'googLocalCandidateType',\r\n    'ip': 'ip',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\n\r\n/**\r\n * Calculates packet lost percent using the number of lost packets and the\r\n * number of all packet.\r\n * @param lostPackets the number of lost packets\r\n * @param totalPackets the number of all packets.\r\n * @returns {number} packet loss percent\r\n */\r\nfunction calculatePacketLoss(lostPackets, totalPackets) {\r\n    if (!totalPackets || totalPackets <= 0\r\n            || !lostPackets || lostPackets <= 0) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.round((lostPackets / totalPackets) * 100);\r\n}\r\n\r\n/**\r\n * Holds \"statistics\" for a single SSRC.\r\n * @constructor\r\n */\r\nfunction SsrcStats() {\r\n    this.loss = {};\r\n    this.bitrate = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    this.resolution = {};\r\n    this.framerate = 0;\r\n    this.codec = '';\r\n}\r\n\r\n/**\r\n * Sets the \"loss\" object.\r\n * @param loss the value to set.\r\n */\r\nSsrcStats.prototype.setLoss = function(loss) {\r\n    this.loss = loss || {};\r\n};\r\n\r\n/**\r\n * Sets resolution that belong to the ssrc represented by this instance.\r\n * @param resolution new resolution value to be set.\r\n */\r\nSsrcStats.prototype.setResolution = function(resolution) {\r\n    this.resolution = resolution || {};\r\n};\r\n\r\n/**\r\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\r\n * the respective fields of the \"bitrate\" field of this object.\r\n * @param bitrate an object holding the values to add.\r\n */\r\nSsrcStats.prototype.addBitrate = function(bitrate) {\r\n    this.bitrate.download += bitrate.download;\r\n    this.bitrate.upload += bitrate.upload;\r\n};\r\n\r\n/**\r\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\r\n * represented by this instance.\r\n */\r\nSsrcStats.prototype.resetBitrate = function() {\r\n    this.bitrate.download = 0;\r\n    this.bitrate.upload = 0;\r\n};\r\n\r\n/**\r\n * Sets the \"framerate\".\r\n * @param framerate the value to set.\r\n */\r\nSsrcStats.prototype.setFramerate = function(framerate) {\r\n    this.framerate = framerate || 0;\r\n};\r\n\r\nSsrcStats.prototype.setCodec = function(codec) {\r\n    this.codec = codec || '';\r\n};\r\n\r\n/**\r\n *\r\n */\r\nfunction ConferenceStats() {\r\n\r\n    /**\r\n     * The bandwidth\r\n     * @type {{}}\r\n     */\r\n    this.bandwidth = {};\r\n\r\n    /**\r\n     * The bit rate\r\n     * @type {{}}\r\n     */\r\n    this.bitrate = {};\r\n\r\n    /**\r\n     * The packet loss rate\r\n     * @type {{}}\r\n     */\r\n    this.packetLoss = null;\r\n\r\n    /**\r\n     * Array with the transport information.\r\n     * @type {Array}\r\n     */\r\n    this.transport = [];\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * <tt>StatsCollector</tt> registers for stats updates of given\r\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\r\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\r\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\r\n * instance as an event source.\r\n *\r\n * @param peerconnection WebRTC PeerConnection object.\r\n * @param audioLevelsInterval\r\n * @param statsInterval stats refresh interval given in ms.\r\n * @param eventEmitter\r\n * @constructor\r\n */\r\nexport default function StatsCollector(\r\n        peerconnection,\r\n        audioLevelsInterval,\r\n        statsInterval,\r\n        eventEmitter) {\r\n    // StatsCollector depends entirely on the format of the reports returned by\r\n    // RTCPeerConnection#getStats. Given that the value of\r\n    // browser#getName() is very unlikely to change at runtime, it\r\n    // makes sense to discover whether StatsCollector supports the executing\r\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\r\n    // needlessly check a \"static\" condition multiple times very very often and\r\n    // (2) the lack of support for the executing browser would be discovered and\r\n    // reported multiple times very very often too late in the execution in some\r\n    // totally unrelated callback.\r\n    /**\r\n     * The browser type supported by this StatsCollector. In other words, the\r\n     * type of the browser which initialized this StatsCollector\r\n     * instance.\r\n     * @private\r\n     */\r\n    this._browserType = browser.getName();\r\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\r\n\r\n    if (!keys) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The browser type '${this._browserType}' isn't supported!`;\r\n    }\r\n\r\n    /**\r\n     * Whether to use the Promise-based getStats API or not.\r\n     * @type {boolean}\r\n     */\r\n    this._usesPromiseGetStats\r\n        = browser.isSafari() || browser.isFirefox();\r\n\r\n    /**\r\n     * The function which is to be used to retrieve the value associated in a\r\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\r\n     * browser-agnostic name/key.\r\n     *\r\n     * @function\r\n     * @private\r\n     */\r\n    this._getStatValue\r\n        = this._usesPromiseGetStats\r\n            ? this._defineNewGetStatValueMethod(keys)\r\n            : this._defineGetStatValueMethod(keys);\r\n\r\n    this.peerconnection = peerconnection;\r\n    this.baselineAudioLevelsReport = null;\r\n    this.currentAudioLevelsReport = null;\r\n    this.currentStatsReport = null;\r\n    this.previousStatsReport = null;\r\n    this.audioLevelReportHistory = {};\r\n    this.audioLevelsIntervalId = null;\r\n    this.eventEmitter = eventEmitter;\r\n    this.conferenceStats = new ConferenceStats();\r\n\r\n    // Updates stats interval\r\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\r\n\r\n    this.statsIntervalId = null;\r\n    this.statsIntervalMilis = statsInterval;\r\n\r\n    /**\r\n     * Maps SSRC numbers to {@link SsrcStats}.\r\n     * @type {Map<number,SsrcStats}\r\n     */\r\n    this.ssrc2stats = new Map();\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Stops stats updates.\r\n */\r\nStatsCollector.prototype.stop = function() {\r\n    if (this.audioLevelsIntervalId) {\r\n        clearInterval(this.audioLevelsIntervalId);\r\n        this.audioLevelsIntervalId = null;\r\n    }\r\n\r\n    if (this.statsIntervalId) {\r\n        clearInterval(this.statsIntervalId);\r\n        this.statsIntervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Callback passed to <tt>getStats</tt> method.\r\n * @param error an error that occurred on <tt>getStats</tt> call.\r\n */\r\nStatsCollector.prototype.errorCallback = function(error) {\r\n    GlobalOnErrorHandler.callErrorHandler(error);\r\n    logger.error('Get stats error', error);\r\n    this.stop();\r\n};\r\n\r\n/**\r\n * Starts stats updates.\r\n */\r\nStatsCollector.prototype.start = function(startAudioLevelStats) {\r\n    if (startAudioLevelStats) {\r\n        if (browser.supportsReceiverStats()) {\r\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\r\n        }\r\n        this.audioLevelsIntervalId = setInterval(\r\n            () => {\r\n                if (browser.supportsReceiverStats()) {\r\n                    const audioLevels = this.peerconnection.getAudioLevels();\r\n\r\n                    for (const ssrc in audioLevels) {\r\n                        if (audioLevels.hasOwnProperty(ssrc)) {\r\n                            this.eventEmitter.emit(\r\n                                StatisticsEvents.AUDIO_LEVEL,\r\n                                this.peerconnection,\r\n                                Number.parseInt(ssrc, 10),\r\n                                audioLevels[ssrc],\r\n                                false /* isLocal */);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Interval updates\r\n                    this.peerconnection.getStats(\r\n                        report => {\r\n                            let results = null;\r\n\r\n                            if (!report || !report.result\r\n                                || typeof report.result !== 'function') {\r\n                                results = report;\r\n                            } else {\r\n                                results = report.result();\r\n                            }\r\n                            this.currentAudioLevelsReport = results;\r\n                            if (this._usesPromiseGetStats) {\r\n                                this.processNewAudioLevelReport();\r\n                            } else {\r\n                                this.processAudioLevelReport();\r\n                            }\r\n\r\n                            this.baselineAudioLevelsReport\r\n                                = this.currentAudioLevelsReport;\r\n                        },\r\n                        error => this.errorCallback(error)\r\n                    );\r\n                }\r\n            },\r\n            this.audioLevelsIntervalMilis\r\n        );\r\n    }\r\n\r\n    this.statsIntervalId = setInterval(\r\n        () => {\r\n            // Interval updates\r\n            this.peerconnection.getStats(\r\n                report => {\r\n                    let results = null;\r\n\r\n                    if (!report || !report.result\r\n                        || typeof report.result !== 'function') {\r\n                        // firefox\r\n                        results = report;\r\n                    } else {\r\n                        // chrome\r\n                        results = report.result();\r\n                    }\r\n\r\n                    this.currentStatsReport = results;\r\n                    try {\r\n                        if (this._usesPromiseGetStats) {\r\n                            this.processNewStatsReport();\r\n                        } else {\r\n                            this.processStatsReport();\r\n                        }\r\n                    } catch (e) {\r\n                        GlobalOnErrorHandler.callErrorHandler(e);\r\n                        logger.error(`Unsupported key:${e}`, e);\r\n                    }\r\n\r\n                    this.previousStatsReport = this.currentStatsReport;\r\n                },\r\n                error => this.errorCallback(error)\r\n            );\r\n        },\r\n        this.statsIntervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Define the function which retrieves the value from a specific report\r\n    // returned by RTCPeerConnection#getStats associated with a given\r\n    // browser-specific key.\r\n    let itemStatByKey;\r\n\r\n    switch (this._browserType) {\r\n    case browsers.CHROME:\r\n    case browsers.OPERA:\r\n    case browsers.NWJS:\r\n    case browsers.ELECTRON:\r\n        // TODO What about other types of browser which are based on Chrome such\r\n        // as NW.js? Every time we want to support a new type browser we have to\r\n        // go and add more conditions (here and in multiple other places).\r\n        // Cannot we do a feature detection instead of a browser type check? For\r\n        // example, if item has a stat property of type function, then it's very\r\n        // likely that whoever defined it wanted you to call it in order to\r\n        // retrieve the value associated with a specific key.\r\n        itemStatByKey = (item, key) => item.stat(key);\r\n        break;\r\n    case browsers.REACT_NATIVE:\r\n        // The implementation provided by react-native-webrtc follows the\r\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\r\n        // Array in which each element is a key-value pair.\r\n        itemStatByKey = function(item, key) {\r\n            let value;\r\n\r\n            item.values.some(pair => {\r\n                if (pair.hasOwnProperty(key)) {\r\n                    value = pair[key];\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n\r\n            });\r\n\r\n            return value;\r\n        };\r\n        break;\r\n    default:\r\n        itemStatByKey = (item, key) => item[key];\r\n    }\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => itemStatByKey(item, keyFromName(name));\r\n};\r\n\r\n/**\r\n * Obtains a stat value from given stat and converts it to a non-negative\r\n * number. If the value is either invalid or negative then 0 will be returned.\r\n * @param report\r\n * @param {string} name\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\r\n    let value = this._getStatValue(report, name);\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/* eslint-disable no-continue */\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    for (const idx in this.currentStatsReport) {\r\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n        const now = this.currentStatsReport[idx];\r\n\r\n        // The browser API may return \"undefined\" values in the array\r\n        if (!now) {\r\n            continue;\r\n        }\r\n\r\n        try {\r\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\r\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\r\n\r\n            if (receiveBandwidth || sendBandwidth) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(receiveBandwidth / 1000),\r\n                    'upload': Math.round(sendBandwidth / 1000)\r\n                };\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        if (now.type === 'googCandidatePair') {\r\n            let active, ip, localCandidateType, localip,\r\n                remoteCandidateType, rtt, type;\r\n\r\n            try {\r\n                active = getStatValue(now, 'activeConnection');\r\n                if (!active) {\r\n                    continue;\r\n                }\r\n\r\n                ip = getStatValue(now, 'remoteAddress');\r\n                type = getStatValue(now, 'transportType');\r\n                localip = getStatValue(now, 'localAddress');\r\n                localCandidateType = getStatValue(now, 'localCandidateType');\r\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\r\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\r\n            } catch (e) { /* not supported*/ }\r\n            if (!ip || !type || !localip || active !== 'true') {\r\n                continue;\r\n            }\r\n\r\n            // Save the address unless it has been saved already.\r\n            const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n            if (!conferenceStatsTransport.some(\r\n                    t =>\r\n                        t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localip)) {\r\n                conferenceStatsTransport.push({\r\n                    ip,\r\n                    type,\r\n                    localip,\r\n                    p2p: this.peerconnection.isP2P,\r\n                    localCandidateType,\r\n                    remoteCandidateType,\r\n                    rtt\r\n                });\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (now.type === 'candidatepair') {\r\n            // we need succeeded and selected pairs only\r\n            if (now.state !== 'succeeded' || !now.selected) {\r\n                continue;\r\n            }\r\n\r\n            const local = this.currentStatsReport[now.localCandidateId];\r\n            const remote = this.currentStatsReport[now.remoteCandidateId];\r\n\r\n            this.conferenceStats.transport.push({\r\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\r\n                type: local.transport,\r\n                localip: `${local.ipAddress}:${local.portNumber}`,\r\n                p2p: this.peerconnection.isP2P,\r\n                localCandidateType: local.candidateType,\r\n                remoteCandidateType: remote.candidateType\r\n            });\r\n        }\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\r\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.previousStatsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        // If type=\"track\", take the first SSRC from ssrcIds.\r\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before || !ssrc) {\r\n            continue;\r\n        }\r\n\r\n        // isRemote is available only in FF and is ignored in case of chrome\r\n        // according to the spec\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\r\n        // when isRemote is true indicates that the measurements were done at\r\n        // the remote endpoint and reported in an RTCP RR/XR.\r\n        // Fixes a problem where we are calculating local stats wrong adding\r\n        // the sent bytes to the local download bitrate.\r\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\r\n        // property.\r\n        if (now.isRemote === true || now.remoteSource === true) {\r\n            continue;\r\n        }\r\n\r\n        let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n        if (!ssrcStats) {\r\n            ssrcStats = new SsrcStats();\r\n            this.ssrc2stats.set(ssrc, ssrcStats);\r\n        }\r\n\r\n        let isDownloadStream = true;\r\n        let key = 'packetsReceived';\r\n        let packetsNow = getStatValue(now, key);\r\n\r\n        if (typeof packetsNow === 'undefined'\r\n            || packetsNow === null || packetsNow === '') {\r\n            isDownloadStream = false;\r\n            key = 'packetsSent';\r\n            packetsNow = getStatValue(now, key);\r\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\r\n                logger.warn('No packetsReceived nor packetsSent stat found');\r\n            }\r\n        }\r\n        if (!packetsNow || packetsNow < 0) {\r\n            packetsNow = 0;\r\n        }\r\n\r\n        const packetsBefore = this.getNonNegativeStat(before, key);\r\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n        const packetsLostNow\r\n            = this.getNonNegativeStat(now, 'packetsLost');\r\n        const packetsLostBefore\r\n            = this.getNonNegativeStat(before, 'packetsLost');\r\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n        ssrcStats.setLoss({\r\n            packetsTotal: packetsDiff + packetsLostDiff,\r\n            packetsLost: packetsLostDiff,\r\n            isDownloadStream\r\n        });\r\n\r\n        const bytesReceivedNow\r\n            = this.getNonNegativeStat(now, 'bytesReceived');\r\n        const bytesReceivedBefore\r\n            = this.getNonNegativeStat(before, 'bytesReceived');\r\n        const bytesReceived\r\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\r\n\r\n        let bytesSent = 0;\r\n\r\n        // TODO: clean this mess up!\r\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\r\n\r\n        if (typeof nowBytesTransmitted === 'number'\r\n            || typeof nowBytesTransmitted === 'string') {\r\n            nowBytesTransmitted = Number(nowBytesTransmitted);\r\n            if (!isNaN(nowBytesTransmitted)) {\r\n                byteSentStats[ssrc] = nowBytesTransmitted;\r\n                if (nowBytesTransmitted > 0) {\r\n                    bytesSent = nowBytesTransmitted\r\n                        - getStatValue(before, 'bytesSent');\r\n                }\r\n            }\r\n        }\r\n        bytesSent = Math.max(0, bytesSent);\r\n\r\n        const timeMs = now.timestamp - before.timestamp;\r\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\r\n\r\n        if (timeMs > 0) {\r\n            // TODO is there any reason to round here?\r\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\r\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\r\n        }\r\n\r\n        ssrcStats.addBitrate({\r\n            'download': bitrateReceivedKbps,\r\n            'upload': bitrateSentKbps\r\n        });\r\n\r\n        const resolution = {\r\n            height: null,\r\n            width: null\r\n        };\r\n\r\n        try {\r\n            let height, width;\r\n\r\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\r\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\r\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        // Tries to get frame rate\r\n        let frameRate;\r\n\r\n        try {\r\n            frameRate = getStatValue(now, 'googFrameRateReceived')\r\n                || getStatValue(now, 'googFrameRateSent') || 0;\r\n        } catch (e) {\r\n            // if it fails with previous properties(chrome),\r\n            // let's try with another one (FF)\r\n            try {\r\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\r\n            } catch (err) { /* not supported*/ }\r\n        }\r\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n        if (resolution.height && resolution.width) {\r\n            ssrcStats.setResolution(resolution);\r\n        } else {\r\n            ssrcStats.setResolution(null);\r\n        }\r\n\r\n        let codec;\r\n\r\n        // Try to get the codec for later reporting.\r\n        try {\r\n            codec = getStatValue(now, 'googCodecName') || '';\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        ssrcStats.setCodec(codec);\r\n    }\r\n\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n *\r\n */\r\nStatsCollector.prototype._processAndEmitReport = function() {\r\n    // process stats\r\n    const totalPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    const lostPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    let bitrateDownload = 0;\r\n    let bitrateUpload = 0;\r\n    const resolutions = {};\r\n    const framerates = {};\r\n    const codecs = {};\r\n    let audioBitrateDownload = 0;\r\n    let audioBitrateUpload = 0;\r\n    let audioCodec = '';\r\n    let videoBitrateDownload = 0;\r\n    let videoBitrateUpload = 0;\r\n    let videoCodec = '';\r\n\r\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\r\n        // process packet loss stats\r\n        const loss = ssrcStats.loss;\r\n        const type = loss.isDownloadStream ? 'download' : 'upload';\r\n\r\n        totalPackets[type] += loss.packetsTotal;\r\n        lostPackets[type] += loss.packetsLost;\r\n\r\n        // process bitrate stats\r\n        bitrateDownload += ssrcStats.bitrate.download;\r\n        bitrateUpload += ssrcStats.bitrate.upload;\r\n\r\n        // collect resolutions and framerates\r\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\r\n\r\n        if (track) {\r\n            if (track.isAudioTrack()) {\r\n                audioBitrateDownload += ssrcStats.bitrate.download;\r\n                audioBitrateUpload += ssrcStats.bitrate.upload;\r\n                audioCodec = ssrcStats.codec;\r\n            } else {\r\n                videoBitrateDownload += ssrcStats.bitrate.download;\r\n                videoBitrateUpload += ssrcStats.bitrate.upload;\r\n                videoCodec = ssrcStats.codec;\r\n            }\r\n\r\n            const participantId = track.getParticipantId();\r\n\r\n            if (participantId) {\r\n                const resolution = ssrcStats.resolution;\r\n\r\n                if (resolution.width\r\n                        && resolution.height\r\n                        && resolution.width !== -1\r\n                        && resolution.height !== -1) {\r\n                    const userResolutions = resolutions[participantId] || {};\r\n\r\n                    userResolutions[ssrc] = resolution;\r\n                    resolutions[participantId] = userResolutions;\r\n                }\r\n                if (ssrcStats.framerate !== 0) {\r\n                    const userFramerates = framerates[participantId] || {};\r\n\r\n                    userFramerates[ssrc] = ssrcStats.framerate;\r\n                    framerates[participantId] = userFramerates;\r\n                }\r\n                if (audioCodec.length && videoCodec.length) {\r\n                    const codecDesc = {\r\n                        'audio': audioCodec,\r\n                        'video': videoCodec\r\n                    };\r\n\r\n                    const userCodecs = codecs[participantId] || {};\r\n\r\n                    userCodecs[ssrc] = codecDesc;\r\n                    codecs[participantId] = userCodecs;\r\n                }\r\n            } else {\r\n                logger.error(`No participant ID returned by ${track}`);\r\n            }\r\n        }\r\n\r\n        ssrcStats.resetBitrate();\r\n    }\r\n\r\n    this.conferenceStats.bitrate = {\r\n        'upload': bitrateUpload,\r\n        'download': bitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.audio = {\r\n        'upload': audioBitrateUpload,\r\n        'download': audioBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.video = {\r\n        'upload': videoBitrateUpload,\r\n        'download': videoBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.packetLoss = {\r\n        total:\r\n            calculatePacketLoss(\r\n                lostPackets.download + lostPackets.upload,\r\n                totalPackets.download + totalPackets.upload),\r\n        download:\r\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\r\n        upload:\r\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\r\n    };\r\n\r\n    const avgAudioLevels = {};\r\n    let localAvgAudioLevels;\r\n\r\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\r\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\r\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\r\n\r\n        if (isLocal) {\r\n            localAvgAudioLevels = avgAudioLevel;\r\n        } else {\r\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\r\n\r\n            if (track) {\r\n                const participantId = track.getParticipantId();\r\n\r\n                if (participantId) {\r\n                    avgAudioLevels[participantId] = avgAudioLevel;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    this.audioLevelReportHistory = {};\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        this.peerconnection,\r\n        {\r\n            'bandwidth': this.conferenceStats.bandwidth,\r\n            'bitrate': this.conferenceStats.bitrate,\r\n            'packetLoss': this.conferenceStats.packetLoss,\r\n            'resolution': resolutions,\r\n            'framerate': framerates,\r\n            'codec': codecs,\r\n            'transport': this.conferenceStats.transport,\r\n            localAvgAudioLevels,\r\n            avgAudioLevels\r\n        });\r\n    this.conferenceStats.transport = [];\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n\r\n    for (const idx in this.currentAudioLevelsReport) {\r\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n\r\n        const now = this.currentAudioLevelsReport[idx];\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.baselineAudioLevelsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before) {\r\n            logger.warn(`${ssrc} not enough data`);\r\n            continue;\r\n        }\r\n\r\n        if (!ssrc) {\r\n            if ((Date.now() - now.timestamp) < 3000) {\r\n                logger.warn('No ssrc: ');\r\n            }\r\n            continue;\r\n        }\r\n\r\n        // Audio level\r\n        let audioLevel;\r\n\r\n        try {\r\n            audioLevel\r\n                = getStatValue(now, 'audioInputLevel')\r\n                    || getStatValue(now, 'audioOutputLevel');\r\n        } catch (e) { /* not supported*/\r\n            logger.warn('Audio Levels are not available in the statistics.');\r\n            clearInterval(this.audioLevelsIntervalId);\r\n\r\n            return;\r\n        }\r\n\r\n        if (audioLevel) {\r\n            let isLocal;\r\n\r\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\r\n            if (now.type === 'ssrc') {\r\n                isLocal = !getStatValue(now, 'packetsReceived');\r\n\r\n            // If type=\"track\", check remoteSource boolean property.\r\n            } else {\r\n                isLocal = !now.remoteSource;\r\n            }\r\n\r\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\r\n            // 0..1 range (0 == silence). However browsers don't behave that\r\n            // way so we must convert it to 0..1.\r\n            // TODO: Can't find specs about what this value really is, but it\r\n            // seems to vary between 0 and around 32k.\r\n            audioLevel = audioLevel / 32767;\r\n\r\n            if (!(ssrc in this.audioLevelReportHistory)) {\r\n                this.audioLevelReportHistory[ssrc] = {\r\n                    isLocal,\r\n                    data: []\r\n                };\r\n            }\r\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable no-continue */\r\n\r\n/**\r\n * New promised based getStats report processing.\r\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\r\n * frameRate stat is missing and calculating it using framesSent,\r\n * gives values double the values seen in webrtc-internals.\r\n * https://w3c.github.io/webrtc-stats/\r\n */\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\r\n * Promised based getStats.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => item[keyFromName(name)];\r\n};\r\n\r\n/**\r\n * Converts the value to a non-negative number.\r\n * If the value is either invalid or negative then 0 will be returned.\r\n * @param {*} v\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeValue = function(v) {\r\n    let value = v;\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/**\r\n * Calculates bitrate between before and now using a supplied field name and its\r\n * value in the stats.\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\r\n * previous stats.\r\n * @param fieldName the field to use for calculations.\r\n * @return {number} the calculated bitrate between now and before.\r\n * @private\r\n */\r\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\r\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\r\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\r\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\r\n\r\n    const timeMs = now.timestamp - before.timestamp;\r\n    let bitrateKbps = 0;\r\n\r\n    if (timeMs > 0) {\r\n        // TODO is there any reason to round here?\r\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\r\n    }\r\n\r\n    return bitrateKbps;\r\n};\r\n\r\n/**\r\n * Stats processing new getStats logic.\r\n */\r\nStatsCollector.prototype.processNewStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    this.currentStatsReport.forEach(now => {\r\n\r\n        // RTCIceCandidatePairStats\r\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\r\n        if (now.type === 'candidate-pair'\r\n            && now.nominated\r\n            && now.state === 'succeeded') {\r\n\r\n            const availableIncomingBitrate = now.availableIncomingBitrate;\r\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\r\n\r\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(availableIncomingBitrate / 1000),\r\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\r\n                };\r\n            }\r\n\r\n            const remoteUsedCandidate\r\n                = this.currentStatsReport.get(now.remoteCandidateId);\r\n            const localUsedCandidate\r\n                = this.currentStatsReport.get(now.localCandidateId);\r\n\r\n            // RTCIceCandidateStats\r\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\r\n            // safari currently does not provide ice candidates in stats\r\n            if (remoteUsedCandidate && localUsedCandidate) {\r\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\r\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\r\n                const ip = `${remoteIpAddress}:${remotePort}`;\r\n\r\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\r\n                const localPort = getStatValue(localUsedCandidate, 'port');\r\n\r\n                const localIp = `${localIpAddress}:${localPort}`;\r\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\r\n\r\n                // Save the address unless it has been saved already.\r\n                const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n                if (!conferenceStatsTransport.some(\r\n                        t =>\r\n                            t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localIp)) {\r\n                    conferenceStatsTransport.push({\r\n                        ip,\r\n                        type,\r\n                        localIp,\r\n                        p2p: this.peerconnection.isP2P,\r\n                        localCandidateType: localUsedCandidate.candidateType,\r\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\r\n                        networkType: localUsedCandidate.networkType,\r\n                        rtt: now.currentRoundTripTime * 1000\r\n                    });\r\n                }\r\n            }\r\n\r\n        // RTCReceivedRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\r\n        // RTCSentRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\r\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\r\n            const before = this.previousStatsReport.get(now.id);\r\n            const ssrc = this.getNonNegativeValue(now.ssrc);\r\n\r\n            if (!before || !ssrc) {\r\n                return;\r\n            }\r\n\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n\r\n            let isDownloadStream = true;\r\n            let key = 'packetsReceived';\r\n\r\n            if (now.type === 'outbound-rtp') {\r\n                isDownloadStream = false;\r\n                key = 'packetsSent';\r\n            }\r\n\r\n            let packetsNow = now[key];\r\n\r\n            if (!packetsNow || packetsNow < 0) {\r\n                packetsNow = 0;\r\n            }\r\n\r\n            const packetsBefore = this.getNonNegativeValue(before[key]);\r\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n            const packetsLostNow\r\n                = this.getNonNegativeValue(now.packetsLost);\r\n            const packetsLostBefore\r\n                = this.getNonNegativeValue(before.packetsLost);\r\n            const packetsLostDiff\r\n                = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n            ssrcStats.setLoss({\r\n                packetsTotal: packetsDiff + packetsLostDiff,\r\n                packetsLost: packetsLostDiff,\r\n                isDownloadStream\r\n            });\r\n\r\n            if (now.type === 'inbound-rtp') {\r\n\r\n                ssrcStats.addBitrate({\r\n                    'download': this._calculateBitrate(\r\n                                    now, before, 'bytesReceived'),\r\n                    'upload': 0\r\n                });\r\n\r\n                // RTCInboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\r\n                // TODO: can we use framesDecoded for frame rate, available\r\n                // in chrome\r\n            } else {\r\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\r\n                ssrcStats.addBitrate({\r\n                    'download': 0,\r\n                    'upload': this._calculateBitrate(\r\n                                now, before, 'bytesSent')\r\n                });\r\n\r\n                // RTCOutboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\r\n                // TODO: can we use framesEncoded for frame rate, available\r\n                // in chrome\r\n            }\r\n\r\n            // FF has framerateMean out of spec\r\n            const framerateMean = now.framerateMean;\r\n\r\n            if (framerateMean) {\r\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\r\n            }\r\n\r\n        // track for resolution\r\n        // RTCVideoHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\r\n        // RTCMediaHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\r\n        } else if (now.type === 'track') {\r\n\r\n            const resolution = {\r\n                height: now.frameHeight,\r\n                width: now.frameWidth\r\n            };\r\n\r\n            // Tries to get frame rate\r\n            let frameRate = now.framesPerSecond;\r\n\r\n            if (!frameRate) {\r\n                // we need to calculate it\r\n                const before = this.previousStatsReport.get(now.id);\r\n\r\n                if (before) {\r\n                    const timeMs = now.timestamp - before.timestamp;\r\n\r\n                    if (timeMs > 0 && now.framesSent) {\r\n                        const numberOfFramesSinceBefore\r\n                            = now.framesSent - before.framesSent;\r\n\r\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\r\n                    }\r\n                }\r\n\r\n                if (!frameRate) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const trackIdentifier = now.trackIdentifier;\r\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n            if (!ssrc) {\r\n                return;\r\n            }\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n            if (resolution.height && resolution.width) {\r\n                ssrcStats.setResolution(resolution);\r\n            } else {\r\n                ssrcStats.setResolution(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processNewAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    this.currentAudioLevelsReport.forEach(now => {\r\n        if (now.type !== 'track') {\r\n            return;\r\n        }\r\n\r\n        // Audio level\r\n        const audioLevel = now.audioLevel;\r\n\r\n        if (!audioLevel) {\r\n            return;\r\n        }\r\n\r\n        const trackIdentifier = now.trackIdentifier;\r\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n        if (ssrc) {\r\n            const isLocal\r\n                = ssrc === this.peerconnection.getLocalSSRC(\r\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * End new promised based getStats processing methods.\r\n */\r\n","/**\r\n * Implements utility to forward events from one eventEmitter to another.\r\n * @param src {object} instance of EventEmitter or another class that implements\r\n * addListener method which will register listener to EventEmitter instance.\r\n * @param dest {object} instance of EventEmitter or another class that\r\n * implements emit method which will emit an event.\r\n */\r\nfunction EventEmitterForwarder(src, dest) {\r\n    if (!src || !dest || typeof src.addListener !== 'function'\r\n        || typeof dest.emit !== 'function') {\r\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\r\n    }\r\n    this.src = src;\r\n    this.dest = dest;\r\n}\r\n\r\n/**\r\n * Adds event to be forwarded from src to dest.\r\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\r\n * for.\r\n * @param dstEvent {string} the event that will be fired from dest.\r\n * @param arguments all other passed arguments are going to be fired with\r\n * dstEvent.\r\n */\r\nEventEmitterForwarder.prototype.forward = function(...args) {\r\n    const srcEvent = args[0];\r\n\r\n    // This will be the \"this\" value for emit function.\r\n\r\n    args[0] = this.dest;\r\n\r\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\r\n    this.src.addListener(\r\n        srcEvent,\r\n        Function.prototype.bind.apply(this.dest.emit, args));\r\n};\r\n\r\nmodule.exports = EventEmitterForwarder;\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\n\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\r\nimport * as MediaType from './service/RTC/MediaType';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a participant in (i.e. a member of) a conference.\r\n */\r\nexport default class JitsiParticipant {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Initializes a new JitsiParticipant instance.\r\n     *\r\n     * @constructor\r\n     * @param jid the conference XMPP jid\r\n     * @param conference\r\n     * @param displayName\r\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\r\n     * represent a hidden participant; otherwise, false.\r\n     * @param {string} statsID - optional participant statsID\r\n     * @param {string} status - the initial status if any.\r\n     * @param {object} identity - the xmpp identity\r\n     */\r\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\r\n        this._jid = jid;\r\n        this._id = Strophe.getResourceFromJid(jid);\r\n        this._conference = conference;\r\n        this._displayName = displayName;\r\n        this._supportsDTMF = false;\r\n        this._tracks = [];\r\n        this._role = 'none';\r\n        this._status = status;\r\n        this._hidden = hidden;\r\n        this._statsID = statsID;\r\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\r\n        this._properties = {};\r\n        this._identity = identity;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * @returns {JitsiConference} The conference that this participant belongs\r\n     * to.\r\n     */\r\n    getConference() {\r\n        return this._conference;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a property of this participant.\r\n     */\r\n    getProperty(name) {\r\n        return this._properties[name];\r\n    }\r\n\r\n    /**\r\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\r\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\r\n     * muted status.\r\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\r\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\r\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\r\n     */\r\n    hasAnyVideoTrackWebRTCMuted() {\r\n        return (\r\n            this.getTracks().some(\r\n                jitsiTrack =>\r\n                    jitsiTrack.getType() === MediaType.VIDEO\r\n                        && jitsiTrack.isWebRTCTrackMuted()));\r\n    }\r\n\r\n    /**\r\n     * Updates participant's connection status.\r\n     * @param {string} state the current participant connection state.\r\n     * {@link ParticipantConnectionStatus}.\r\n     * @private\r\n     */\r\n    _setConnectionStatus(status) {\r\n        this._connectionStatus = status;\r\n    }\r\n\r\n    /**\r\n     * Return participant's connectivity status.\r\n     *\r\n     * @returns {string} the connection status\r\n     * <tt>ParticipantConnectionStatus</tt> of the user.\r\n     * {@link ParticipantConnectionStatus}.\r\n     */\r\n    getConnectionStatus() {\r\n        return this._connectionStatus;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a property of this participant, and fires an event if\r\n     * the value has changed.\r\n     * @name the name of the property.\r\n     * @value the value to set.\r\n     */\r\n    setProperty(name, value) {\r\n        const oldValue = this._properties[name];\r\n\r\n        if (value !== oldValue) {\r\n            this._properties[name] = value;\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n                this,\r\n                name,\r\n                oldValue,\r\n                value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\r\n     * participant.\r\n     */\r\n    getTracks() {\r\n        return this._tracks.slice();\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\r\n     * participant, for given media type.\r\n     */\r\n    getTracksByMediaType(mediaType) {\r\n        return this.getTracks().filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The ID of this participant.\r\n     */\r\n    getId() {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The JID of this participant.\r\n     */\r\n    getJid() {\r\n        return this._jid;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The human-readable display name of this participant.\r\n     */\r\n    getDisplayName() {\r\n        return this._displayName;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The stats ID of this participant.\r\n     */\r\n    getStatsID() {\r\n        return this._statsID;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The status of the participant.\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a moderator or not.\r\n     */\r\n    isModerator() {\r\n        return this._role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\r\n     * special system participants may want to join hidden (like for example the\r\n     * recorder).\r\n     */\r\n    isHidden() {\r\n        return this._hidden;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their audio.\r\n     */\r\n    isAudioMuted() {\r\n        return this._isMediaTypeMuted(MediaType.AUDIO);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all JitsiTracks which are of a specific MediaType and\r\n     * which belong to this JitsiParticipant are muted.\r\n     *\r\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\r\n     * checked.\r\n     * @private\r\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\r\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\r\n     * false.\r\n     */\r\n    _isMediaTypeMuted(mediaType) {\r\n        return this.getTracks().reduce(\r\n            (muted, track) =>\r\n                muted && (track.getType() !== mediaType || track.isMuted()),\r\n            true);\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their video.\r\n     */\r\n    isVideoMuted() {\r\n        return this._isMediaTypeMuted(MediaType.VIDEO);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The role of this participant.\r\n     */\r\n    getRole() {\r\n        return this._role;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    supportsDTMF() {\r\n        return this._supportsDTMF;\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for the participant.\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(timeout = 5000) {\r\n        if (this._getFeaturesPromise) {\r\n            return this._getFeaturesPromise;\r\n        }\r\n\r\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\r\n            .catch(error => {\r\n                // Retry on feature version mismatch\r\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\r\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\r\n                }\r\n\r\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n\r\n        return this._getFeaturesPromise\r\n            .then(result => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                return result;\r\n            }, error => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns the bot type for the participant.\r\n     *\r\n     * @returns {string|undefined} - The bot type of the participant.\r\n     */\r\n    getBotType() {\r\n        return this._botType;\r\n    }\r\n}\r\n","import {\r\n    CONNECTION_DISCONNECTED,\r\n    CONNECTION_ESTABLISHED,\r\n    CONNECTION_FAILED\r\n} from './JitsiConnectionEvents';\r\nimport XMPP from './modules/xmpp/xmpp';\r\n\r\n/**\r\n * @typedef {Object} UpgradeRoleError\r\n *\r\n * @property {JitsiConnectionErrors} [connectionError] - One of\r\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\r\n * XMPP server.\r\n * @property {String} [authenticationError] - One of XMPP error conditions\r\n * returned by Jicofo on authentication attempt. See\r\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\r\n * @property {String} [message] - More details about the error.\r\n * @property {Object} [credentials] - The credentials that failed the\r\n * authentication.\r\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\r\n * that failed the authentication.\r\n * @property {string} [credentials.password] - The password part of the\r\n * credentials that failed the authentication.\r\n *\r\n * NOTE If neither one of the errors is present, then the operation has been\r\n * canceled.\r\n */\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\n/**\r\n * Connects to the XMPP server using the specified credentials and contacts\r\n * Jicofo in order to obtain a session ID (which is then stored in the local\r\n * storage). The user's role of the parent conference will be upgraded to\r\n * moderator (by Jicofo). It's also used to join the conference when starting\r\n * from anonymous domain and only authenticated users are allowed to create new\r\n * rooms.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.id - XMPP user's ID to log in. For example,\r\n * user@xmpp-server.com.\r\n * @param {string} options.password - XMPP user's password to log in with.\r\n * @param {string} [options.roomPassword] - The password to join the MUC with.\r\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\r\n * into the XMPP server was successful. The next step will be to obtain a new\r\n * session ID from Jicofo and join the MUC using it which will effectively\r\n * upgrade the user's role to moderator.\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the specified XMPP user finishes and\r\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process. If the process finishes successfully, the session ID has been stored\r\n * in the settings and the <tt>thenable</tt> is resolved. If the process\r\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\r\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\r\n * <tt>authenticationError</tt> property set depending on which of the steps has\r\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\r\n * thenable will be rejected with an empty object (i.e. no error property will\r\n * be set on the rejection reason).\r\n */\r\nexport default function authenticateAndUpgradeRole({\r\n    // 1. Log the specified XMPP user in.\r\n    id,\r\n    password,\r\n    onCreateResource,\r\n\r\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\r\n    //    successfully logged in.\r\n    onLoginSuccessful,\r\n\r\n    // 3. Join the MUC.\r\n    roomPassword\r\n}) {\r\n    let canceled = false;\r\n    let rejectPromise;\r\n    let xmpp = new XMPP(this.connection.options);\r\n\r\n    const process = new Promise((resolve, reject) => {\r\n        // The process is represented by a Thenable with a cancel method. The\r\n        // Thenable is implemented using Promise and the cancel using the\r\n        // Promise's reject function.\r\n        rejectPromise = reject;\r\n\r\n\r\n        xmpp.addListener(\r\n            CONNECTION_DISCONNECTED,\r\n            () => {\r\n                xmpp = undefined;\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_ESTABLISHED,\r\n            () => {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                // Let the caller know that the XMPP login was successful.\r\n                onLoginSuccessful && onLoginSuccessful();\r\n\r\n                // Now authenticate with Jicofo and get a new session ID.\r\n                const room = xmpp.createRoom(\r\n                    this.options.name,\r\n                    this.options.config,\r\n                    onCreateResource\r\n                );\r\n\r\n                room.moderator.authenticate()\r\n                    .then(() => {\r\n                        xmpp && xmpp.disconnect();\r\n\r\n                        if (canceled) {\r\n                            return;\r\n                        }\r\n\r\n                        // At this point we should have the new session ID\r\n                        // stored in the settings. Jicofo will allow to join the\r\n                        // room.\r\n                        this.join(roomPassword);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(({ error, message }) => {\r\n                        xmpp.disconnect();\r\n\r\n                        reject({\r\n                            authenticationError: error,\r\n                            message\r\n                        });\r\n                    });\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_FAILED,\r\n            (connectionError, message, credentials) => {\r\n                reject({\r\n                    connectionError,\r\n                    credentials,\r\n                    message\r\n                });\r\n                xmpp = undefined;\r\n            });\r\n\r\n        canceled || xmpp.connect(id, password);\r\n    });\r\n\r\n    /**\r\n     * Cancels the process, if it's in progress, of authenticating and upgrading\r\n     * the role of the local participant/user.\r\n     *\r\n     * @public\r\n     * @returns {void}\r\n     */\r\n    process.cancel = () => {\r\n        canceled = true;\r\n        rejectPromise({});\r\n        xmpp && xmpp.disconnect();\r\n    };\r\n\r\n    return process;\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n","/**\r\n* Gets next timeout using the full jitter pattern.\r\n*\r\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\r\n*\r\n* @param {number} retry - The retry number.\r\n* @param {number} minDelay - The minimal delay in milliseconds.\r\n* @param {number} base - The exponent base.\r\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\r\n* @private\r\n*/\r\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\r\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\r\n}\r\n","/**\r\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\r\n */\r\nexport default class LastRequestTracker {\r\n    /**\r\n     * Initializes new instance.\r\n     */\r\n    constructor() {\r\n        this._lastSuccess = null;\r\n    }\r\n\r\n    /**\r\n     * Starts tracking requests on the given connection.\r\n     *\r\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\r\n     * @param {Object} stropheConnection - Strophe connection instance.\r\n     */\r\n    startTracking(xmppConnection, stropheConnection) {\r\n        const originalRawInput = stropheConnection.rawInput;\r\n\r\n        stropheConnection.rawInput = (...args) => {\r\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\r\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\r\n            if (xmppConnection.connected) {\r\n                this._lastSuccess = Date.now();\r\n            }\r\n            originalRawInput.apply(stropheConnection, args);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns how many milliseconds have passed since the last successful BOSH request.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccess\r\n            ? Date.now() - this._lastSuccess\r\n            : null;\r\n    }\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport ChatRoom from './ChatRoom';\r\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * MUC connection plugin.\r\n */\r\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\r\n    /**\r\n     *\r\n     * @param xmpp\r\n     */\r\n    constructor(xmpp) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.rooms = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        // add handlers (just once)\r\n        this.connection.addHandler(this.onPresence.bind(this), null,\r\n            'presence', null, null, null, null);\r\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\r\n            null, 'presence', 'unavailable', null);\r\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\r\n            'presence', 'error', null);\r\n        this.connection.addHandler(this.onMessage.bind(this), null,\r\n            'message', null, null);\r\n        this.connection.addHandler(this.onMute.bind(this),\r\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     * @param options\r\n     */\r\n    createRoom(jid, password, options) {\r\n        const roomJid = Strophe.getBareJidFromJid(jid);\r\n\r\n        if (this.rooms[roomJid]) {\r\n            const errmsg = 'You are already in the room!';\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\r\n            password, this.xmpp, options);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\r\n\r\n        return this.rooms[roomJid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    doLeave(jid) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\r\n        delete this.rooms[jid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n\r\n        // What is this for? A workaround for something?\r\n        if (pres.getAttribute('type')) {\r\n            return true;\r\n        }\r\n\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        // Parse status.\r\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n            + '>status[code=\"201\"]').length) {\r\n            room.createNonAnonymousRoom();\r\n        }\r\n\r\n        room.onPresence(pres);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceUnavailable(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceUnavailable(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceError(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceError(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     */\r\n    onMessage(msg) {\r\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\r\n        const from = msg.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMessage(msg, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        // Returning false would result in the listener being deregistered by Strophe\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMute(iq);\r\n\r\n        return true;\r\n    }\r\n}\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport Lobby from './Lobby';\r\nimport XmppConnection from './XmppConnection';\r\nimport Moderator from './moderator';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const parser = {\r\n    packet2JSON(xmlElement, nodes) {\r\n        for (const child of Array.from(xmlElement.children)) {\r\n            const node = {\r\n                attributes: {},\r\n                children: [],\r\n                tagName: child.tagName\r\n            };\r\n\r\n            for (const attr of Array.from(child.attributes)) {\r\n                node.attributes[attr.name] = attr.value;\r\n            }\r\n            const text = Strophe.getText(child);\r\n\r\n            if (text) {\r\n                // Using Strophe.getText will do work for traversing all direct\r\n                // child text nodes but returns an escaped value, which is not\r\n                // desirable at this point.\r\n                node.value = Strophe.xmlunescape(text);\r\n            }\r\n            nodes.push(node);\r\n            this.packet2JSON(child, node.children);\r\n        }\r\n    },\r\n    json2packet(nodes, packet) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            if (node) {\r\n                packet.c(node.tagName, node.attributes);\r\n                if (node.value) {\r\n                    packet.t(node.value);\r\n                }\r\n                if (node.children) {\r\n                    this.json2packet(node.children, packet);\r\n                }\r\n                packet.up();\r\n            }\r\n        }\r\n\r\n        // packet.up();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns array of JS objects from the presence JSON associated with the passed\r\n / nodeName\r\n * @param pres the presence JSON\r\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\r\n */\r\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < pres.length; i++) {\r\n        if (pres[i].tagName === nodeName) {\r\n            res.push(pres[i]);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\r\n// of chaining function calls, allow long function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n * Array of affiliations that are allowed in members only room.\r\n * @type {string[]}\r\n */\r\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\r\n\r\n/**\r\n *\r\n */\r\nexport default class ChatRoom extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param jid\r\n     * @param password\r\n     * @param XMPP\r\n     * @param options\r\n     * @param {boolean} options.disableFocus - when set to {@code false} will\r\n     * not invite Jicofo into the room.\r\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\r\n     * This is intended to be used only for lobby rooms.\r\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\r\n     */\r\n    constructor(connection, jid, password, XMPP, options) {\r\n        super();\r\n        this.xmpp = XMPP;\r\n        this.connection = connection;\r\n        this.roomjid = Strophe.getBareJidFromJid(jid);\r\n        this.myroomjid = jid;\r\n        this.password = password;\r\n        logger.info(`Joined MUC as ${this.myroomjid}`);\r\n        this.members = {};\r\n        this.presMap = {};\r\n        this.presHandlers = {};\r\n        this._removeConnListeners = [];\r\n        this.joined = false;\r\n        this.role = null;\r\n        this.focusMucJid = null;\r\n        this.noBridgeAvailable = false;\r\n        this.options = options || {};\r\n        this.moderator\r\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\r\n                connection: this.xmpp.options,\r\n                conference: this.options\r\n            });\r\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\r\n            this.lobby = new Lobby(this);\r\n        }\r\n        this.initPresenceMap(options);\r\n        this.lastPresences = {};\r\n        this.phoneNumber = null;\r\n        this.phonePin = null;\r\n        this.connectionTimes = {};\r\n        this.participantPropertyListener = null;\r\n\r\n        this.locked = false;\r\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    initPresenceMap(options = {}) {\r\n        this.presMap.to = this.myroomjid;\r\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\r\n        this.presMap.nodes = [];\r\n\r\n        if (options.statsId) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'stats-id',\r\n                'value': options.statsId\r\n            });\r\n        }\r\n\r\n        // We need to broadcast 'videomuted' status from the beginning, cause\r\n        // Jicofo makes decisions based on that. Initialize it with 'false'\r\n        // here.\r\n        this.addVideoInfoToPresence(false);\r\n\r\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'region',\r\n                'attributes': {\r\n                    id: options.deploymentInfo.userRegion,\r\n                    xmlns: 'http://jitsi.org/jitsi-meet'\r\n                }\r\n            });\r\n        }\r\n\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Joins the chat room.\r\n     * @param {string} password - Password to unlock room on joining.\r\n     * @param {Object} customJoinPresenceExtensions - Key values object to be used\r\n     * for the initial presence, they key will be an xmpp node and its text is the value,\r\n     * and those will be added to the initial <x xmlns='http://jabber.org/protocol/muc'/>\r\n     * @returns {Promise} - resolved when join completes. At the time of this\r\n     * writing it's never rejected.\r\n     */\r\n    join(password, customJoinPresenceExtensions) {\r\n        this.password = password;\r\n\r\n        return new Promise(resolve => {\r\n            this.options.disableFocus\r\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\r\n\r\n            const preJoin\r\n                = this.options.disableFocus\r\n                    ? Promise.resolve()\r\n                    : this.moderator.allocateConferenceFocus();\r\n\r\n            preJoin.then(() => {\r\n                this.sendPresence(true, customJoinPresenceExtensions);\r\n                this._removeConnListeners.push(\r\n                    this.connection.addEventListener(\r\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                        this.onConnStatusChanged.bind(this))\r\n                );\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param fromJoin - Whether this is initial presence to join the room.\r\n     * @param customJoinPresenceExtensions - Object of key values to be added to the initial presence only.\r\n     */\r\n    sendPresence(fromJoin, customJoinPresenceExtensions) {\r\n        const to = this.presMap.to;\r\n\r\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\r\n            // Too early to send presence - not initialized\r\n            return;\r\n        }\r\n\r\n        const pres = $pres({ to });\r\n\r\n        // xep-0045 defines: \"including in the initial presence stanza an empty\r\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\r\n        // namespace\" and subsequent presences should not include that or it can\r\n        // be considered as joining, and server can send us the message history\r\n        // for the room on every presence\r\n        if (fromJoin) {\r\n            pres.c('x', { xmlns: this.presMap.xns });\r\n\r\n            if (this.password) {\r\n                pres.c('password').t(this.password).up();\r\n            }\r\n            if (customJoinPresenceExtensions) {\r\n                Object.keys(customJoinPresenceExtensions).forEach(key => {\r\n                    pres.c(key).t(customJoinPresenceExtensions[key]).up();\r\n                });\r\n            }\r\n            pres.up();\r\n        }\r\n\r\n        parser.json2packet(this.presMap.nodes, pres);\r\n\r\n        // we store time we last synced presence state\r\n        this.presenceSyncTime = Date.now();\r\n\r\n        this.connection.send(pres);\r\n        if (fromJoin) {\r\n            // XXX We're pressed for time here because we're beginning a complex\r\n            // and/or lengthy conference-establishment process which supposedly\r\n            // involves multiple RTTs. We don't have the time to wait for\r\n            // Strophe to decide to send our IQ.\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the presence unavailable, signaling the server\r\n     * we want to leave the room.\r\n     */\r\n    doLeave() {\r\n        logger.log('do leave', this.myroomjid);\r\n        const pres = $pres({ to: this.myroomjid,\r\n            type: 'unavailable' });\r\n\r\n        this.presMap.length = 0;\r\n\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\r\n        // means that there may not be enough time to send the unavailable\r\n        // presence. Switching Strophe to synchronous sending is not much of an\r\n        // option because it may lead to a noticeable delay in navigating away\r\n        // from the current location. As a compromise, we will try to increase\r\n        // the chances of sending the unavailable presence within the short time\r\n        // span that we have upon unloading by invoking flush() on the\r\n        // connection. We flush() once before sending/queuing the unavailable\r\n        // presence in order to attemtp to have the unavailable presence at the\r\n        // top of the send queue. We flush() once more after sending/queuing the\r\n        // unavailable presence in order to attempt to have it sent as soon as\r\n        // possible.\r\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n        this.connection.send(pres);\r\n        this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    discoRoomInfo() {\r\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\r\n\r\n        const getInfo\r\n            = $iq({\r\n                type: 'get',\r\n                to: this.roomjid\r\n            })\r\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\r\n\r\n        this.connection.sendIQ(getInfo, result => {\r\n            const locked\r\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\r\n                    .length\r\n                    === 1;\r\n\r\n            if (locked !== this.locked) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\r\n                this.locked = locked;\r\n            }\r\n\r\n            const meetingIdValEl\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\r\n\r\n            if (meetingIdValEl.length) {\r\n                this.setMeetingId(meetingIdValEl.text());\r\n            } else {\r\n                logger.warn('No meeting ID from backend');\r\n            }\r\n\r\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\r\n\r\n            const lobbyRoomField\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\r\n\r\n            if (this.lobby) {\r\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\r\n            }\r\n\r\n            if (membersOnly !== this.membersOnlyEnabled) {\r\n                this.membersOnlyEnabled = membersOnly;\r\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\r\n            }\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room info: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the meeting unique Id (received from the backend).\r\n     *\r\n     * @param {string} meetingId - The new meetings id.\r\n     * @returns {void}\r\n     */\r\n    setMeetingId(meetingId) {\r\n        if (this.meetingId !== meetingId) {\r\n            if (this.meetingId) {\r\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\r\n            }\r\n            this.meetingId = meetingId;\r\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    createNonAnonymousRoom() {\r\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\r\n\r\n        if (this.options.disableDiscoInfo) {\r\n            return;\r\n        }\r\n\r\n        const getForm = $iq({ type: 'get',\r\n            to: this.roomjid })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\r\n            .c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n        this.connection.sendIQ(getForm, form => {\r\n            if (!$(form).find(\r\n                    '>query>x[xmlns=\"jabber:x:data\"]'\r\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\r\n                const errmsg = 'non-anonymous rooms not supported';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                logger.error(errmsg);\r\n\r\n                return;\r\n            }\r\n\r\n            const formSubmit = $iq({ to: this.roomjid,\r\n                type: 'set' })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\r\n                .c('value')\r\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\r\n\r\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\r\n                .c('value').t('anyone').up().up();\r\n\r\n            this.connection.sendIQ(formSubmit);\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room configuration form: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles Xmpp Connection status updates.\r\n     *\r\n     * @param {Strophe.Status} status - The Strophe connection status.\r\n     */\r\n    onConnStatusChanged(status) {\r\n        // Send cached presence when the XMPP connection is re-established.\r\n        if (status === XmppConnection.Status.CONNECTED) {\r\n            this.sendPresence();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const member = {};\r\n        const statusEl = pres.getElementsByTagName('status')[0];\r\n\r\n        if (statusEl) {\r\n            member.status = statusEl.textContent || '';\r\n        }\r\n        let hasStatusUpdate = false;\r\n        let hasVersionUpdate = false;\r\n        const xElement\r\n            = pres.getElementsByTagNameNS(\r\n                'http://jabber.org/protocol/muc#user', 'x')[0];\r\n        const mucUserItem\r\n            = xElement && xElement.getElementsByTagName('item')[0];\r\n\r\n        member.affiliation\r\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\r\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\r\n\r\n        // Focus recognition\r\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\r\n\r\n        member.jid = jid;\r\n        member.isFocus\r\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\r\n        member.isHiddenDomain\r\n            = jid && jid.indexOf('@') > 0\r\n                && this.options.hiddenDomain\r\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\r\n\r\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\r\n            fromHiddenDomain: member.isHiddenDomain,\r\n            presence: pres\r\n        });\r\n\r\n        const xEl = pres.querySelector('x');\r\n\r\n        if (xEl) {\r\n            xEl.remove();\r\n        }\r\n\r\n        const nodes = [];\r\n\r\n        parser.packet2JSON(pres, nodes);\r\n        this.lastPresences[from] = nodes;\r\n\r\n        // process nodes to extract data needed for MUC_JOINED and\r\n        // MUC_MEMBER_JOINED events\r\n        const extractIdentityInformation = node => {\r\n            const identity = {};\r\n            const userInfo = node.children.find(c => c.tagName === 'user');\r\n\r\n            if (userInfo) {\r\n                identity.user = {};\r\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\r\n                    const child\r\n                        = userInfo.children.find(c => c.tagName === tag);\r\n\r\n                    if (child) {\r\n                        identity.user[tag] = child.value;\r\n                    }\r\n                }\r\n            }\r\n            const groupInfo = node.children.find(c => c.tagName === 'group');\r\n\r\n            if (groupInfo) {\r\n                identity.group = groupInfo.value;\r\n            }\r\n\r\n            return identity;\r\n        };\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'bot': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { type } = attributes;\r\n\r\n                member.botType = type;\r\n                break;\r\n            }\r\n            case 'nick':\r\n                member.nick = node.value;\r\n                break;\r\n            case 'userId':\r\n                member.id = node.value;\r\n                break;\r\n            case 'stats-id':\r\n                member.statsID = node.value;\r\n                break;\r\n            case 'identity':\r\n                member.identity = extractIdentityInformation(node);\r\n                break;\r\n            case 'stat': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { name } = attributes;\r\n\r\n                if (name === 'version') {\r\n                    member.version = attributes.value;\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n\r\n        if (from === this.myroomjid) {\r\n            const newRole\r\n                = member.affiliation === 'owner' ? member.role : 'none';\r\n\r\n            if (this.role !== newRole) {\r\n                this.role = newRole;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\r\n                    this.role);\r\n            }\r\n            if (!this.joined) {\r\n                this.joined = true;\r\n                const now = this.connectionTimes['muc.joined']\r\n                    = window.performance.now();\r\n\r\n                logger.log('(TIME) MUC joined:\\t', now);\r\n\r\n                // set correct initial state of locked\r\n                if (this.password) {\r\n                    this.locked = true;\r\n                }\r\n\r\n                // Re-send presence in case any presence updates were added,\r\n                // but blocked from sending, during the join process.\r\n                // send the presence only if there was a modification after we had synced it\r\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\r\n                    this.sendPresence();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\r\n\r\n                // Now let's check the disco-info to retrieve the\r\n                // meeting Id if any\r\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\r\n            }\r\n        } else if (jid === undefined) {\r\n            logger.info('Ignoring member with undefined JID');\r\n        } else if (this.members[from] === undefined) {\r\n            // new participant\r\n            this.members[from] = member;\r\n            logger.log('entered', from, member);\r\n            hasStatusUpdate = member.status !== undefined;\r\n            hasVersionUpdate = member.version !== undefined;\r\n            if (member.isFocus) {\r\n                this._initFocus(from, jid);\r\n            } else {\r\n                // identity is being added to member joined, so external\r\n                // services can be notified for that (currently identity is\r\n                // not used inside library)\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_JOINED,\r\n                    from,\r\n                    member.nick,\r\n                    member.role,\r\n                    member.isHiddenDomain,\r\n                    member.statsID,\r\n                    member.status,\r\n                    member.identity,\r\n                    member.botType,\r\n                    member.jid);\r\n\r\n                // we are reporting the status with the join\r\n                // so we do not want a second event about status update\r\n                hasStatusUpdate = false;\r\n            }\r\n        } else {\r\n            // Presence update for existing participant\r\n            // Watch role change:\r\n            const memberOfThis = this.members[from];\r\n\r\n            if (memberOfThis.role !== member.role) {\r\n                memberOfThis.role = member.role;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\r\n            }\r\n\r\n            // affiliation changed\r\n            if (memberOfThis.affiliation !== member.affiliation) {\r\n                memberOfThis.affiliation = member.affiliation;\r\n            }\r\n\r\n            // fire event that botType had changed\r\n            if (memberOfThis.botType !== member.botType) {\r\n                memberOfThis.botType = member.botType;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n                    from,\r\n                    member.botType);\r\n            }\r\n\r\n            if (member.isFocus) {\r\n                // From time to time first few presences of the focus are not\r\n                // containing it's jid. That way we can mark later the focus\r\n                // member instead of not marking it at all and not starting the\r\n                // conference.\r\n                // FIXME: Maybe there is a better way to handle this issue. It\r\n                // seems there is some period of time in prosody that the\r\n                // configuration form is received but not applied. And if any\r\n                // participant joins during that period of time the first\r\n                // presence from the focus won't contain\r\n                // <item jid=\"focus...\" />.\r\n                memberOfThis.isFocus = true;\r\n                this._initFocus(from, jid);\r\n            }\r\n\r\n            // store the new display name\r\n            if (member.displayName) {\r\n                memberOfThis.displayName = member.displayName;\r\n            }\r\n\r\n            // update stored status message to be able to detect changes\r\n            if (memberOfThis.status !== member.status) {\r\n                hasStatusUpdate = true;\r\n                memberOfThis.status = member.status;\r\n            }\r\n\r\n            if (memberOfThis.version !== member.version) {\r\n                hasVersionUpdate = true;\r\n                memberOfThis.version = member.version;\r\n            }\r\n        }\r\n\r\n        // after we had fired member or room joined events, lets fire events\r\n        // for the rest info we got in presence\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'nick':\r\n                if (!member.isFocus) {\r\n                    const displayName\r\n                        = this.xmpp.options.displayJids\r\n                            ? Strophe.getResourceFromJid(from)\r\n                            : member.nick;\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\r\n                        from,\r\n                        displayName);\r\n                }\r\n                break;\r\n            case 'bridgeNotAvailable':\r\n                if (member.isFocus && !this.noBridgeAvailable) {\r\n                    this.noBridgeAvailable = true;\r\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\r\n                }\r\n                break;\r\n            case 'conference-properties':\r\n                if (member.isFocus) {\r\n                    const properties = {};\r\n\r\n                    for (let j = 0; j < node.children.length; j++) {\r\n                        const { attributes } = node.children[j];\r\n\r\n                        if (attributes && attributes.key) {\r\n                            properties[attributes.key] = attributes.value;\r\n                        }\r\n                    }\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\r\n                }\r\n                break;\r\n            case 'transcription-status': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n\r\n                const { status } = attributes;\r\n\r\n                if (status && status !== this.transcriptionStatus) {\r\n                    this.transcriptionStatus = status;\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n                        status\r\n                    );\r\n                }\r\n\r\n\r\n                break;\r\n            }\r\n            case 'call-control': {\r\n                const att = node.attributes;\r\n\r\n                if (!att) {\r\n                    break;\r\n                }\r\n                this.phoneNumber = att.phone || null;\r\n                this.phonePin = att.pin || null;\r\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\r\n                break;\r\n            }\r\n            default:\r\n                this.processNode(node, from);\r\n            }\r\n        }\r\n\r\n        // Trigger status message update if necessary\r\n        if (hasStatusUpdate) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.PRESENCE_STATUS,\r\n                from,\r\n                member.status);\r\n        }\r\n\r\n        if (hasVersionUpdate) {\r\n            logger.info(`Received version for ${jid}: ${member.version}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize some properties when the focus participant is verified.\r\n     * @param from jid of the focus\r\n     * @param mucJid the jid of the focus in the muc\r\n     */\r\n    _initFocus(from, mucJid) {\r\n        this.focusMucJid = from;\r\n\r\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\r\n    }\r\n\r\n    /**\r\n     * Sets the special listener to be used for \"command\"s whose name starts\r\n     * with \"jitsi_participant_\".\r\n     */\r\n    setParticipantPropertyListener(listener) {\r\n        this.participantPropertyListener = listener;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @param from\r\n     */\r\n    processNode(node, from) {\r\n        // make sure we catch all errors coming from any handler\r\n        // otherwise we can remove the presence handler from strophe\r\n        try {\r\n            let tagHandlers = this.presHandlers[node.tagName];\r\n\r\n            if (node.tagName.startsWith('jitsi_participant_')) {\r\n                tagHandlers = [ this.participantPropertyListener ];\r\n            }\r\n\r\n            if (tagHandlers) {\r\n                tagHandlers.forEach(handler => {\r\n                    handler(node, Strophe.getResourceFromJid(from), from);\r\n                });\r\n            }\r\n        } catch (e) {\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            logger.error(`Error processing:${node.tagName} node.`, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send text message to the other participants in the conference\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendMessage(message, elementName, nickname) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        // We are adding the message in a packet extension. If this element\r\n        // is different from 'body', we add a custom namespace.\r\n        // e.g. for 'json-message' extension of message stanza.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Send private text message to another participant of the conference\r\n     * @param id id/muc resource of the receiver\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendPrivateMessage(id, message, elementName, nickname) {\r\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\r\n            type: 'chat' });\r\n\r\n        // We are adding the message in packet. If this element is different\r\n        // from 'body', we add our custom namespace for the same.\r\n        // e.g. for 'json-message' message extension.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\r\n    }\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param subject\r\n     */\r\n    setSubject(subject) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        msg.c('subject', subject);\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Called when participant leaves.\r\n     * @param jid the jid of the participant that leaves\r\n     * @param skipEvents optional params to skip any events, including check\r\n     * whether this is the focus that left\r\n     */\r\n    onParticipantLeft(jid, skipEvents) {\r\n        delete this.lastPresences[jid];\r\n\r\n        if (skipEvents) {\r\n            return;\r\n        }\r\n\r\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\r\n\r\n        this.moderator.onMucMemberLeft(jid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceUnavailable(pres, from) {\r\n        // ignore presence\r\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\r\n            return true;\r\n        }\r\n\r\n        // room destroyed ?\r\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\r\n\r\n        if (destroySelect.length) {\r\n            let reason;\r\n            const reasonSelect\r\n                = $(pres).find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>destroy>reason');\r\n\r\n            if (reasonSelect.length) {\r\n                reason = reasonSelect.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Status code 110 indicates that this notification is \"self-presence\".\r\n        const isSelfPresence\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\r\n                        + 'status[code=\"110\"]')\r\n                .length;\r\n        const isKick\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>status[code=\"307\"]')\r\n                .length;\r\n        const membersKeys = Object.keys(this.members);\r\n\r\n        if (isKick) {\r\n            const actorSelect\r\n                = $(pres)\r\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\r\n\r\n            let actorNick;\r\n\r\n            if (actorSelect.length) {\r\n                actorNick = actorSelect.attr('nick');\r\n            }\r\n\r\n            // we first fire the kicked so we can show the participant\r\n            // who kicked, before notifying that participant left\r\n            // we fire kicked for us and for any participant kicked\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.KICKED,\r\n                isSelfPresence,\r\n                actorNick,\r\n                Strophe.getResourceFromJid(from));\r\n        }\r\n\r\n        if (isSelfPresence) {\r\n            // If the status code is 110 this means we're leaving and we would\r\n            // like to remove everyone else from our view, so we trigger the\r\n            // event.\r\n            membersKeys.forEach(jid => {\r\n                const member = this.members[jid];\r\n\r\n                delete this.members[jid];\r\n                this.onParticipantLeft(jid, member.isFocus);\r\n            });\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            // we fire muc_left only if this is not a kick,\r\n            // kick has both statuses 110 and 307.\r\n            if (!isKick) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\r\n            }\r\n        } else {\r\n            delete this.members[from];\r\n            this.onParticipantLeft(from, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     * @param from\r\n     */\r\n    onMessage(msg, from) {\r\n        const nick\r\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\r\n                .text()\r\n            || Strophe.getResourceFromJid(from);\r\n\r\n        const type = msg.getAttribute('type');\r\n\r\n        if (type === 'error') {\r\n            const errorMsg = $(msg).find('>error>text').text();\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\r\n\r\n            return true;\r\n        }\r\n\r\n        const txt = $(msg).find('>body').text();\r\n        const subject = $(msg).find('>subject');\r\n\r\n        if (subject.length) {\r\n            const subjectText = subject.text();\r\n\r\n            if (subjectText || subjectText === '') {\r\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\r\n                logger.log(`Subject is changed to ${subjectText}`);\r\n            }\r\n        }\r\n\r\n        // xep-0203 delay\r\n        let stamp = $(msg).find('>delay').attr('stamp');\r\n\r\n        if (!stamp) {\r\n            // or xep-0091 delay, UTC timestamp\r\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\r\n\r\n            if (stamp) {\r\n                // the format is CCYYMMDDThh:mm:ss\r\n                const dateParts\r\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\r\n\r\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\r\n            }\r\n        }\r\n\r\n        if (from === this.roomjid) {\r\n            let invite;\r\n\r\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\r\n                this.discoRoomInfo();\r\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\r\n                        && invite.length) {\r\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\r\n                let password;\r\n\r\n                if (passwordSelect && passwordSelect.length) {\r\n                    password = passwordSelect.text();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                    from, invite.attr('from'), txt, password);\r\n            }\r\n        }\r\n        const jsonMessage = $(msg).find('>json-message').text();\r\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\r\n\r\n        // We emit this event if the message is a valid json, and is not\r\n        // delivered after a delay, i.e. stamp is undefined.\r\n        // e.g. - subtitles should not be displayed if delayed.\r\n        if (parsedJson && stamp === undefined) {\r\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n                from, parsedJson);\r\n\r\n            return;\r\n        }\r\n\r\n        if (txt) {\r\n            if (type === 'chat') {\r\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            } else if (type === 'groupchat') {\r\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceError(pres, from) {\r\n        if ($(pres)\r\n                .find(\r\n                    '>error[type=\"auth\"]'\r\n                        + '>not-authorized['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            logger.log('on password required', from);\r\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\r\n        } else if ($(pres)\r\n                .find(\r\n                    '>error[type=\"cancel\"]'\r\n                        + '>not-allowed['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\r\n\r\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\r\n                // enter the room by replying with 'not-authorized'. This would\r\n                // result in reconnection from authorized domain.\r\n                // We're either missing Jicofo/Prosody config for anonymous\r\n                // domains or something is wrong.\r\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\r\n\r\n            } else {\r\n                logger.warn('onPresError ', pres);\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\r\n            }\r\n        } else if ($(pres).find('>error>service-unavailable').length) {\r\n            logger.warn('Maximum users limit for the room has been reached',\r\n                pres);\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\r\n        } else if ($(pres)\r\n            .find(\r\n                '>error[type=\"auth\"]'\r\n                + '>registration-required['\r\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\r\n\r\n            // let's extract the lobby jid from the custom field\r\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\r\n            let lobbyRoomJid;\r\n\r\n            if (lobbyRoomNode.length) {\r\n                lobbyRoomJid = lobbyRoomNode.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\r\n        } else {\r\n            logger.warn('onPresError ', pres);\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param affiliation\r\n     */\r\n    setAffiliation(jid, affiliation) {\r\n        const grantIQ = $iq({\r\n            to: this.roomjid,\r\n            type: 'set'\r\n        })\r\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n        .c('item', {\r\n            affiliation,\r\n            nick: Strophe.getResourceFromJid(jid)\r\n        })\r\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\r\n        .up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            grantIQ,\r\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\r\n            error => logger.log('Set affiliation of participant error: ', error));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    kick(jid) {\r\n        const kickIQ = $iq({ to: this.roomjid,\r\n            type: 'set' })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\r\n                role: 'none' })\r\n            .c('reason').t('You have been kicked.').up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            kickIQ,\r\n            result => logger.log('Kick participant with jid: ', jid, result),\r\n            error => logger.log('Kick participant error: ', error));\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onNotSupported\r\n     */\r\n    lockRoom(key, onSuccess, onError, onNotSupported) {\r\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\r\n        this.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res)\r\n                        .find(\r\n                            '>query>x[xmlns=\"jabber:x:data\"]'\r\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\r\n                        .length) {\r\n                    const formsubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        })\r\n                            .c('query', {\r\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\r\n                            });\r\n\r\n                    formsubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formsubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\r\n                        .c('value')\r\n                        .t(key)\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field',\r\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                        .c('value')\r\n                        .t(key === null || key.length === 0 ? '0' : '1')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if members only enabled\r\n                    if (this.membersOnlyEnabled) {\r\n                        formsubmit\r\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                            .c('value')\r\n                            .t('true')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    // Fixes a bug in prosody 0.9.+\r\n                    // https://prosody.im/issues/issue/373\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\r\n                        .c('value')\r\n                        .t('anyone')\r\n                        .up()\r\n                        .up();\r\n\r\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\r\n                } else {\r\n                    onNotSupported();\r\n                }\r\n            },\r\n            onError);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Turns off or on the members only config for the main room.\r\n     *\r\n     * @param {boolean} enabled - Whether to turn it on or off.\r\n     * @param onSuccess - optional callback.\r\n     * @param onError - optional callback.\r\n     */\r\n    setMembersOnly(enabled, onSuccess, onError) {\r\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\r\n            let sendGrantMembershipIq = false;\r\n\r\n            // first grant membership to all that are in the room\r\n            const grantMembership = $iq({ to: this.roomjid,\r\n                type: 'set' })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' });\r\n\r\n            Object.values(this.members).forEach(m => {\r\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\r\n                    grantMembership.c('item', {\r\n                        'affiliation': 'member',\r\n                        'jid': m.jid }).up();\r\n                    sendGrantMembershipIq = true;\r\n                }\r\n            });\r\n\r\n            if (sendGrantMembershipIq) {\r\n                this.xmpp.connection.sendIQ(grantMembership.up());\r\n            }\r\n        }\r\n\r\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\r\n\r\n        this.xmpp.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\r\n                    const formToSubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n                    formToSubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                        .c('value')\r\n                        .t(enabled ? 'true' : 'false')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if room is locked from other participant or we are locking it\r\n                    if (this.locked) {\r\n                        formToSubmit\r\n                            .c('field',\r\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                            .c('value')\r\n                            .t('1')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\r\n                } else {\r\n                    errorCallback(new Error('Setting members only room not supported!'));\r\n                }\r\n            },\r\n            errorCallback);\r\n    }\r\n\r\n    /**\r\n     * Adds the key to the presence map, overriding any previous value.\r\n     * @param key\r\n     * @param values\r\n     */\r\n    addToPresence(key, values) {\r\n        values.tagName = key;\r\n        this.removeFromPresence(key);\r\n        this.presMap.nodes.push(values);\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value from the presence map.\r\n     *\r\n     * @param {string} key - The key to find the value for.\r\n     * @returns {Object?}\r\n     */\r\n    getFromPresence(key) {\r\n        return this.presMap.nodes.find(node => key === node.tagName);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the presence map.\r\n     * @param key\r\n     */\r\n    removeFromPresence(key) {\r\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\r\n\r\n        this.presMap.nodes = nodes;\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    addPresenceListener(name, handler) {\r\n        if (typeof handler !== 'function') {\r\n            throw new Error('\"handler\" is not a function');\r\n        }\r\n        let tagHandlers = this.presHandlers[name];\r\n\r\n        if (!tagHandlers) {\r\n            this.presHandlers[name] = tagHandlers = [];\r\n        }\r\n        if (tagHandlers.indexOf(handler) === -1) {\r\n            tagHandlers.push(handler);\r\n        } else {\r\n            logger.warn(\r\n                `Trying to add the same handler more than once for: ${name}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    removePresenceListener(name, handler) {\r\n        const tagHandlers = this.presHandlers[name];\r\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\r\n\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (handlerIdx !== -1) {\r\n            tagHandlers.splice(handlerIdx, 1);\r\n        } else {\r\n            logger.warn(`Handler for: ${name} was not registered`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n     * focus.\r\n     * @param mucJid the full MUC address of the user to be checked.\r\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\r\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\r\n     * the MUC then <tt>null</tt> is returned.\r\n     */\r\n    isFocus(mucJid) {\r\n        const member = this.members[mucJid];\r\n\r\n        if (member) {\r\n            return member.isFocus;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    isModerator() {\r\n        return this.role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param peerJid\r\n     */\r\n    getMemberRole(peerJid) {\r\n        if (this.members[peerJid]) {\r\n            return this.members[peerJid].role;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setVideoMute(mute, callback) {\r\n        this.sendVideoInfoPresence(mute);\r\n        if (callback) {\r\n            callback(mute);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setAudioMute(mute, callback) {\r\n        return this.sendAudioInfoPresence(mute, callback);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addAudioInfoToPresence(mute) {\r\n        this.addToPresence(\r\n            'audiomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    sendAudioInfoPresence(mute, callback) {\r\n        this.addAudioInfoToPresence(mute);\r\n\r\n        // FIXME resend presence on CONNECTED\r\n        this.sendPresence();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addVideoInfoToPresence(mute) {\r\n        this.addToPresence(\r\n            'videomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    sendVideoInfoPresence(mute) {\r\n        this.addVideoInfoToPresence(mute);\r\n        this.sendPresence();\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given endpoint JID.\r\n     * @param {string} endpointId the endpoint ID mapped to the participant\r\n     * which corresponds to MUC nickname.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available or if\r\n     * the media type given is invalid.\r\n     */\r\n    getMediaPresenceInfo(endpointId, mediaType) {\r\n        // Will figure out current muted status by looking up owner's presence\r\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\r\n\r\n        if (!pres) {\r\n            // No presence available\r\n            return null;\r\n        }\r\n        const data = {\r\n            muted: false, // unmuted by default\r\n            videoType: undefined // no video type by default\r\n        };\r\n        let mutedNode = null;\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\r\n        } else if (mediaType === MediaType.VIDEO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\r\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\r\n\r\n            if (videoTypeNode.length > 0) {\r\n                data.videoType = videoTypeNode[0].value;\r\n            }\r\n        } else {\r\n            logger.error(`Unsupported media type: ${mediaType}`);\r\n\r\n            return null;\r\n        }\r\n\r\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the SIP calls are supported and false otherwise\r\n     */\r\n    isSIPCallingSupported() {\r\n        if (this.moderator) {\r\n            return this.moderator.isSipGatewayEnabled();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Dials a number.\r\n     * @param number the number\r\n     */\r\n    dial(number) {\r\n        return this.connection.rayo.dial(number, 'fromnumber',\r\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\r\n            this.focusMucJid);\r\n    }\r\n\r\n    /**\r\n     * Hangup an existing call\r\n     */\r\n    hangup() {\r\n        return this.connection.rayo.hangup();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Lobby}\r\n     */\r\n    getLobby() {\r\n        return this.lobby;\r\n    }\r\n\r\n    /**\r\n     * Returns the phone number for joining the conference.\r\n     */\r\n    getPhoneNumber() {\r\n        return this.phoneNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the pin for joining the conference with phone.\r\n     */\r\n    getPhonePin() {\r\n        return this.phonePin;\r\n    }\r\n\r\n    /**\r\n     * Returns the meeting unique ID if any came from backend.\r\n     *\r\n     * @returns {string} - The meeting ID.\r\n     */\r\n    getMeetingId() {\r\n        return this.meetingId;\r\n    }\r\n\r\n    /**\r\n     * Mutes remote participant.\r\n     * @param jid of the participant\r\n     * @param mute\r\n     */\r\n    muteParticipant(jid, mute) {\r\n        logger.info('set mute', mute);\r\n        const iqToFocus = $iq(\r\n            { to: this.focusMucJid,\r\n                type: 'set' })\r\n            .c('mute', {\r\n                xmlns: 'http://jitsi.org/jitmeet/audio',\r\n                jid\r\n            })\r\n            .t(mute.toString())\r\n            .up();\r\n\r\n        this.connection.sendIQ(\r\n            iqToFocus,\r\n            result => logger.log('set mute', result),\r\n            error => logger.log('set mute error', error));\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n\r\n        if (from !== this.focusMucJid) {\r\n            logger.warn('Ignored mute from non focus peer');\r\n\r\n            return;\r\n        }\r\n        const mute = $(iq).find('mute');\r\n\r\n        if (mute.length && mute.text() === 'true') {\r\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\r\n        } else {\r\n            // XXX Why do we support anything but muting? Why do we encode the\r\n            // value in the text of the element? Why do we use a separate XML\r\n            // namespace?\r\n            logger.warn('Ignoring a mute request which does not explicitly '\r\n                + 'specify a positive mute command.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean any listeners or resources, executed on leaving.\r\n     */\r\n    clean() {\r\n        this._removeConnListeners.forEach(remove => remove());\r\n        this._removeConnListeners = [];\r\n\r\n        this.joined = false;\r\n    }\r\n\r\n    /**\r\n     * Leaves the room. Closes the jingle session.\r\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\r\n     * less than 5s after sending presence unavailable. Otherwise the promise is\r\n     * rejected.\r\n     */\r\n    leave() {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\r\n            const eventEmitter = this.eventEmitter;\r\n\r\n            this.clean();\r\n\r\n            /**\r\n             *\r\n             * @param doReject\r\n             */\r\n            function onMucLeft(doReject = false) {\r\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\r\n                clearTimeout(timeout);\r\n                if (doReject) {\r\n                    // the timeout expired\r\n                    reject(new Error('The timeout for the confirmation about '\r\n                        + 'leaving the room expired.'));\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\r\n            this.doLeave();\r\n        });\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The command type for updating a lobby participant's e-mail address.\r\n *\r\n * @type {string}\r\n */\r\nconst EMAIL_COMMAND = 'email';\r\n\r\n/**\r\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\r\n * approving or denying access to participants from the lobby room.\r\n */\r\nexport default class Lobby {\r\n\r\n    /**\r\n     * Constructs lobby room.\r\n     *\r\n     * @param {ChatRoom} room the main room.\r\n     */\r\n    constructor(room) {\r\n        this.xmpp = room.xmpp;\r\n        this.mainRoom = room;\r\n\r\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.LOCAL_ROLE_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n            jid => {\r\n                this.lobbyRoomJid = jid;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Whether lobby is supported on backend.\r\n     *\r\n     * @returns {boolean} whether lobby is supported on backend.\r\n     */\r\n    isSupported() {\r\n        return this.xmpp.lobbySupported;\r\n    }\r\n\r\n    /**\r\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    enable() {\r\n        if (!this.isSupported()) {\r\n            return Promise.reject(new Error('Lobby not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.mainRoom.setMembersOnly(true, resolve, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disable() {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()\r\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.mainRoom.setMembersOnly(false);\r\n    }\r\n\r\n    /**\r\n     * Leaves the lobby room.\r\n     * @private\r\n     */\r\n    _leaveLobbyRoom() {\r\n        if (this.lobbyRoom) {\r\n            this.lobbyRoom.leave()\r\n                .then(() => {\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left!');\r\n                })\r\n                .catch(() => {}); // eslint-disable-line no-empty-function\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We had received a jid for the lobby room.\r\n     *\r\n     * @param jid the lobby room jid to join.\r\n     */\r\n    setLobbyRoomJid(jid) {\r\n        this.lobbyRoomJid = jid;\r\n    }\r\n\r\n    /**\r\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\r\n     * @private\r\n     */\r\n    _maybeJoinLobbyRoom() {\r\n        if (!this.isSupported()) {\r\n            return;\r\n        }\r\n\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\r\n            // join the lobby\r\n            this.join()\r\n                .then(() => logger.info('Joined lobby room'))\r\n                .catch(e => logger.error('Failed joining lobby', e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\r\n     *\r\n     * @param {string} username is required.\r\n     * @param {string} email is optional.\r\n     * @returns {Promise} resolves once we join the room.\r\n     */\r\n    join(displayName, email) {\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (!this.lobbyRoomJid) {\r\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\r\n        }\r\n\r\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\r\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\r\n\r\n        this.lobbyRoom = this.xmpp.createRoom(\r\n            roomName, {\r\n                customDomain,\r\n                disableDiscoInfo: true,\r\n                disableFocus: true,\r\n                enableLobby: false\r\n            }\r\n        );\r\n\r\n        if (displayName) {\r\n            // remove previously set nickname\r\n            this.lobbyRoom.removeFromPresence('nick');\r\n            this.lobbyRoom.addToPresence('nick', {\r\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n                value: displayName\r\n            });\r\n        }\r\n\r\n        if (isModerator) {\r\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\r\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\r\n            });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_JOINED,\r\n                // eslint-disable-next-line max-params\r\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\r\n                    // we need to ignore joins on lobby for participants that are already in the main room\r\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\r\n                        return;\r\n                    }\r\n\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n                        Strophe.getResourceFromJid(from),\r\n                        nick,\r\n                        identity ? identity.avatar : undefined\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n                        Strophe.getResourceFromJid(from)\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                () => {\r\n                    // let's make sure we emit that all lobby users had left\r\n                    Object.keys(this.lobbyRoom.members)\r\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\r\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left(destroyed)!');\r\n                });\r\n        } else {\r\n            // this should only be handled by those waiting in lobby\r\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\r\n                if (isSelfPresence) {\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    return;\r\n                }\r\n            });\r\n\r\n            // As there is still reference of the main room\r\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\r\n            // the invite message should be received directly to the xmpp conn in general\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                (roomJid, from, txt, invitePassword) => {\r\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\r\n                    if (roomJid === this.mainRoom.roomjid) {\r\n                        // we are now allowed let's join and leave lobby\r\n                        this.mainRoom.join(invitePassword);\r\n\r\n                        this._leaveLobbyRoom();\r\n                    }\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                (reason, jid) => {\r\n                    // we are receiving the jid of the main room\r\n                    // means we are invited to join, maybe lobby was disabled\r\n                    if (jid && jid === this.mainRoom.roomjid) {\r\n                        this.mainRoom.join();\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\r\n                });\r\n\r\n            // If participant retries joining shared password while waiting in the lobby\r\n            // and succeeds make sure we leave lobby\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.MUC_JOINED,\r\n                () => {\r\n                    this._leaveLobbyRoom();\r\n                });\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\r\n                resolve();\r\n\r\n                // send our email, as we do not handle this on initial presence we need a second one\r\n                if (email && !isModerator) {\r\n                    this.lobbyRoom.removeFromPresence(EMAIL_COMMAND);\r\n                    this.lobbyRoom.addToPresence(EMAIL_COMMAND, { value: email });\r\n                    this.lobbyRoom.sendPresence();\r\n                }\r\n            });\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\r\n\r\n            this.lobbyRoom.join();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    denyAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const jid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (jid) {\r\n            this.lobbyRoom.kick(jid);\r\n        } else {\r\n            logger.error(`Not found member for ${id} in lobby room.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    approveAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (memberRoomJid) {\r\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\r\n            const msgToSend\r\n                = $msg({ to: this.mainRoom.roomjid })\r\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\r\n                    .c('invite', { to: jid });\r\n\r\n            this.xmpp.connection.sendIQ(msgToSend,\r\n                () => { }, // eslint-disable-line no-empty-function\r\n                e => {\r\n                    logger.error(`Error sending invite for ${jid}`, e);\r\n                });\r\n        } else {\r\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\r\n        }\r\n    }\r\n}\r\n","/* global $, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport Settings from '../settings/Settings';\r\n\r\nconst AuthenticationEvents\r\n    = require('../../service/authentication/AuthenticationEvents');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n *\r\n * @param step\r\n */\r\nfunction createExpBackoffTimer(step) {\r\n    let count = 1;\r\n\r\n    return function(reset) {\r\n        // Reset call\r\n        if (reset) {\r\n            count = 1;\r\n\r\n            return;\r\n        }\r\n\r\n        // Calculate next timeout\r\n        const timeout = Math.pow(2, count - 1);\r\n\r\n        count += 1;\r\n\r\n        return timeout * step;\r\n    };\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n *\r\n * @param roomName\r\n * @param xmpp\r\n * @param emitter\r\n * @param options\r\n */\r\nexport default function Moderator(roomName, xmpp, emitter, options) {\r\n    this.roomName = roomName;\r\n    this.xmppService = xmpp;\r\n    this.getNextTimeout = createExpBackoffTimer(1000);\r\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\r\n\r\n    // External authentication stuff\r\n    this.externalAuthEnabled = false;\r\n    this.options = options;\r\n\r\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\r\n    // it will be enabled automatically if focus detects the component through\r\n    // service discovery.\r\n    this.sipGatewayEnabled\r\n        = this.options.connection.hosts\r\n            && this.options.connection.hosts.call_control !== undefined;\r\n\r\n    this.eventEmitter = emitter;\r\n\r\n    this.connection = this.xmppService.connection;\r\n\r\n    // FIXME: Message listener that talks to POPUP window\r\n    /**\r\n     *\r\n     * @param event\r\n     */\r\n    function listener(event) {\r\n        if (event.data && event.data.sessionId) {\r\n            if (event.origin !== window.location.origin) {\r\n                logger.warn(\r\n                    `Ignoring sessionId from different origin: ${\r\n                        event.origin}`);\r\n\r\n                return;\r\n            }\r\n            Settings.sessionId = event.data.sessionId;\r\n\r\n            // After popup is closed we will authenticate\r\n        }\r\n    }\r\n\r\n    // Register\r\n    if (window.addEventListener) {\r\n        window.addEventListener('message', listener, false);\r\n    } else {\r\n        window.attachEvent('onmessage', listener);\r\n    }\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\nModerator.prototype.isExternalAuthEnabled = function() {\r\n    return this.externalAuthEnabled;\r\n};\r\n\r\nModerator.prototype.isSipGatewayEnabled = function() {\r\n    return this.sipGatewayEnabled;\r\n};\r\n\r\nModerator.prototype.onMucMemberLeft = function(jid) {\r\n    logger.info(`Someone left is it focus ? ${jid}`);\r\n    const resource = Strophe.getResourceFromJid(jid);\r\n\r\n    if (resource === 'focus') {\r\n        logger.info(\r\n            'Focus has left the room - leaving conference');\r\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\r\n    }\r\n};\r\n\r\nModerator.prototype.setFocusUserJid = function(focusJid) {\r\n    if (!this.focusUserJid) {\r\n        this.focusUserJid = focusJid;\r\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\r\n    }\r\n};\r\n\r\nModerator.prototype.getFocusUserJid = function() {\r\n    return this.focusUserJid;\r\n};\r\n\r\nModerator.prototype.getFocusComponent = function() {\r\n    // Get focus component address\r\n    let focusComponent = this.options.connection.hosts.focus;\r\n\r\n    // If not specified use default:  'focus.domain'\r\n\r\n    if (!focusComponent) {\r\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\r\n    }\r\n\r\n    return focusComponent;\r\n};\r\n\r\nModerator.prototype.createConferenceIq = function() {\r\n    // Generate create conference IQ\r\n    const elem = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n\r\n    // Session Id used for authentication\r\n    const { sessionId } = Settings;\r\n    const machineUID = Settings.machineId;\r\n    const config = this.options.conference;\r\n\r\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\r\n\r\n    elem.c('conference', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': machineUID\r\n    });\r\n\r\n    if (sessionId) {\r\n        elem.attrs({ 'session-id': sessionId });\r\n    }\r\n    if (this.options.connection.enforcedBridge !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'enforcedBridge',\r\n                value: this.options.connection.enforcedBridge\r\n            }).up();\r\n    }\r\n\r\n    // Tell the focus we have Jigasi configured\r\n    if (this.options.connection.hosts !== undefined\r\n        && this.options.connection.hosts.call_control !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'call_control',\r\n                value: this.options.connection.hosts.call_control\r\n            }).up();\r\n    }\r\n    if (config.channelLastN !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'channelLastN',\r\n                value: config.channelLastN\r\n            }).up();\r\n    }\r\n    elem.c(\r\n        'property', {\r\n            name: 'disableRtx',\r\n            value: Boolean(config.disableRtx)\r\n        }).up();\r\n\r\n    if (config.enableTcc !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableTcc',\r\n                    value: Boolean(config.enableTcc)\r\n                }).up();\r\n    }\r\n    if (config.enableRemb !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableRemb',\r\n                    value: Boolean(config.enableRemb)\r\n                }).up();\r\n    }\r\n    if (config.minParticipants !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'minParticipants',\r\n                    value: config.minParticipants\r\n                }).up();\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'enableLipSync',\r\n            value: this.options.connection.enableLipSync === true\r\n        }).up();\r\n    if (config.audioPacketDelay !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'audioPacketDelay',\r\n                value: config.audioPacketDelay\r\n            }).up();\r\n    }\r\n    if (config.startBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startBitrate',\r\n                value: config.startBitrate\r\n            }).up();\r\n    }\r\n    if (config.minBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'minBitrate',\r\n                value: config.minBitrate\r\n            }).up();\r\n    }\r\n    if (config.testing && config.testing.octo\r\n        && typeof config.testing.octo.probability === 'number') {\r\n        if (Math.random() < config.testing.octo.probability) {\r\n            elem.c(\r\n                'property', {\r\n                    name: 'octo',\r\n                    value: true\r\n                }).up();\r\n        }\r\n    }\r\n\r\n    let openSctp;\r\n\r\n    switch (this.options.conference.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        openSctp = true;\r\n        break;\r\n    case 'websocket':\r\n        openSctp = false;\r\n        break;\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'openSctp',\r\n            value: openSctp\r\n        }).up();\r\n\r\n    if (config.opusMaxAverageBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'opusMaxAverageBitrate',\r\n                value: config.opusMaxAverageBitrate\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startAudioMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startAudioMuted',\r\n                value: this.options.conference.startAudioMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startVideoMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startVideoMuted',\r\n                value: this.options.conference.startVideoMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.stereo !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'stereo',\r\n                value: this.options.conference.stereo\r\n            }).up();\r\n    }\r\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'useRoomAsSharedDocumentName',\r\n                value: this.options.conference.useRoomAsSharedDocumentName\r\n            }).up();\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\n\r\nModerator.prototype.parseSessionId = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const sessionId = $(resultIq).find('conference').attr('session-id');\r\n\r\n    if (sessionId) {\r\n        logger.info(`Received sessionId:  ${sessionId}`);\r\n        Settings.sessionId = sessionId;\r\n    }\r\n};\r\n\r\nModerator.prototype.parseConfigOptions = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\r\n\r\n    const authenticationEnabled\r\n        = $(resultIq).find(\r\n            '>conference>property'\r\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\r\n\r\n    this.externalAuthEnabled = $(resultIq).find(\r\n        '>conference>property'\r\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(\r\n        `External authentication enabled: ${this.externalAuthEnabled}`);\r\n\r\n    if (!this.externalAuthEnabled) {\r\n        // We expect to receive sessionId in 'internal' authentication mode\r\n        this.parseSessionId(resultIq);\r\n    }\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\r\n\r\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\r\n        authenticationEnabled, authIdentity);\r\n\r\n    // Check if focus has auto-detected Jigasi component(this will be also\r\n    // included if we have passed our host from the config)\r\n    if ($(resultIq).find(\r\n        '>conference>property'\r\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\r\n        this.sipGatewayEnabled = true;\r\n    }\r\n\r\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\r\n};\r\n\r\n// FIXME We need to show the fact that we're waiting for the focus to the user\r\n// (or that the focus is not available)\r\n/**\r\n * Allocates the conference focus.\r\n *\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\r\n * rejected and it'll keep on pinging Jicofo forever.\r\n */\r\nModerator.prototype.allocateConferenceFocus = function() {\r\n    return new Promise(resolve => {\r\n        // Try to use focus user JID from the config\r\n        this.setFocusUserJid(this.options.connection.focusUserJid);\r\n\r\n        // Send create conference IQ\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => this._allocateConferenceFocusSuccess(result, resolve),\r\n            error => this._allocateConferenceFocusError(error, resolve));\r\n\r\n        // XXX We're pressed for time here because we're beginning a complex\r\n        // and/or lengthy conference-establishment process which supposedly\r\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\r\n        // decide to send our IQ.\r\n        this.connection.flush();\r\n    });\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\r\n * error result.\r\n *\r\n * @param error - the error result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\r\n    // If the session is invalid, remove and try again without session ID to get\r\n    // a new one\r\n    const invalidSession\r\n        = $(error).find('>error>session-invalid').length\r\n            || $(error).find('>error>not-acceptable').length;\r\n\r\n    if (invalidSession) {\r\n        logger.info('Session expired! - removing');\r\n        Settings.sessionId = undefined;\r\n    }\r\n    if ($(error).find('>error>graceful-shutdown').length) {\r\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\r\n\r\n        return;\r\n    }\r\n\r\n    // Check for error returned by the reservation system\r\n    const reservationErr = $(error).find('>error>reservation-error');\r\n\r\n    if (reservationErr.length) {\r\n        // Trigger error event\r\n        const errorCode = reservationErr.attr('error-code');\r\n        const errorTextNode = $(error).find('>error>text');\r\n        let errorMsg;\r\n\r\n        if (errorTextNode) {\r\n            errorMsg = errorTextNode.text();\r\n        }\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.RESERVATION_ERROR,\r\n            errorCode,\r\n            errorMsg);\r\n\r\n        return;\r\n    }\r\n\r\n    // Not authorized to create new room\r\n    if ($(error).find('>error>not-authorized').length) {\r\n        logger.warn('Unauthorized to start the conference', error);\r\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\r\n\r\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\r\n            // FIXME \"is external\" should come either from the focus or\r\n            // config.js\r\n            this.externalAuthEnabled = true;\r\n        }\r\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\r\n\r\n        return;\r\n    }\r\n    const waitMs = this.getNextErrorTimeout();\r\n    const errmsg = `Focus error, retry after ${waitMs}`;\r\n\r\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n    logger.error(errmsg, error);\r\n\r\n    // Show message\r\n    const focusComponent = this.getFocusComponent();\r\n    const retrySec = waitMs / 1000;\r\n\r\n    // FIXME: message is duplicated ? Do not show in case of session invalid\r\n    // which means just a retry\r\n\r\n    if (!invalidSession) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.FOCUS_DISCONNECTED,\r\n            focusComponent,\r\n            retrySec);\r\n    }\r\n\r\n    // Reset response timeout\r\n    this.getNextTimeout(true);\r\n    window.setTimeout(\r\n        () => this.allocateConferenceFocus().then(callback),\r\n        waitMs);\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\r\n * success (i.e. non-error) result.\r\n *\r\n * @param result - the success (i.e. non-error) result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusSuccess = function(\r\n        result,\r\n        callback) {\r\n    // Setup config options\r\n    this.parseConfigOptions(result);\r\n\r\n    // Reset the error timeout (because we haven't failed here).\r\n    this.getNextErrorTimeout(true);\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    if ($(result).find('conference').attr('ready') === 'true') {\r\n        // Reset the non-error timeout (because we've succeeded here).\r\n        this.getNextTimeout(true);\r\n\r\n        // Exec callback\r\n        callback();\r\n    } else {\r\n        const waitMs = this.getNextTimeout();\r\n\r\n        logger.info(`Waiting for the focus... ${waitMs}`);\r\n        window.setTimeout(\r\n            () => this.allocateConferenceFocus().then(callback),\r\n            waitMs);\r\n    }\r\n};\r\n\r\nModerator.prototype.authenticate = function() {\r\n    return new Promise((resolve, reject) => {\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => {\r\n                this.parseSessionId(result);\r\n                resolve();\r\n            },\r\n            errorIq => reject({\r\n                error: $(errorIq).find('iq>error :first')\r\n                    .prop('tagName'),\r\n                message: $(errorIq).find('iq>error>text')\r\n                    .text()\r\n            })\r\n        );\r\n    });\r\n};\r\n\r\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\r\n};\r\n\r\n/**\r\n *\r\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\r\n * {@link Moderator#getPopupLoginUrl}\r\n * @param urlCb\r\n * @param failureCb\r\n */\r\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'get' });\r\n    const attrs = {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': Settings.machineId\r\n    };\r\n    let str = 'auth url'; // for logger\r\n\r\n    if (popup) {\r\n        attrs.popup = true;\r\n        str = `POPUP ${str}`;\r\n    }\r\n    iq.c('login-url', attrs);\r\n\r\n    /**\r\n     * Implements a failure callback which reports an error message and an error\r\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\r\n     *\r\n     * @param {string} errmsg the error messsage to report\r\n     * @param {*} error the error to report (in addition to errmsg)\r\n     */\r\n    function reportError(errmsg, err) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n        logger.error(errmsg, err);\r\n        failureCb(err);\r\n    }\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let url = $(result).find('login-url').attr('url');\r\n\r\n            url = decodeURIComponent(url);\r\n            if (url) {\r\n                logger.info(`Got ${str}: ${url}`);\r\n                urlCb(url);\r\n            } else {\r\n                reportError(`Failed to get ${str} from the focus`, result);\r\n            }\r\n        },\r\n        reportError.bind(undefined, `Get ${str} error`)\r\n    );\r\n};\r\n\r\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\r\n};\r\n\r\nModerator.prototype.logout = function(callback) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n    const { sessionId } = Settings;\r\n\r\n    if (!sessionId) {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n    iq.c('logout', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        'session-id': sessionId\r\n    });\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let logoutUrl = $(result).find('logout').attr('logout-url');\r\n\r\n            if (logoutUrl) {\r\n                logoutUrl = decodeURIComponent(logoutUrl);\r\n            }\r\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\r\n            Settings.sessionId = undefined;\r\n            callback(logoutUrl);\r\n        },\r\n        error => {\r\n            const errmsg = 'Logout error';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg, error);\r\n        }\r\n    );\r\n};\r\n","const RandomUtil = require('./RandomUtil');\r\n\r\n/**\r\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\r\n * MIT License\r\n * http://github.com/marak/faker.js/\r\n *\r\n * @const\r\n */\r\nconst names = [\r\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\r\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\r\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\r\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\r\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\r\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\r\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\r\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\r\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\r\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\r\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\r\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\r\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\r\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\r\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\r\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\r\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\r\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\r\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\r\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\r\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\r\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\r\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\r\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\r\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\r\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\r\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\r\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\r\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\r\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\r\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\r\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\r\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\r\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\r\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\r\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\r\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\r\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\r\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\r\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\r\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\r\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\r\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\r\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\r\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\r\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\r\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\r\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\r\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\r\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\r\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\r\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\r\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\r\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\r\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\r\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\r\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\r\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\r\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\r\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\r\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\r\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\r\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\r\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\r\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\r\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\r\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\r\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\r\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\r\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\r\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\r\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\r\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\r\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\r\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\r\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\r\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\r\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\r\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\r\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\r\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\r\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\r\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\r\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\r\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\r\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\r\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\r\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\r\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\r\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\r\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\r\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\r\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\r\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\r\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\r\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\r\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\r\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\r\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\r\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\r\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\r\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\r\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\r\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\r\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\r\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\r\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\r\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\r\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\r\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\r\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\r\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\r\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\r\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\r\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\r\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\r\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\r\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\r\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\r\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\r\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\r\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\r\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\r\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\r\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\r\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\r\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\r\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\r\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\r\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\r\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\r\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\r\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\r\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\r\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\r\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\r\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\r\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\r\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\r\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\r\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\r\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\r\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\r\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\r\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\r\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\r\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\r\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\r\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\r\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\r\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\r\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\r\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\r\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\r\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\r\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\r\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\r\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\r\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\r\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\r\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\r\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\r\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\r\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\r\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\r\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\r\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\r\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\r\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\r\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\r\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\r\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\r\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\r\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\r\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\r\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\r\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\r\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\r\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\r\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\r\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\r\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\r\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\r\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\r\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\r\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\r\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\r\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\r\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\r\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\r\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\r\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\r\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\r\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\r\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\r\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\r\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\r\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\r\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\r\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\r\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\r\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\r\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\r\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\r\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\r\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\r\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\r\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\r\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\r\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\r\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\r\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\r\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\r\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\r\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\r\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\r\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\r\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\r\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\r\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\r\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\r\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\r\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\r\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\r\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\r\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\r\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\r\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\r\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\r\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\r\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\r\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\r\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\r\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\r\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\r\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\r\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\r\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\r\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\r\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\r\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\r\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\r\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\r\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\r\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\r\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\r\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\r\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\r\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\r\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\r\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\r\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\r\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\r\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\r\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\r\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\r\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\r\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\r\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\r\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\r\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\r\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\r\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\r\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\r\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\r\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\r\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\r\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\r\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\r\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\r\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\r\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\r\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\r\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\r\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\r\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\r\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\r\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\r\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\r\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\r\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\r\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\r\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\r\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\r\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\r\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\r\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\r\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\r\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\r\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\r\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\r\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\r\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\r\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\r\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\r\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\r\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\r\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\r\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\r\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\r\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\r\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\r\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\r\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\r\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\r\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\r\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\r\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\r\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\r\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\r\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\r\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\r\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\r\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\r\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\r\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\r\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\r\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\r\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\r\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\r\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\r\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\r\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\r\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\r\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\r\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\r\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\r\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\r\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\r\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\r\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\r\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\r\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\r\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\r\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\r\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\r\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\r\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\r\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\r\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\r\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\r\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\r\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\r\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\r\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\r\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\r\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\r\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\r\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\r\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\r\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\r\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\r\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\r\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\r\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\r\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\r\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\r\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\r\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\r\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\r\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\r\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\r\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\r\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\r\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\r\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\r\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\r\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\r\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\r\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\r\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\r\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\r\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\r\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\r\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\r\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\r\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\r\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\r\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\r\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\r\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\r\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\r\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\r\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\r\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\r\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\r\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\r\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\r\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\r\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\r\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\r\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\r\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\r\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\r\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\r\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\r\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\r\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\r\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\r\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\r\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\r\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\r\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\r\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\r\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\r\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\r\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\r\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\r\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\r\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\r\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\r\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\r\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\r\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\r\n    'Zoila', 'Zola', 'Zora', 'Zula'\r\n];\r\n\r\n/**\r\n * Generate random username.\r\n * @returns {string} random username\r\n */\r\nfunction generateUsername() {\r\n    const name = RandomUtil.randomElement(names);\r\n    const suffix = RandomUtil.randomAlphanumStr(3);\r\n\r\n    return `${name}-${suffix}`;\r\n}\r\n\r\nmodule.exports = {\r\n    generateUsername\r\n};\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport {\r\n    ACTION_JINGLE_TR_RECEIVED,\r\n    ACTION_JINGLE_TR_SUCCESS,\r\n    createJingleEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\nimport JingleSessionPC from './JingleSessionPC';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// XXX Strophe is build around the idea of chaining function calls so allow long\r\n// function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n *\r\n */\r\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Creates new <tt>JingleConnectionPlugin</tt>\r\n     * @param {XMPP} xmpp\r\n     * @param {EventEmitter} eventEmitter\r\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\r\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\r\n     */\r\n    constructor(xmpp, eventEmitter, iceConfig) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.eventEmitter = eventEmitter;\r\n        this.sessions = {};\r\n        this.jvbIceConfig = iceConfig.jvb;\r\n        this.p2pIceConfig = iceConfig.p2p;\r\n        this.mediaConstraints = {\r\n            offerToReceiveAudio: true,\r\n            offerToReceiveVideo: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.addHandler(this.onJingle.bind(this),\r\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onJingle(iq) {\r\n        const sid = $(iq).find('jingle').attr('sid');\r\n        const action = $(iq).find('jingle').attr('action');\r\n        const fromJid = iq.getAttribute('from');\r\n\r\n        // send ack first\r\n        const ack = $iq({ type: 'result',\r\n            to: fromJid,\r\n            id: iq.getAttribute('id')\r\n        });\r\n\r\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\r\n        let sess = this.sessions[sid];\r\n\r\n        if (action !== 'session-initiate') {\r\n            if (!sess) {\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                logger.warn('invalid session id', iq);\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n\r\n            // local jid is not checked\r\n            if (fromJid !== sess.remoteJid) {\r\n                logger.warn(\r\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n        } else if (sess !== undefined) {\r\n            // Existing session with same session id. This might be out-of-order\r\n            // if the sess.remoteJid is the same as from.\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('service-unavailable', {\r\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                })\r\n                .up();\r\n            logger.warn('duplicate session id', sid, iq);\r\n            this.connection.send(ack);\r\n\r\n            return true;\r\n        }\r\n        const now = window.performance.now();\r\n\r\n        // FIXME that should work most of the time, but we'd have to\r\n        // think how secure it is to assume that user with \"focus\"\r\n        // nickname is Jicofo.\r\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\r\n\r\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\r\n\r\n        switch (action) {\r\n        case 'session-initiate': {\r\n            logger.log('(TIME) received session-initiate:\\t', now);\r\n            const startMuted = $(iq).find('jingle>startmuted');\r\n\r\n            if (startMuted && startMuted.length > 0) {\r\n                const audioMuted = startMuted.attr('audio');\r\n                const videoMuted = startMuted.attr('video');\r\n\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\r\n                    audioMuted === 'true',\r\n                    videoMuted === 'true');\r\n            }\r\n\r\n            logger.info(\r\n                `Marking session from ${fromJid\r\n                } as ${isP2P ? '' : '*not*'} P2P`);\r\n\r\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\r\n\r\n            sess\r\n                = new JingleSessionPC(\r\n                    $(iq).find('jingle').attr('sid'),\r\n                    $(iq).attr('to'),\r\n                    fromJid,\r\n                    this.connection,\r\n                    this.mediaConstraints,\r\n\r\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\r\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\r\n                    JSON.parse(JSON.stringify(iceConfig)),\r\n                    isP2P,\r\n                    /* initiator */ false);\r\n\r\n            this.sessions[sess.sid] = sess;\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\r\n                sess, $(iq).find('>jingle'), now);\r\n            break;\r\n        }\r\n        case 'session-accept': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'content-modify': {\r\n            sess.modifyContents($(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'transport-info': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'session-terminate': {\r\n            logger.log('terminating...', sess.sid);\r\n            let reasonCondition = null;\r\n            let reasonText = null;\r\n\r\n            if ($(iq).find('>jingle>reason').length) {\r\n                reasonCondition\r\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\r\n                reasonText = $(iq).find('>jingle>reason>text').text();\r\n            }\r\n            this.terminate(sess.sid, reasonCondition, reasonText);\r\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\r\n                sess, reasonCondition, reasonText);\r\n            break;\r\n        }\r\n        case 'transport-replace':\r\n            logger.info('(TIME) Start transport replace:\\t', now);\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_TR_RECEIVED,\r\n                {\r\n                    p2p: isP2P,\r\n                    value: now\r\n                }));\r\n\r\n            sess.replaceTransport($(iq).find('>jingle'), () => {\r\n                const successTime = window.performance.now();\r\n\r\n                logger.info('(TIME) Transport replace success:\\t', successTime);\r\n                Statistics.sendAnalytics(createJingleEvent(\r\n                    ACTION_JINGLE_TR_SUCCESS,\r\n                    {\r\n                        p2p: isP2P,\r\n                        value: successTime\r\n                    }));\r\n            }, error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error('Transport replace failed', error);\r\n                sess.sendTransportReject();\r\n            });\r\n            break;\r\n        case 'addsource': // FIXME: proprietary, un-jingleish\r\n        case 'source-add': // FIXME: proprietary\r\n            sess.addRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        case 'removesource': // FIXME: proprietary, un-jingleish\r\n        case 'source-remove': // FIXME: proprietary\r\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        default:\r\n            logger.warn('jingle action not implemented', action);\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('bad-request',\r\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\r\n                .up();\r\n            break;\r\n        }\r\n        this.connection.send(ack);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\r\n     * connection, configured as 'initiator'.\r\n     * @param {string} me our JID\r\n     * @param {string} peer remote participant's JID\r\n     * @return {JingleSessionPC}\r\n     */\r\n    newP2PJingleSession(me, peer) {\r\n        const sess\r\n            = new JingleSessionPC(\r\n                RandomUtil.randomHexString(12),\r\n                me,\r\n                peer,\r\n                this.connection,\r\n                this.mediaConstraints,\r\n                this.p2pIceConfig,\r\n                /* P2P */ true,\r\n                /* initiator */ true);\r\n\r\n        this.sessions[sess.sid] = sess;\r\n\r\n        return sess;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sid\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    terminate(sid, reasonCondition, reasonText) {\r\n        if (this.sessions.hasOwnProperty(sid)) {\r\n            if (this.sessions[sid].state !== 'ended') {\r\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\r\n            }\r\n            delete this.sessions[sid];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getStunAndTurnCredentials() {\r\n        // get stun and turn configuration from server via xep-0215\r\n        // uses time-limited credentials as described in\r\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\r\n        //\r\n        // See https://modules.prosody.im/mod_turncredentials.html\r\n        // for a prosody module which implements this.\r\n        //\r\n        // Currently, this doesn't work with updateIce and therefore credentials\r\n        // with a long validity have to be fetched before creating the\r\n        // peerconnection.\r\n        // TODO: implement refresh via updateIce as described in\r\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\r\n        this.connection.sendIQ(\r\n            $iq({ type: 'get',\r\n                to: this.connection.domain })\r\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\r\n            res => {\r\n                const iceservers = [];\r\n\r\n                $(res).find('>services>service').each((idx, el) => {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    el = $(el);\r\n                    const dict = {};\r\n                    const type = el.attr('type');\r\n\r\n                    switch (type) {\r\n                    case 'stun':\r\n                        dict.urls = `stun:${el.attr('host')}`;\r\n                        if (el.attr('port')) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    case 'turn':\r\n                    case 'turns': {\r\n                        dict.urls = `${type}:`;\r\n                        const username = el.attr('username');\r\n\r\n                        // https://code.google.com/p/webrtc/issues/detail\r\n                        // ?id=1508\r\n\r\n                        if (username) {\r\n                            const match\r\n                                = navigator.userAgent.match(\r\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\r\n\r\n                            if (match && parseInt(match[2], 10) < 28) {\r\n                                dict.urls += `${username}@`;\r\n                            } else {\r\n                                // only works in M28\r\n                                dict.username = username;\r\n                            }\r\n                        }\r\n                        dict.urls += el.attr('host');\r\n                        const port = el.attr('port');\r\n\r\n                        if (port) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        const transport = el.attr('transport');\r\n\r\n                        if (transport && transport !== 'udp') {\r\n                            dict.urls += `?transport=${transport}`;\r\n                        }\r\n\r\n                        dict.credential = el.attr('password')\r\n                                || dict.credential;\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    }\r\n                    }\r\n                });\r\n\r\n                const options = this.xmpp.options;\r\n\r\n                // Shuffle ICEServers for loadbalancing\r\n                for (let i = iceservers.length - 1; i > 0; i--) {\r\n                    const j = Math.floor(Math.random() * (i + 1));\r\n                    const temp = iceservers[i];\r\n\r\n                    iceservers[i] = iceservers[j];\r\n                    iceservers[j] = temp;\r\n                }\r\n\r\n                if (options.useStunTurn) {\r\n                    let filter;\r\n\r\n                    if (options.useTurnUdp) {\r\n                        filter = s => s.urls.startsWith('turn');\r\n                    } else {\r\n                        // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\r\n                        filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\r\n                    }\r\n\r\n                    this.jvbIceConfig.iceServers = iceservers.filter(filter);\r\n                }\r\n\r\n                if (options.p2p && options.p2p.useStunTurn) {\r\n                    this.p2pIceConfig.iceServers = iceservers;\r\n                }\r\n\r\n            }, err => {\r\n                logger.warn('getting turn credentials failed', err);\r\n                logger.warn('is mod_turncredentials or similar installed?');\r\n            });\r\n\r\n        // implement push?\r\n    }\r\n\r\n    /**\r\n     * Returns the data saved in 'updateLog' in a format to be logged.\r\n     */\r\n    getLog() {\r\n        const data = {};\r\n\r\n        Object.keys(this.sessions).forEach(sid => {\r\n            const session = this.sessions[sid];\r\n            const pc = session.peerconnection;\r\n\r\n            if (pc && pc.updateLog) {\r\n                // FIXME: should probably be a .dump call\r\n                data[`jingle_${sid}`] = {\r\n                    updateLog: pc.updateLog,\r\n                    stats: pc.stats,\r\n                    url: window.location.href\r\n                };\r\n            }\r\n        });\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","import async from 'async';\r\n\r\n/**\r\n * A queue for async task execution.\r\n */\r\nexport default class AsyncQueue {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\r\n        this._stopped = false;\r\n    }\r\n\r\n    /**\r\n     * Removes any pending tasks from the queue.\r\n     */\r\n    clear() {\r\n        this._queue.kill();\r\n    }\r\n\r\n    /**\r\n     * Internal task processing implementation which makes things work.\r\n     */\r\n    _processQueueTasks(task, finishedCallback) {\r\n        task(finishedCallback);\r\n    }\r\n\r\n    /**\r\n     * The 'task' function will be given a callback it MUST call with either:\r\n     *  1) No arguments if it was successful or\r\n     *  2) An error argument if there was an error\r\n     * If the task wants to process the success or failure of the task, it\r\n     * should pass the {@code callback} to the push function, e.g.:\r\n     * queue.push(task, (err) => {\r\n     *     if (err) {\r\n     *         // error handling\r\n     *     } else {\r\n     *         // success handling\r\n     *     }\r\n     * });\r\n     *\r\n     * @param {function} task - The task to be executed. See the description above.\r\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\r\n     */\r\n    push(task, callback) {\r\n        if (this._stopped) {\r\n            callback && callback(new Error('The queue has been stopped'));\r\n\r\n            return;\r\n        }\r\n        this._queue.push(task, callback);\r\n    }\r\n\r\n    /**\r\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\r\n     * after the queue has been shutdown then the callback will be called with an error.\r\n     */\r\n    shutdown() {\r\n        this._stopped = true;\r\n    }\r\n}\r\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\r\n * Implements a simple hash code for a string (see\r\n * https://en.wikipedia.org/wiki/Java_hashCode()).\r\n *\r\n * @param {string} The string to return a hash of.\r\n * @return {Number} the integer hash code of the string.\r\n */\r\nfunction integerHash(string) {\r\n    if (!string) {\r\n        return 0;\r\n    }\r\n\r\n    let char, hash = 0, i;\r\n\r\n    for (i = 0; i < string.length; i++) {\r\n        char = string.charCodeAt(i);\r\n        hash += char * Math.pow(31, string.length - 1 - i);\r\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\r\n    }\r\n\r\n    return hash;\r\n}\r\n\r\nmodule.exports = { integerHash };\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as JingleSessionState from './JingleSessionState';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * JingleSession provides an API to manage a single Jingle session. We will\r\n * have different implementations depending on the underlying interface used\r\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\r\n */\r\nexport default class JingleSession extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSession</tt>.\r\n     * @param {string} sid the Jingle session identifier\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid the JID of the remote peer\r\n     * @param {XmppConnection} connection the XMPP connection\r\n     * @param {Object} mediaConstraints the media constraints object passed to\r\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\r\n     * @param {Object} iceConfig the ICE servers config object as defined by\r\n     * the WebRTC. Passed to the PeerConnection's constructor.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isInitiator) {\r\n        super();\r\n        this.sid = sid;\r\n        this.localJid = localJid;\r\n        this.remoteJid = remoteJid;\r\n        this.connection = connection;\r\n        this.mediaConstraints = mediaConstraints;\r\n        this.iceConfig = iceConfig;\r\n\r\n        /**\r\n         * Indicates whether this instance is an initiator or an answerer of\r\n         * the Jingle session.\r\n         * @type {boolean}\r\n         */\r\n        this.isInitiator = isInitiator;\r\n\r\n        /**\r\n         * Whether to use dripping or not. Dripping is sending trickle\r\n         * candidates not one-by-one.\r\n         */\r\n        this.usedrip = true;\r\n\r\n        /**\r\n         *  When dripping is used, stores ICE candidates which are to be sent.\r\n         */\r\n        this.dripContainer = [];\r\n\r\n        /**\r\n         * The chat room instance associated with the session.\r\n         * @type {ChatRoom}\r\n         */\r\n        this.room = null;\r\n\r\n        /**\r\n         * Jingle session state - uninitialized until {@link initialize} is\r\n         * called @type {JingleSessionState}\r\n         */\r\n        this.state = null;\r\n\r\n        /**\r\n         * The RTC service instance\r\n         * @type {RTC}\r\n         */\r\n        this.rtc = null;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's initiator.\r\n     * @return {string}\r\n     */\r\n    get initiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's responder.\r\n     * @return {string}\r\n     */\r\n    get responderJid() {\r\n        return this.isInitiator ? this.remoteJid : this.localJid;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Prepares this object to initiate a session.\r\n     * @param {ChatRoom} room the chat room for the conference associated with\r\n     * this session\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {object} options - the options, see implementing class's\r\n     * {@link #doInitialize} description for more details.\r\n     */\r\n    initialize(room, rtc, options) {\r\n        if (this.state !== null) {\r\n            const errmsg\r\n                = `attempt to initiate on session ${this.sid}\r\n                   in state ${this.state}`;\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.room = room;\r\n        this.rtc = rtc;\r\n        this.state = JingleSessionState.PENDING;\r\n        this.doInitialize(options);\r\n    }\r\n\r\n    /**\r\n     * The implementing class finishes initialization here. Called at the end of\r\n     * {@link initialize}.\r\n     * @param {Object} options - The options specific to the implementing class.\r\n     * @protected\r\n     */\r\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Adds the ICE candidates found in the 'contents' array as remote\r\n     * candidates?\r\n     * Note: currently only used on transport-info\r\n     *\r\n     * @param contents\r\n     */\r\n    addIceCandidates(contents) {}\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Returns current state of this <tt>JingleSession</tt> instance.\r\n     * @returns {JingleSessionState} the current state of this session instance.\r\n     */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Handles an 'add-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    addSources(contents) {}\r\n\r\n    /**\r\n     * Handles a 'remove-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    removeSources(contents) {}\r\n\r\n    /**\r\n     * Terminates this Jingle session by sending session-terminate\r\n     * @param success a callback called once the 'session-terminate' packet has\r\n     * been acknowledged with RESULT.\r\n     * @param failure a callback called when either timeout occurs or ERROR\r\n     * response is received.\r\n     * @param {Object} options\r\n     * @param {string} [options.reason] XMPP Jingle error condition\r\n     * @param {string} [options.reasonDescription] some meaningful error message\r\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\r\n     * terminated.\r\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\r\n     * sending session-terminate. It may not make sense to send it if the XMPP\r\n     * connection has been closed already or if the remote peer has disconnected\r\n     */\r\n    terminate(success, failure, options) {}\r\n\r\n    /**\r\n     * Handles an offer from the remote peer (prepares to accept a session).\r\n     * @param jingle the 'jingle' XML element.\r\n     * @param success callback called when we the incoming session has been\r\n     * accepted\r\n     * @param failure callback called when we fail for any reason, will supply\r\n     * error object with details(which is meant more to be printed to the logger\r\n     * than analysed in the code, as the error is unrecoverable anyway)\r\n     */\r\n    acceptOffer(jingle, success, failure) {}\r\n\r\n    /**\r\n     * Returns the JID of the initiator of the jingle session.\r\n     */\r\n    _getInitiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\r\n * the data from the MUC presence.\r\n */\r\nexport default class SignalingLayerImpl extends SignalingLayer {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * A map that stores SSRCs of remote streams. And is used only locally\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to jid\r\n         */\r\n        this.ssrcOwners = new Map();\r\n\r\n        /**\r\n         *\r\n         * @type {ChatRoom|null}\r\n         */\r\n        this.chatRoom = null;\r\n    }\r\n\r\n    /**\r\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\r\n     * @param {ChatRoom} room\r\n     */\r\n    setChatRoom(room) {\r\n        const oldChatRoom = this.chatRoom;\r\n\r\n        this.chatRoom = room;\r\n        if (oldChatRoom) {\r\n            oldChatRoom.removePresenceListener(\r\n                'audiomuted', this._audioMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videomuted', this._videoMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videoType', this._videoTypeHandler);\r\n        }\r\n        if (room) {\r\n            // SignalingEvents\r\n            this._audioMuteHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_MUTED_CHANGED,\r\n                    from, MediaType.AUDIO, node.value === 'true');\r\n            };\r\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n            this._videoMuteHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_MUTED_CHANGED,\r\n                    from, MediaType.VIDEO, node.value === 'true');\r\n            };\r\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n            this._videoTypeHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                    from, node.value);\r\n            };\r\n            room.addPresenceListener('videoType', this._videoTypeHandler);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) {\r\n        if (this.chatRoom) {\r\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\r\n        }\r\n        logger.error('Requested peer media info, before room was set');\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getSSRCOwner(ssrc) {\r\n        return this.ssrcOwners.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Set an SSRC owner.\r\n     * @param {number} ssrc an SSRC to be owned\r\n     * @param {string} endpointId owner's ID (MUC nickname)\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setSSRCOwner(ssrc, endpointId) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n        this.ssrcOwners.set(ssrc, endpointId);\r\n    }\r\n}\r\n","\r\nimport Listenable from '../../modules/util/Listenable';\r\n\r\n/**\r\n * An object that carries the info about specific media type advertised by\r\n * participant in the signaling channel.\r\n * @typedef {Object} PeerMediaInfo\r\n * @property {boolean} muted indicates if the media is currently muted\r\n * @property {VideoType|undefined} videoType the type of the video if applicable\r\n */\r\n\r\n/**\r\n * Interface used to expose the information carried over the signaling channel\r\n * which is not available to the RTC module in the media SDP.\r\n *\r\n * @interface SignalingLayer\r\n */\r\nexport default class SignalingLayer extends Listenable {\r\n\r\n    /**\r\n     * Obtains the endpoint ID for given SSRC.\r\n     * @param {number} ssrc the SSRC number.\r\n     * @return {string|null} the endpoint ID for given media SSRC.\r\n     */\r\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given MUC JID.\r\n     * @param {string} owner the MUC jid of the participant for whom\r\n     * {@link PeerMediaInfo} will be obtained.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available for given\r\n     * JID or if the media type given is invalid.\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n","import { Strophe } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n/**\r\n *  Logs raw stanzas and makes them available for download as JSON\r\n */\r\nclass StropheLogger extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.log = [];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.rawInput = this.logIncoming.bind(this);\r\n        this.connection.rawOutput = this.logOutgoing.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logIncoming(stanza) {\r\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logOutgoing(stanza) {\r\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Ping every 10 sec\r\n */\r\nconst PING_INTERVAL = 10000;\r\n\r\n/**\r\n * Ping timeout error after 15 sec of waiting.\r\n */\r\nconst PING_TIMEOUT = 15000;\r\n\r\n/**\r\n * Will close the connection after 3 consecutive ping errors.\r\n */\r\nconst PING_THRESHOLD = 3;\r\n\r\n/**\r\n * The number of timestamps of send pings to keep.\r\n * The current value is 2 minutes.\r\n * @type {number} number of timestamps.\r\n */\r\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\r\n\r\n/**\r\n * XEP-0199 ping plugin.\r\n *\r\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\r\n */\r\nexport default class PingConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Contructs new object\r\n     * @param {XMPP} xmpp the xmpp module.\r\n     * @constructor\r\n     */\r\n    constructor(xmpp) {\r\n        super();\r\n        this.failedPings = 0;\r\n        this.xmpp = xmpp;\r\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\r\n    }\r\n\r\n    /**\r\n     * Initializes the plugin. Method called by Strophe.\r\n     * @param connection Strophe connection instance.\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Sends \"ping\" to given <tt>jid</tt>\r\n     * @param jid the JID to which ping request will be sent.\r\n     * @param success callback called on success.\r\n     * @param error callback called on error.\r\n     * @param timeout ms how long are we going to wait for the response. On\r\n     * timeout <tt>error<//t> callback is called with undefined error argument.\r\n     */\r\n    ping(jid, success, error, timeout) {\r\n        this._addPingExecutionTimestamp();\r\n\r\n        const iq = $iq({\r\n            type: 'get',\r\n            to: jid\r\n        });\r\n\r\n        iq.c('ping', { xmlns: Strophe.NS.PING });\r\n        this.connection.sendIQ2(iq, { timeout })\r\n            .then(success, error);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Starts to send ping in given interval to specified remote JID.\r\n     * This plugin supports only one such task and <tt>stopInterval</tt>\r\n     * must be called before starting a new one.\r\n     * @param remoteJid remote JID to which ping requests will be sent to.\r\n     * @param interval task interval in ms.\r\n     */\r\n    startInterval(remoteJid, interval = PING_INTERVAL) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = window.setInterval(() => {\r\n            this.ping(remoteJid, () => {\r\n                this.failedPings = 0;\r\n            }, error => {\r\n                this.failedPings += 1;\r\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\r\n\r\n                if (this.failedPings >= PING_THRESHOLD) {\r\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                    logger.error(errmsg, error);\r\n\r\n                    // FIXME it doesn't help to disconnect when 3rd PING\r\n                    // times out, it only stops Strophe from retrying.\r\n                    // Not really sure what's the right thing to do in that\r\n                    // situation, but just closing the connection makes no\r\n                    // sense.\r\n                    // self.connection.disconnect();\r\n                } else {\r\n                    logger.warn(errmsg, error);\r\n                }\r\n            }, PING_TIMEOUT);\r\n        }, interval);\r\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\r\n    }\r\n\r\n    /**\r\n     * Stops current \"ping\"  interval task.\r\n     */\r\n    stopInterval() {\r\n        if (this.intervalId) {\r\n            window.clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n            this.failedPings = 0;\r\n            logger.info('Ping interval cleared');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the current time to the array of send ping timestamps.\r\n     * @private\r\n     */\r\n    _addPingExecutionTimestamp() {\r\n        this.pingExecIntervals.push(new Date().getTime());\r\n\r\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\r\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\r\n            this.pingExecIntervals.shift();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum time between the recent sent pings, if there is a\r\n     * big value it means the computer was inactive for some time(suspended).\r\n     * Checks the maximum gap between sending pings, considering and the\r\n     * current time. Trying to detect computer inactivity (sleep).\r\n     *\r\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\r\n     */\r\n    getPingSuspendTime() {\r\n        const pingIntervals = this.pingExecIntervals.slice();\r\n\r\n        // we need current time, as if ping was sent now\r\n        // if computer sleeps we will get correct interval after next\r\n        // scheduled ping, bet we sometimes need that interval before waiting\r\n        // for the next ping, on closing the connection on error.\r\n        pingIntervals.push(new Date().getTime());\r\n\r\n        let maxInterval = 0;\r\n        let previousTS = pingIntervals[0];\r\n\r\n        pingIntervals.forEach(e => {\r\n            const currentInterval = e - previousTS;\r\n\r\n            if (currentInterval > maxInterval) {\r\n                maxInterval = currentInterval;\r\n            }\r\n\r\n            previousTS = e;\r\n        });\r\n\r\n        // remove the interval between the ping sent\r\n        // this way in normal execution there is no suspend and the return\r\n        // will be 0 or close to 0.\r\n        maxInterval -= PING_INTERVAL;\r\n\r\n        // make sure we do not return less than 0\r\n        return Math.max(maxInterval, 0);\r\n    }\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\r\n\r\n/**\r\n *\r\n */\r\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        this.connection.addHandler(\r\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onRayo(iq) {\r\n        logger.info('Rayo IQ', iq);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param to\r\n     * @param from\r\n     * @param roomName\r\n     * @param roomPass\r\n     * @param focusMucJid\r\n     */\r\n    dial(to, from, roomName, roomPass, focusMucJid) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!focusMucJid) {\r\n                reject(new Error('Internal error!'));\r\n\r\n                return;\r\n            }\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: focusMucJid\r\n            });\r\n\r\n            req.c('dial', {\r\n                xmlns: RAYO_XMLNS,\r\n                to,\r\n                from\r\n            });\r\n            req.c('header', {\r\n                name: 'JvbRoomName',\r\n                value: roomName\r\n            }).up();\r\n\r\n            if (roomPass && roomPass.length) {\r\n                req.c('header', {\r\n                    name: 'JvbRoomPassword',\r\n                    value: roomPass\r\n                }).up();\r\n            }\r\n\r\n            this.connection.sendIQ(\r\n                req,\r\n                result => {\r\n                    logger.info('Dial result ', result);\r\n\r\n                    // eslint-disable-next-line newline-per-chained-call\r\n                    const resource = $(result).find('ref').attr('uri');\r\n\r\n                    this.callResource = resource.substr('xmpp:'.length);\r\n                    logger.info(`Received call resource: ${this.callResource}`);\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    logger.info('Dial error ', error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    hangup() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.callResource) {\r\n                reject(new Error('No call in progress'));\r\n                logger.warn('No call in progress');\r\n\r\n                return;\r\n            }\r\n\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: this.callResource\r\n            });\r\n\r\n            req.c('hangup', {\r\n                xmlns: RAYO_XMLNS\r\n            });\r\n\r\n            this.connection.sendIQ(req, result => {\r\n                logger.info('Hangup result ', result);\r\n                this.callResource = null;\r\n                resolve();\r\n            }, error => {\r\n                logger.info('Hangup error ', error);\r\n                this.callResource = null;\r\n                reject(new Error('Hangup error '));\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* global __filename */\r\n/**\r\n * Strophe logger implementation. Logs from level WARN and above.\r\n */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This is the last HTTP error status captured from Strophe debug logs.\r\n * The purpose of storing it is to distinguish between the network and\r\n * infrastructure reason for connection being dropped (see connectionHandler in\r\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\r\n * which means that the failure could be transient.\r\n *\r\n * FIXME in the latest Strophe (not released on npm) there is API to handle\r\n * particular HTTP errors, but there is no way to learn if the subsequent\r\n * request succeeded in order to tell if the error was one time incident or if\r\n * it was the reason for dropping the connection by Strophe (the connection is\r\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\r\n * details about the reason on why the connection stopped.\r\n *\r\n * @type {number}\r\n */\r\nlet lastErrorStatus = -1;\r\n\r\n/**\r\n * A regular expression used to catch Strophe's log message indicating that the\r\n * last BOSH request was successful. When there is such message seen the\r\n * {@link lastErrorStatus} will be set back to '-1'.\r\n * @type {RegExp}\r\n */\r\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\r\n\r\n/**\r\n * A regular expression used to capture the current value of the BOSH request\r\n * error status (HTTP error code or '0' or something else).\r\n * @type {RegExp}\r\n */\r\nconst lastErrorStatusRegExpr\r\n    = /request errored, status: (\\d+), number of errors: \\d+/;\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n\r\n    Strophe.log = function(level, msg) {\r\n        // Our global handler reports uncaught errors to the stats which may\r\n        // interpret those as partial call failure.\r\n        // Strophe log entry about secondary request timeout does not mean that\r\n        // it's a final failure(the request will be restarted), so we lower it's\r\n        // level here to a warning.\r\n        logger.trace('Strophe', level, msg);\r\n        if (typeof msg === 'string'\r\n                && msg.indexOf('Request ') !== -1\r\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            level = Strophe.LogLevel.WARN;\r\n        }\r\n\r\n        /* eslint-disable no-case-declarations */\r\n        switch (level) {\r\n        case Strophe.LogLevel.DEBUG:\r\n            // The log message which reports successful status is logged on\r\n            // Strophe's DEBUG level.\r\n            if (lastErrorStatus !== -1\r\n                    && resetLastErrorStatusRegExpr.test(msg)) {\r\n                logger.debug('Reset lastErrorStatus');\r\n                lastErrorStatus = -1;\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.WARN:\r\n            logger.warn(`Strophe: ${msg}`);\r\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\r\n\r\n            if (errStatusCapture && errStatusCapture.length === 2) {\r\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\r\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.ERROR:\r\n        case Strophe.LogLevel.FATAL:\r\n            // eslint-disable-next-line no-param-reassign\r\n            msg = `Strophe: ${msg}`;\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\r\n            logger.error(msg);\r\n            break;\r\n        }\r\n\r\n        /* eslint-enable no-case-declarations */\r\n    };\r\n\r\n    /**\r\n     * Returns error status (HTTP error code) of the last BOSH request.\r\n     *\r\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\r\n     * (this is a hack).\r\n     */\r\n    Strophe.getLastErrorStatus = function() {\r\n        return lastErrorStatus;\r\n    };\r\n\r\n    Strophe.getStatusString = function(status) {\r\n        switch (status) {\r\n        case Strophe.Status.BINDREQUIRED:\r\n            return 'BINDREQUIRED';\r\n        case Strophe.Status.ERROR:\r\n            return 'ERROR';\r\n        case Strophe.Status.CONNECTING:\r\n            return 'CONNECTING';\r\n        case Strophe.Status.CONNFAIL:\r\n            return 'CONNFAIL';\r\n        case Strophe.Status.AUTHENTICATING:\r\n            return 'AUTHENTICATING';\r\n        case Strophe.Status.AUTHFAIL:\r\n            return 'AUTHFAIL';\r\n        case Strophe.Status.CONNECTED:\r\n            return 'CONNECTED';\r\n        case Strophe.Status.DISCONNECTED:\r\n            return 'DISCONNECTED';\r\n        case Strophe.Status.DISCONNECTING:\r\n            return 'DISCONNECTING';\r\n        case Strophe.Status.ATTACHED:\r\n            return 'ATTACHED';\r\n        default:\r\n            return 'unknown';\r\n        }\r\n    };\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\r\n * with the videobridge.\r\n */\r\nexport default class BridgeChannel {\r\n    /**\r\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\r\n     * instance, or creates a WebSocket connection with the videobridge.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\r\n     * @param {function} senderVideoConstraintsChanged callback to call when the sender video constraints change.\r\n     */\r\n    constructor(peerconnection, wsUrl, emitter, senderVideoConstraintsChanged) {\r\n        if (!peerconnection && !wsUrl) {\r\n            throw new TypeError(\r\n                'At least peerconnection or wsUrl must be given');\r\n        } else if (peerconnection && wsUrl) {\r\n            throw new TypeError(\r\n                'Just one of peerconnection or wsUrl must be given');\r\n        }\r\n\r\n        if (peerconnection) {\r\n            logger.debug('constructor() with peerconnection');\r\n        } else {\r\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\r\n        }\r\n\r\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\r\n        // @type {RTCDataChannel|WebSocket}\r\n        this._channel = null;\r\n\r\n        // @type {EventEmitter}\r\n        this._eventEmitter = emitter;\r\n\r\n        // Whether a RTCDataChannel or WebSocket is internally used.\r\n        // @type {string} \"datachannel\" / \"websocket\"\r\n        this._mode = null;\r\n\r\n        // Indicates whether the connection retries are enabled or not.\r\n        this._areRetriesEnabled = false;\r\n\r\n        // Indicates whether the connection was closed from the client or not.\r\n        this._closedFromClient = false;\r\n\r\n        this._senderVideoConstraintsChanged = senderVideoConstraintsChanged;\r\n\r\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\r\n        // event.\r\n        if (peerconnection) {\r\n            const datachannel\r\n                = peerconnection.createDataChannel(\r\n                    'JVB data channel', {\r\n                        protocol: 'http://jitsi.org/protocols/colibri'\r\n                    });\r\n\r\n            // Handle the RTCDataChannel.\r\n            this._handleChannel(datachannel);\r\n            this._mode = 'datachannel';\r\n\r\n        // Otherwise create a WebSocket connection.\r\n        } else if (wsUrl) {\r\n            this._areRetriesEnabled = true;\r\n            this._wsUrl = wsUrl;\r\n            this._initWebSocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the web socket channel.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initWebSocket() {\r\n        // Create a WebSocket instance.\r\n        const ws = new WebSocket(this._wsUrl);\r\n\r\n        // Handle the WebSocket.\r\n        this._handleChannel(ws);\r\n        this._mode = 'websocket';\r\n    }\r\n\r\n    /**\r\n     * Starts the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _startConnectionRetries() {\r\n        let timeoutS = 1;\r\n\r\n        const reload = () => {\r\n            if (this.isOpen()) {\r\n                return;\r\n            }\r\n            this._initWebSocket(this._wsUrl);\r\n            timeoutS = Math.min(timeoutS * 2, 60);\r\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n        };\r\n\r\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n    }\r\n\r\n    /**\r\n     * Stops the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _stopConnectionRetries() {\r\n        if (this._retryTimeout) {\r\n            clearTimeout(this._retryTimeout);\r\n            this._retryTimeout = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries to establish the websocket connection after the connection was closed by the server.\r\n     *\r\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\r\n     * @returns {void}\r\n     */\r\n    _retryWebSocketConnection(closeEvent) {\r\n        if (!this._areRetriesEnabled) {\r\n            return;\r\n        }\r\n        const { code, reason } = closeEvent;\r\n\r\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\r\n        this._areRetriesEnabled = false;\r\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n            this._stopConnectionRetries();\r\n            this._areRetriesEnabled = true;\r\n        });\r\n        this._startConnectionRetries();\r\n    }\r\n\r\n    /**\r\n     * The channel mode.\r\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\r\n     */\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened channel.\r\n     */\r\n    close() {\r\n        this._closedFromClient = true;\r\n        this._stopConnectionRetries();\r\n        this._areRetriesEnabled = false;\r\n        if (this._channel) {\r\n            try {\r\n                this._channel.close();\r\n            } catch (error) {} // eslint-disable-line no-empty\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\r\n     * open.\r\n     * @return {boolean}\r\n     */\r\n    isOpen() {\r\n        return this._channel && (this._channel.readyState === 'open'\r\n            || this._channel.readyState === WebSocket.OPEN);\r\n    }\r\n\r\n    /**\r\n     * Sends message via the channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     * message. If \"\" the message will be sent to all participants.\r\n     * @param  {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendMessage(to, payload) {\r\n        this._send({\r\n            colibriClass: 'EndpointMessage',\r\n            msgPayload: payload,\r\n            to\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"lastN value changed\" message via the channel.\r\n     * @param {number} value The new value for lastN. -1 means unlimited.\r\n     */\r\n    sendSetLastNMessage(value) {\r\n        const jsonObject = {\r\n            colibriClass: 'LastNChangedEvent',\r\n            lastN: value\r\n        };\r\n\r\n        this._send(jsonObject);\r\n        logger.log(`Channel lastN set to: ${value}`);\r\n    }\r\n\r\n    /**\r\n     * Sends a \"pinned endpoint changed\" message via the channel.\r\n     * @param {string} endpointId The id of the pinned endpoint.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendPinnedEndpointMessage(endpointId) {\r\n        logger.log(\r\n            'sending pinned changed notification to the bridge for endpoint ',\r\n            endpointId);\r\n\r\n        this._send({\r\n            colibriClass: 'PinnedEndpointChangedEvent',\r\n            pinnedEndpoint: endpointId || null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"selected endpoints changed\" message via the channel.\r\n     *\r\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendSelectedEndpointsMessage(endpointIds) {\r\n        logger.log(\r\n            'sending selected changed notification to the bridge for endpoints',\r\n            endpointIds);\r\n\r\n        this._send({\r\n            colibriClass: 'SelectedEndpointsChangedEvent',\r\n            selectedEndpoints: endpointIds\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"receiver video constraint\" message via the channel.\r\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\r\n     * in pixels, this receiver is willing to receive\r\n     */\r\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\r\n        logger.log('sending a ReceiverVideoConstraint message with '\r\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraint',\r\n            maxFrameHeight: maxFrameHeightPixels\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set events on the given RTCDataChannel or WebSocket instance.\r\n     */\r\n    _handleChannel(channel) {\r\n        const emitter = this._eventEmitter;\r\n\r\n        channel.onopen = () => {\r\n            logger.info(`${this._mode} channel opened`);\r\n\r\n            // Code sample for sending string and/or binary data.\r\n            // Sends string message to the bridge:\r\n            //     channel.send(\"Hello bridge!\");\r\n            // Sends 12 bytes binary message to the bridge:\r\n            //     channel.send(new ArrayBuffer(12));\r\n\r\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\r\n        };\r\n\r\n        channel.onerror = event => {\r\n            // WS error events contain no information about the failure (this is available in the onclose event) and\r\n            // the event references the WS object itself, which causes hangs on mobile.\r\n            if (this._mode !== 'websocket') {\r\n                logger.error(`Channel error: ${event.message}`);\r\n            }\r\n        };\r\n\r\n        channel.onmessage = ({ data }) => {\r\n            // JSON object.\r\n            let obj;\r\n\r\n            try {\r\n                obj = JSON.parse(data);\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to parse channel message as JSON: ',\r\n                    data, error);\r\n\r\n                return;\r\n            }\r\n\r\n            const colibriClass = obj.colibriClass;\r\n\r\n            switch (colibriClass) {\r\n            case 'DominantSpeakerEndpointChangeEvent': {\r\n                // Endpoint ID from the Videobridge.\r\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\r\n\r\n                logger.info(\r\n                    'Channel new dominant speaker event: ',\r\n                    dominantSpeakerEndpoint);\r\n                emitter.emit(\r\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n                    dominantSpeakerEndpoint);\r\n                break;\r\n            }\r\n            case 'EndpointConnectivityStatusChangeEvent': {\r\n                const endpoint = obj.endpoint;\r\n                const isActive = obj.active === 'true';\r\n\r\n                logger.info(\r\n                    `Endpoint connection status changed: ${endpoint} active ? ${\r\n                        isActive}`);\r\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n                    endpoint, isActive);\r\n\r\n                break;\r\n            }\r\n            case 'EndpointMessage': {\r\n                emitter.emit(\r\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\r\n                    obj.msgPayload);\r\n\r\n                break;\r\n            }\r\n            case 'LastNEndpointsChangeEvent': {\r\n                // The new/latest list of last-n endpoint IDs.\r\n                const lastNEndpoints = obj.lastNEndpoints;\r\n\r\n                logger.info('Channel new last-n event: ',\r\n                    lastNEndpoints, obj);\r\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                    lastNEndpoints, obj);\r\n\r\n                break;\r\n            }\r\n            case 'SenderVideoConstraints': {\r\n                const videoConstraints = obj.videoConstraints;\r\n\r\n                if (videoConstraints) {\r\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\r\n                    this._senderVideoConstraintsChanged(videoConstraints);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                logger.debug('Channel JSON-formatted message: ', obj);\r\n\r\n                // The received message appears to be appropriately formatted\r\n                // (i.e. is a JSON object which assigns a value to the\r\n                // mandatory property colibriClass) so don't just swallow it,\r\n                // expose it to public consumption.\r\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\r\n            }\r\n            }\r\n        };\r\n\r\n        channel.onclose = event => {\r\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\r\n\r\n            if (this._mode === 'websocket') {\r\n                if (!this._closedFromClient) {\r\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\r\n                    this._retryWebSocketConnection(event);\r\n                }\r\n            }\r\n\r\n            // Remove the channel.\r\n            this._channel = null;\r\n        };\r\n\r\n        // Store the channel.\r\n        this._channel = channel;\r\n    }\r\n\r\n    /**\r\n     * Sends passed object via the channel.\r\n     * @param {object} jsonObject The object that will be sent.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    _send(jsonObject) {\r\n        const channel = this._channel;\r\n\r\n        if (!this.isOpen()) {\r\n            logger.error('Bridge Channel send: no opened channel.');\r\n            throw new Error('No opened channel');\r\n        }\r\n\r\n        channel.send(JSON.stringify(jsonObject));\r\n    }\r\n}\r\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/* global __filename, RTCSessionDescription */\r\n\r\nimport { Interop } from '@jitsi/sdp-interop';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RtxModifier from '../xmpp/RtxModifier';\r\nimport SDP from '../xmpp/SDP';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\nimport SdpConsistency from '../xmpp/SdpConsistency';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\n\r\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\r\nimport LocalSdpMunger from './LocalSdpMunger';\r\nimport RTC from './RTC';\r\nimport RTCUtils from './RTCUtils';\r\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\r\n\r\n// FIXME SDP tools should end up in some kind of util module\r\n\r\nconst logger = getLogger(__filename);\r\nconst MAX_BITRATE = 2500000;\r\nconst DESKSTOP_SHARE_RATE = 500000;\r\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\r\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Creates new instance of 'TraceablePeerConnection'.\r\n *\r\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\r\n * @param {number} id the peer connection id assigned by the parent RTC module.\r\n * @param {SignalingLayer} signalingLayer the signaling layer instance\r\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\r\n * @param {object} constraints WebRTC 'PeerConnection' constraints\r\n * @param {boolean} isP2P indicates whether or not the new instance will be used\r\n * in a peer to peer connection\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\r\n * the simulcast.\r\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\r\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\r\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\r\n * stream.\r\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n *      disabled by removing it from the SDP.\r\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\r\n * over other video codecs.\r\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n *\r\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\r\n * debug the peer connection. Since many other responsibilities have been added\r\n * it would make sense to extract a separate class from it and come up with\r\n * a more suitable name.\r\n *\r\n * @constructor\r\n */\r\nexport default function TraceablePeerConnection(\r\n        rtc,\r\n        id,\r\n        signalingLayer,\r\n        iceConfig,\r\n        constraints,\r\n        isP2P,\r\n        options) {\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.audioTransferActive = !(options.startSilent === true);\r\n\r\n    /**\r\n     * The DTMF sender instance used to send DTMF tones.\r\n     *\r\n     * @type {RTCDTMFSender|undefined}\r\n     * @private\r\n     */\r\n    this._dtmfSender = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} TouchToneRequest\r\n     * @property {string} tones - The DTMF tones string as defined by\r\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n     * @property {number} duration - The amount of time in milliseconds that\r\n     * each DTMF should last.\r\n     * @property {string} interToneGap - The length of time in miliseconds to\r\n     * wait between tones.\r\n     */\r\n    /**\r\n     * TouchToneRequests which are waiting to be played. This queue is filled\r\n     * if there are touch tones currently being played.\r\n     *\r\n     * @type {Array<TouchToneRequest>}\r\n     * @private\r\n     */\r\n    this._dtmfTonesQueue = [];\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.videoTransferActive = true;\r\n\r\n    /**\r\n     * The parent instance of RTC service which created this\r\n     * <tt>TracablePeerConnection</tt>.\r\n     * @type {RTC}\r\n     */\r\n    this.rtc = rtc;\r\n\r\n    /**\r\n     * The peer connection identifier assigned by the RTC module.\r\n     * @type {number}\r\n     */\r\n    this.id = id;\r\n\r\n    /**\r\n     * Indicates whether or not this instance is used in a peer to peer\r\n     * connection.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2P = isP2P;\r\n\r\n    // FIXME: We should support multiple streams per jid.\r\n    /**\r\n     * The map holds remote tracks associated with this peer connection.\r\n     * It maps user's JID to media type and remote track\r\n     * (one track per media type per user's JID).\r\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\r\n     */\r\n    this.remoteTracks = new Map();\r\n\r\n    /**\r\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, JitsiLocalTrack>}\r\n     */\r\n    this.localTracks = new Map();\r\n\r\n    /**\r\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\r\n     * the underlying WebRTC PeerConnection.\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    this._addedStreams = [];\r\n\r\n    /**\r\n     * @typedef {Object} TPCGroupInfo\r\n     * @property {string} semantics the SSRC groups semantics\r\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\r\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\r\n     * on...\r\n     */\r\n    /**\r\n     * @typedef {Object} TPCSSRCInfo\r\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\r\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\r\n     * groups\r\n     */\r\n    /**\r\n     * Holds the info about local track's SSRCs mapped per their\r\n     * {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, TPCSSRCInfo>}\r\n     */\r\n    this.localSSRCs = new Map();\r\n\r\n    /**\r\n     * The local ICE username fragment for this session.\r\n     */\r\n    this.localUfrag = null;\r\n\r\n    /**\r\n     * The remote ICE username fragment for this session.\r\n     */\r\n    this.remoteUfrag = null;\r\n\r\n    /**\r\n     * The signaling layer which operates this peer connection.\r\n     * @type {SignalingLayer}\r\n     */\r\n    this.signalingLayer = signalingLayer;\r\n\r\n    // SignalingLayer listeners\r\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n        this._peerVideoTypeChanged);\r\n\r\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_MUTED_CHANGED,\r\n        this._peerMutedChanged);\r\n    this.options = options;\r\n\r\n    this.peerconnection\r\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\r\n    this.tpcUtils = new TPCUtils(this);\r\n    this.updateLog = [];\r\n    this.stats = {};\r\n    this.statsinterval = null;\r\n\r\n    /**\r\n     * @type {number} The max number of stats to keep in this.stats. Limit to\r\n     * 300 values, i.e. 5 minutes; set to 0 to disable\r\n     */\r\n    this.maxstats = options.maxstats;\r\n\r\n    this.interop = new Interop();\r\n    const Simulcast = require('@jitsi/sdp-simulcast');\r\n\r\n    this.simulcast = new Simulcast(\r\n        {\r\n            numOfLayers: SIM_LAYER_RIDS.length,\r\n            explodeRemoteSimulcast: false,\r\n            usesUnifiedPlan: browser.usesUnifiedPlan()\r\n        });\r\n    this.sdpConsistency = new SdpConsistency(this.toString());\r\n\r\n    /**\r\n     * Munges local SDP provided to the Jingle Session in order to prevent from\r\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\r\n     * @type {LocalSdpMunger}\r\n     */\r\n    this.localSdpMunger = new LocalSdpMunger(this);\r\n\r\n    /**\r\n     * TracablePeerConnection uses RTC's eventEmitter\r\n     * @type {EventEmitter}\r\n     */\r\n    this.eventEmitter = rtc.eventEmitter;\r\n    this.rtxModifier = new RtxModifier();\r\n\r\n    /**\r\n     * The height constraint applied on the video sender.\r\n     */\r\n    this.senderVideoMaxHeight = null;\r\n\r\n    // override as desired\r\n    this.trace = (what, info) => {\r\n        logger.debug(what, info);\r\n\r\n        this.updateLog.push({\r\n            time: new Date(),\r\n            type: what,\r\n            value: info || ''\r\n        });\r\n    };\r\n    this.onicecandidate = null;\r\n    this.peerconnection.onicecandidate = event => {\r\n        this.trace(\r\n            'onicecandidate',\r\n            JSON.stringify(event.candidate, null, ' '));\r\n\r\n        if (this.onicecandidate !== null) {\r\n            this.onicecandidate(event);\r\n        }\r\n    };\r\n\r\n    // Use stream events in plan-b and track events in unified plan.\r\n    if (browser.usesPlanB()) {\r\n        this.peerconnection.onaddstream\r\n            = event => this._remoteStreamAdded(event.stream);\r\n        this.peerconnection.onremovestream\r\n            = event => this._remoteStreamRemoved(event.stream);\r\n    } else {\r\n        this.peerconnection.ontrack = event => {\r\n            const stream = event.streams[0];\r\n\r\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\r\n            stream.onremovetrack = evt => {\r\n                this._remoteTrackRemoved(stream, evt.track);\r\n            };\r\n        };\r\n    }\r\n    this.onsignalingstatechange = null;\r\n    this.peerconnection.onsignalingstatechange = event => {\r\n        this.trace('onsignalingstatechange', this.signalingState);\r\n        if (this.onsignalingstatechange !== null) {\r\n            this.onsignalingstatechange(event);\r\n        }\r\n    };\r\n    this.oniceconnectionstatechange = null;\r\n    this.peerconnection.oniceconnectionstatechange = event => {\r\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\r\n        if (this.oniceconnectionstatechange !== null) {\r\n            this.oniceconnectionstatechange(event);\r\n        }\r\n    };\r\n    this.onnegotiationneeded = null;\r\n    this.peerconnection.onnegotiationneeded = event => {\r\n        this.trace('onnegotiationneeded');\r\n        if (this.onnegotiationneeded !== null) {\r\n            this.onnegotiationneeded(event);\r\n        }\r\n    };\r\n    this.ondatachannel = null;\r\n    this.peerconnection.ondatachannel = event => {\r\n        this.trace('ondatachannel');\r\n        if (this.ondatachannel !== null) {\r\n            this.ondatachannel(event);\r\n        }\r\n    };\r\n\r\n    if (this.maxstats) {\r\n        this.statsinterval = window.setInterval(() => {\r\n            this.getStats(stats => {\r\n                if (stats.result\r\n                    && typeof stats.result === 'function') {\r\n                    const results = stats.result();\r\n\r\n                    for (let i = 0; i < results.length; ++i) {\r\n                        const res = results[i];\r\n\r\n                        res.names().forEach(name => {\r\n                            this._processStat(res, name, res.stat(name));\r\n                        });\r\n                    }\r\n                } else {\r\n                    stats.forEach(r => this._processStat(r, '', r));\r\n                }\r\n            }, () => {\r\n\r\n                // empty error callback\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    logger.info(`Create new ${this}`);\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Process stat and adds it to the array of stats we store.\r\n * @param report the current stats report.\r\n * @param name the name of the report, if available\r\n * @param statValue the value to add.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processStat\r\n    = function(report, name, statValue) {\r\n        const id = `${report.id}-${name}`;\r\n        let s = this.stats[id];\r\n        const now = new Date();\r\n\r\n        if (!s) {\r\n            this.stats[id] = s = {\r\n                startTime: now,\r\n                endTime: now,\r\n                values: [],\r\n                times: []\r\n            };\r\n        }\r\n        s.values.push(statValue);\r\n        s.times.push(now.getTime());\r\n        if (s.values.length > this.maxstats) {\r\n            s.values.shift();\r\n            s.times.shift();\r\n        }\r\n        s.endTime = now;\r\n    };\r\n\r\n/**\r\n * Returns a string representation of a SessionDescription object.\r\n */\r\nconst dumpSDP = function(description) {\r\n    if (typeof description === 'undefined' || description === null) {\r\n        return '';\r\n    }\r\n\r\n    return `type: ${description.type}\\r\\n${description.sdp}`;\r\n};\r\n\r\n\r\n/**\r\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\r\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\r\n * succeeded and is up and running. We never see \"completed\" state for\r\n * the JVB connection, but it started appearing for the P2P one. This method\r\n * allows to adapt old logic to this new situation.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.getConnectionState = function() {\r\n    const state = this.peerconnection.iceConnectionState;\r\n\r\n    if (state === 'completed') {\r\n        return 'connected';\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\n/**\r\n * Obtains the media direction for given {@link MediaType}. The method takes\r\n * into account whether or not there are any local tracks for media and\r\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\r\n * @param {MediaType} mediaType\r\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\r\n * etc.) which should be used when setting local description on the peer\r\n * connection.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\r\n        mediaType) {\r\n    let mediaTransferActive = true;\r\n\r\n    if (mediaType === MediaType.AUDIO) {\r\n        mediaTransferActive = this.audioTransferActive;\r\n    } else if (mediaType === MediaType.VIDEO) {\r\n        mediaTransferActive = this.videoTransferActive;\r\n    }\r\n    if (mediaTransferActive) {\r\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\r\n    }\r\n\r\n    return 'inactive';\r\n};\r\n\r\n/**\r\n * Tells whether or not this TPC instance is using Simulcast.\r\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\r\n * <tt>false</tt> if it's turned off.\r\n */\r\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\r\n    return !this.options.disableSimulcast;\r\n};\r\n\r\n/**\r\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\r\n        endpointId,\r\n        videoType) {\r\n    // Check if endpointId has a value to avoid action on random track\r\n    if (!endpointId) {\r\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\r\n\r\n        return;\r\n    }\r\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\r\n\r\n    if (videoTrack.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        videoTrack[0]._setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote track mute / unmute events.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new mute state\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerMutedChanged = function(\r\n        endpointId,\r\n        mediaType,\r\n        isMuted) {\r\n    // Check if endpointId is a value to avoid doing action on all remote tracks\r\n    if (!endpointId) {\r\n        logger.error('On peerMuteChanged - no endpoint ID');\r\n\r\n        return;\r\n    }\r\n    const track = this.getRemoteTracks(endpointId, mediaType);\r\n\r\n    if (track.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        track[0].setMute(isMuted);\r\n    }\r\n};\r\n\r\n/**\r\n * Obtains audio levels of the remote audio tracks by getting the source\r\n * information on the RTCRtpReceivers. The information relevant to the ssrc\r\n * is updated each time a RTP packet constaining the ssrc is received.\r\n * @returns {Object} containing ssrc and audio level information as a\r\n * key-value pair.\r\n */\r\nTraceablePeerConnection.prototype.getAudioLevels = function() {\r\n    const audioLevels = {};\r\n    const audioReceivers = this.peerconnection.getReceivers()\r\n        .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO);\r\n\r\n    audioReceivers.forEach(remote => {\r\n        const ssrc = remote.getSynchronizationSources();\r\n\r\n        if (ssrc && ssrc.length) {\r\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\r\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\r\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\r\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\r\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\r\n        }\r\n    });\r\n\r\n    return audioLevels;\r\n};\r\n\r\n/**\r\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\r\n * argument is omitted the list of all local tracks will be returned.\r\n * @param {MediaType} [mediaType]\r\n * @return {Array<JitsiLocalTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = Array.from(this.localTracks.values());\r\n\r\n    if (mediaType !== undefined) {\r\n        tracks = tracks.filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\r\n * any local tracks for given <tt>mediaType</tt>.\r\n * @param {MediaType} mediaType\r\n * @return {boolean}\r\n */\r\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\r\n    if (!mediaType) {\r\n        throw new Error('\"mediaType\" is required');\r\n    }\r\n\r\n    return this.getLocalTracks(mediaType).length > 0;\r\n};\r\n\r\n/**\r\n * Obtains all remote tracks currently known to this PeerConnection instance.\r\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\r\n * @param {MediaType} [mediaType] the remote tracks will be filtered\r\n * by their media type if this argument is specified.\r\n * @return {Array<JitsiRemoteTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getRemoteTracks = function(\r\n        endpointId,\r\n        mediaType) {\r\n    const remoteTracks = [];\r\n    const endpoints\r\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\r\n\r\n    for (const endpoint of endpoints) {\r\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\r\n\r\n        if (!endpointTrackMap) {\r\n\r\n            // Otherwise an empty Map() would have to be allocated above\r\n            // eslint-disable-next-line no-continue\r\n            continue;\r\n        }\r\n\r\n        for (const trackMediaType of endpointTrackMap.keys()) {\r\n            // per media type filtering\r\n            if (!mediaType || mediaType === trackMediaType) {\r\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\r\n\r\n                if (mediaTrack) {\r\n                    remoteTracks.push(mediaTrack);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return remoteTracks;\r\n};\r\n\r\n/**\r\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\r\n * local and remote tracks bound to this instance.\r\n * @param {number} ssrc\r\n * @return {JitsiTrack|null}\r\n */\r\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\r\n    if (typeof ssrc !== 'number') {\r\n        throw new Error(`SSRC ${ssrc} is not a number`);\r\n    }\r\n    for (const localTrack of this.localTracks.values()) {\r\n        if (this.getLocalSSRC(localTrack) === ssrc) {\r\n            return localTrack;\r\n        }\r\n    }\r\n    for (const remoteTrack of this.getRemoteTracks()) {\r\n        if (remoteTrack.getSSRC() === ssrc) {\r\n            return remoteTrack;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\r\n * both local and remote tracks bound to this instance.\r\n * @param {string} id\r\n * @return {number|null}\r\n */\r\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\r\n\r\n    const findTrackById = track => track.getTrack().id === id;\r\n    const localTrack = this.getLocalTracks().find(findTrackById);\r\n\r\n    if (localTrack) {\r\n        return this.getLocalSSRC(localTrack);\r\n    }\r\n\r\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\r\n\r\n    if (remoteTrack) {\r\n        return remoteTrack.getSSRC();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Called when new remote MediaStream is added to the PeerConnection.\r\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\r\n    const streamId = RTC.getStreamID(stream);\r\n\r\n    if (!RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Bind 'addtrack'/'removetrack' event handlers\r\n    if (browser.isChromiumBased()) {\r\n        stream.onaddtrack = event => {\r\n            this._remoteTrackAdded(stream, event.track);\r\n        };\r\n        stream.onremovetrack = event => {\r\n            this._remoteTrackRemoved(stream, event.track);\r\n        };\r\n    }\r\n\r\n    // Call remoteTrackAdded for each track in the stream\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackAdded(stream, audioTrack);\r\n    }\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackAdded(stream, videoTrack);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\r\n * handle streams on per track basis). Finds the owner and the SSRC for\r\n * the track and passes that to ChatRoom for further processing.\r\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\r\n * the parent of the track\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\r\n * participant.\r\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\r\n * for the remote participant in unified plan.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const mediaType = track.kind;\r\n\r\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n    logger.info(`${this} remote track added:`, streamId, mediaType);\r\n\r\n    // look up an associated JID for a stream id\r\n    if (!mediaType) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `MediaType undefined for remote track, stream id: ${streamId}`\r\n            ));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    const remoteSDP = browser.usesPlanB()\r\n        ? new SDP(this.remoteDescription.sdp)\r\n        : new SDP(this.peerconnection.remoteDescription.sdp);\r\n    let mediaLines;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        if (transceiver && transceiver.mid) {\r\n            const mid = transceiver.mid;\r\n\r\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\r\n        } else {\r\n            mediaLines = remoteSDP.media.filter(mls => {\r\n                const msid = SDPUtil.findLine(mls, 'a=msid');\r\n\r\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\r\n            });\r\n        }\r\n    } else {\r\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\r\n    }\r\n\r\n    if (!mediaLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No media lines for type ${\r\n                    mediaType} found in remote SDP for remote track: ${\r\n                    streamId}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\r\n\r\n    ssrcLines\r\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\r\n    if (!ssrcLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC lines for streamId ${\r\n                    streamId} for remote track, media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\r\n    // with global error handler anyway\r\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\r\n    const trackSsrc = Number(ssrcStr);\r\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\r\n\r\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    } else if (!ownerEndpointId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC owner known for: ${\r\n                    trackSsrc} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\r\n\r\n    const peerMediaInfo\r\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\r\n\r\n    if (!peerMediaInfo) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `${this}: no peer media info available for ${\r\n                    ownerEndpointId}`));\r\n\r\n        return;\r\n    }\r\n\r\n    const muted = peerMediaInfo.muted;\r\n    const videoType = peerMediaInfo.videoType; // can be undefined\r\n\r\n    this._createRemoteTrack(\r\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\r\n};\r\n\r\n// FIXME cleanup params\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Initializes a new JitsiRemoteTrack instance with the data provided by\r\n * the signaling layer and SDP.\r\n *\r\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\r\n * @param {MediaStream} stream the WebRTC stream instance\r\n * @param {MediaStreamTrack} track the WebRTC track instance\r\n * @param {MediaType} mediaType the track's type of the media\r\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\r\n * @param {number} ssrc the track's main SSRC number\r\n * @param {boolean} muted the initial muted status\r\n */\r\nTraceablePeerConnection.prototype._createRemoteTrack = function(\r\n        ownerEndpointId,\r\n        stream,\r\n        track,\r\n        mediaType,\r\n        videoType,\r\n        ssrc,\r\n        muted) {\r\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\r\n\r\n    if (!remoteTracksMap) {\r\n        remoteTracksMap = new Map();\r\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\r\n    }\r\n\r\n    const existingTrack = remoteTracksMap.get(mediaType);\r\n\r\n    if (existingTrack && existingTrack.getTrack() === track) {\r\n        // Ignore duplicated event which can originate either from\r\n        // 'onStreamAdded' or 'onTrackAdded'.\r\n        logger.info(\r\n            `${this} ignored duplicated remote track added event for: `\r\n                + `${ownerEndpointId}, ${mediaType}`);\r\n\r\n        return;\r\n    } else if (existingTrack) {\r\n        logger.error(\r\n            `${this} overwriting remote track for`\r\n                + `${ownerEndpointId} ${mediaType}`);\r\n    }\r\n\r\n    const remoteTrack\r\n        = new JitsiRemoteTrack(\r\n                this.rtc,\r\n                this.rtc.conference,\r\n                ownerEndpointId,\r\n                stream,\r\n                track,\r\n                mediaType,\r\n                videoType,\r\n                ssrc,\r\n                muted,\r\n                this.isP2P);\r\n\r\n    remoteTracksMap.set(mediaType, remoteTrack);\r\n\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Handles remote stream removal.\r\n * @param stream the WebRTC MediaStream object which is being removed from the\r\n * PeerConnection\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\r\n    if (!RTC.isUserStream(stream)) {\r\n        const id = RTC.getStreamID(stream);\r\n\r\n        logger.info(\r\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Call remoteTrackRemoved for each track in the stream\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackRemoved(stream, videoTrack);\r\n    }\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackRemoved(stream, audioTrack);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote media track removal.\r\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\r\n * of the track.\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\r\n * removed from the PeerConnection.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\r\n        stream,\r\n        track) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const trackId = track && RTC.getTrackID(track);\r\n\r\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\r\n\r\n    if (!streamId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this} remote track removal failed - no stream ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!trackId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this} remote track removal failed - no track ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\r\n        // NOTE this warning is always printed when user leaves the room,\r\n        // because we remove remote tracks manually on MUC member left event,\r\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\r\n        // ignore this warning, but still it's better to keep it printed for\r\n        // debugging purposes.\r\n        //\r\n        // We could change the behaviour to emit track removed only from here,\r\n        // but the order of the events will change and consuming apps could\r\n        // behave unexpectedly (the \"user left\" event would come before \"track\r\n        // removed\" events).\r\n        logger.warn(\r\n            `${this} Removed track not found for msid: ${streamId},\r\n             track id: ${trackId}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Finds remote track by it's stream and track ids.\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @return {JitsiRemoteTrack|undefined} the track's instance or\r\n * <tt>undefined</tt> if not found.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    // .find will break the loop once the first match is found\r\n    for (const endpointTrackMap of this.remoteTracks.values()) {\r\n        for (const mediaTrack of endpointTrackMap.values()) {\r\n            // FIXME verify and try to use ===\r\n            /* eslint-disable eqeqeq */\r\n            if (mediaTrack.getStreamId() == streamId\r\n                && mediaTrack.getTrackId() == trackId) {\r\n                return mediaTrack;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n * (resource part of the JID). Returns array of removed tracks.\r\n *\r\n * @param {string} owner - The resource part of the MUC JID.\r\n * @returns {JitsiRemoteTrack[]}\r\n */\r\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\r\n    const removedTracks = [];\r\n    const remoteTracksMap = this.remoteTracks.get(owner);\r\n\r\n    if (remoteTracksMap) {\r\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\r\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\r\n\r\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\r\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\r\n\r\n        this.remoteTracks.delete(owner);\r\n    }\r\n\r\n    logger.debug(\r\n        `${this} removed remote tracks for ${owner} count: ${\r\n            removedTracks.length}`);\r\n\r\n    return removedTracks;\r\n};\r\n\r\n/**\r\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\r\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\r\n * @param {JitsiRemoteTrack} toBeRemoved\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\r\n    toBeRemoved.dispose();\r\n    const participantId = toBeRemoved.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    if (!remoteTracksMap) {\r\n        logger.error(\r\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\r\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\r\n        logger.error(\r\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\r\n    }\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\r\n};\r\n\r\n/**\r\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\r\n * track ids.\r\n *\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\r\n * <tt>undefined</tt> if no track matching given stream and track ids was\r\n * found.\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\r\n\r\n    if (toBeRemoved) {\r\n        this._removeRemoteTrack(toBeRemoved);\r\n    }\r\n\r\n    return toBeRemoved;\r\n};\r\n\r\n/**\r\n * @typedef {Object} SSRCGroupInfo\r\n * @property {Array<number>} ssrcs group's SSRCs\r\n * @property {string} semantics\r\n */\r\n/**\r\n * @typedef {Object} TrackSSRCInfo\r\n * @property {Array<number>} ssrcs track's SSRCs\r\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\r\n */\r\n/**\r\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\r\n * @param {Object} desc the WebRTC SDP instance.\r\n * @return {Map<string,TrackSSRCInfo>}\r\n */\r\nfunction extractSSRCMap(desc) {\r\n    /**\r\n     * Track SSRC infos mapped by stream ID (msid)\r\n     * @type {Map<string,TrackSSRCInfo>}\r\n     */\r\n    const ssrcMap = new Map();\r\n\r\n    /**\r\n     * Groups mapped by primary SSRC number\r\n     * @type {Map<number,Array<SSRCGroupInfo>>}\r\n     */\r\n    const groupsMap = new Map();\r\n\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return ssrcMap;\r\n    }\r\n\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (!Array.isArray(session.media)) {\r\n        return ssrcMap;\r\n    }\r\n\r\n    for (const mLine of session.media) {\r\n        if (!Array.isArray(mLine.ssrcs)) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        if (Array.isArray(mLine.ssrcGroups)) {\r\n            for (const group of mLine.ssrcGroups) {\r\n                if (typeof group.semantics !== 'undefined'\r\n                    && typeof group.ssrcs !== 'undefined') {\r\n                    // Parse SSRCs and store as numbers\r\n                    const groupSSRCs\r\n                        = group.ssrcs.split(' ').map(\r\n                            ssrcStr => parseInt(ssrcStr, 10));\r\n                    const primarySSRC = groupSSRCs[0];\r\n\r\n                    // Note that group.semantics is already present\r\n\r\n                    group.ssrcs = groupSSRCs;\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (!groupsMap.has(primarySSRC)) {\r\n                        groupsMap.set(primarySSRC, []);\r\n                    }\r\n                    groupsMap.get(primarySSRC).push(group);\r\n                }\r\n            }\r\n        }\r\n        for (const ssrc of mLine.ssrcs) {\r\n            if (ssrc.attribute !== 'msid') {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            const msid = ssrc.value;\r\n            let ssrcInfo = ssrcMap.get(msid);\r\n\r\n            if (!ssrcInfo) {\r\n                ssrcInfo = {\r\n                    ssrcs: [],\r\n                    groups: [],\r\n                    msid\r\n                };\r\n                ssrcMap.set(msid, ssrcInfo);\r\n            }\r\n\r\n            const ssrcNumber = ssrc.id;\r\n\r\n            ssrcInfo.ssrcs.push(ssrcNumber);\r\n\r\n            if (groupsMap.has(ssrcNumber)) {\r\n                const ssrcGroups = groupsMap.get(ssrcNumber);\r\n\r\n                for (const group of ssrcGroups) {\r\n                    ssrcInfo.groups.push(group);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return ssrcMap;\r\n}\r\n\r\n/**\r\n * Takes a SessionDescription object and returns a \"normalized\" version.\r\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\r\n * only SSRCs.\r\n */\r\nconst normalizePlanB = function(desc) {\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return desc;\r\n    }\r\n\r\n    // eslint-disable-next-line no-shadow\r\n    const transform = require('sdp-transform');\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (typeof session !== 'undefined'\r\n            && typeof session.media !== 'undefined'\r\n            && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n\r\n            // Chrome appears to be picky about the order in which a=ssrc lines\r\n            // are listed in an m-line when rtx is enabled (and thus there are\r\n            // a=ssrc-group lines with FID semantics). Specifically if we have\r\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\r\n            // the \"a=ssrc:S1\" lines, SRD fails.\r\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\r\n            // first.\r\n            const firstSsrcs = [];\r\n            const newSsrcLines = [];\r\n\r\n            if (typeof mLine.ssrcGroups !== 'undefined'\r\n                && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(group => {\r\n                    if (typeof group.semantics !== 'undefined'\r\n                        && group.semantics === 'FID') {\r\n                        if (typeof group.ssrcs !== 'undefined') {\r\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (Array.isArray(mLine.ssrcs)) {\r\n                let i;\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] === 'object'\r\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\r\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                        delete mLine.ssrcs[i];\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                    }\r\n                }\r\n\r\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\r\n            }\r\n        });\r\n    }\r\n\r\n    const resStr = transform.write(session);\r\n\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: resStr\r\n    });\r\n};\r\n\r\n/**\r\n * Unified plan differentiates a remote track not associated with a stream using\r\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\r\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\r\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\r\n * line. Normally the ssrcs are not used by the client, as the bridge controls\r\n * media flow, but keep one reference to the ssrc for the p2p case.\r\n *\r\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\r\n * @private\r\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\r\n */\r\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\r\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\r\n        return ssrcLines;\r\n    }\r\n\r\n    let filteredLines = [ ...ssrcLines ];\r\n\r\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\r\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\r\n        .map(ssrcLine => ssrcLine.id);\r\n\r\n    problematicSsrcIds.forEach(ssrcId => {\r\n        // Find the cname which is to be modified and left in.\r\n        const cnameLine = filteredLines.find(line =>\r\n            line.id === ssrcId && line.attribute === 'cname');\r\n\r\n        cnameLine.value = `recvonly-${ssrcId}`;\r\n\r\n        // Remove all of lines for the ssrc.\r\n        filteredLines\r\n            = filteredLines.filter(line => line.id !== ssrcId);\r\n\r\n        // But re-add the cname line so there is a reference kept to the ssrc\r\n        // in the SDP.\r\n        filteredLines.push(cnameLine);\r\n    });\r\n\r\n    return filteredLines;\r\n}\r\n\r\n/**\r\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\r\n * @param {Object} localDescription the SDP object as defined by WebRTC.\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n */\r\nconst enforceSendRecv = function(localDescription, options) {\r\n    if (!localDescription) {\r\n        throw new Error('No local description passed in.');\r\n    }\r\n\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    const audioMedia = transformer.selectMedia('audio');\r\n    let changed = false;\r\n\r\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\r\n        if (options.startSilent) {\r\n            audioMedia.direction = 'inactive';\r\n        } else {\r\n            audioMedia.direction = 'sendrecv';\r\n        }\r\n\r\n        changed = true;\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\r\n        videoMedia.direction = 'sendrecv';\r\n        changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n *\r\n * @param {JitsiLocalTrack} localTrack\r\n */\r\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\r\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\r\n\r\n    return ssrcInfo && ssrcInfo.ssrcs[0];\r\n};\r\n\r\n/**\r\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\r\n * same msid but no ssrc-group, since unified plan signals the simulcast\r\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\r\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\r\n * an ssrc-group line to make Jicofo happy.\r\n * @param desc A session description object (with 'type' and 'sdp' fields)\r\n * @return A session description object with its sdp field modified to\r\n * contain an inject ssrc-group for simulcast\r\n */\r\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\r\n    = function(desc) {\r\n        const sdp = transform.parse(desc.sdp);\r\n        const video = sdp.media.find(mline => mline.type === 'video');\r\n\r\n        // Check if the browser supports RTX, add only the primary ssrcs to the\r\n        // SIM group if that is the case.\r\n        video.ssrcGroups = video.ssrcGroups || [];\r\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\r\n\r\n        if (video.simulcast || video.simulcast_03) {\r\n            const ssrcs = [];\r\n\r\n            if (fidGroups && fidGroups.length) {\r\n                fidGroups.forEach(group => {\r\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\r\n                });\r\n            } else {\r\n                video.ssrcs.forEach(ssrc => {\r\n                    if (ssrc.attribute === 'msid') {\r\n                        ssrcs.push(ssrc.id);\r\n                    }\r\n                });\r\n            }\r\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\r\n                // Group already exists, no need to do anything\r\n                return desc;\r\n            }\r\n            video.ssrcGroups.push({\r\n                semantics: 'SIM',\r\n                ssrcs: ssrcs.join(' ')\r\n            });\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    };\r\n\r\n/* eslint-disable-next-line vars-on-top */\r\nconst getters = {\r\n    signalingState() {\r\n        return this.peerconnection.signalingState;\r\n    },\r\n    iceConnectionState() {\r\n        return this.peerconnection.iceConnectionState;\r\n    },\r\n    localDescription() {\r\n        let desc = this.peerconnection.localDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getLocalDescription no localDescription found');\r\n\r\n            return {};\r\n        }\r\n\r\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        if (browser.usesUnifiedPlan()) {\r\n            desc = this.interop.toPlanB(desc);\r\n            this.trace('getLocalDescription::postTransform (Plan B)',\r\n                dumpSDP(desc));\r\n\r\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\r\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\r\n                dumpSDP(desc));\r\n        } else {\r\n            if (browser.doesVideoMuteByStreamRemove()) {\r\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\r\n                logger.debug(\r\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\r\n            }\r\n\r\n            // What comes out of this getter will be signalled over Jingle to\r\n            // the other peer, so we need to make sure the media direction is\r\n            // 'sendrecv' because we won't change the direction later and don't want\r\n            // the other peer to think we can't send or receive.\r\n            //\r\n            // Note that the description we set in chrome does have the accurate\r\n            // direction (e.g. 'recvonly'), since that is technically what is\r\n            // happening (check setLocalDescription impl).\r\n            desc = enforceSendRecv(desc, this.options);\r\n        }\r\n\r\n        // See the method's doc for more info about this transformation.\r\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\r\n\r\n        return desc;\r\n    },\r\n    remoteDescription() {\r\n        let desc = this.peerconnection.remoteDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getRemoteDescription no remoteDescription found');\r\n\r\n            return {};\r\n        }\r\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        if (browser.usesUnifiedPlan()) {\r\n            desc = this.interop.toPlanB(desc);\r\n            this.trace(\r\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\r\n        }\r\n\r\n        return desc;\r\n    }\r\n};\r\n\r\nObject.keys(getters).forEach(prop => {\r\n    Object.defineProperty(\r\n        TraceablePeerConnection.prototype,\r\n        prop, {\r\n            get: getters[prop]\r\n        }\r\n    );\r\n});\r\n\r\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\r\n    return this.localSSRCs.get(rtcId);\r\n};\r\n\r\n/**\r\n * Checks if given track belongs to this peerconnection instance.\r\n *\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.containsTrack = function(track) {\r\n    if (track.isLocal()) {\r\n        return this.localTracks.has(track.rtcId);\r\n    }\r\n\r\n    const participantId = track.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\r\n};\r\n\r\n/**\r\n * Add {@link JitsiLocalTrack} to this TPC.\r\n * @param {JitsiLocalTrack} track\r\n */\r\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\r\n    const rtcId = track.rtcId;\r\n\r\n    logger.info(`add ${track} to: ${this}`);\r\n\r\n    if (this.localTracks.has(rtcId)) {\r\n        logger.error(`${track} is already in ${this}`);\r\n\r\n        return;\r\n    }\r\n\r\n    this.localTracks.set(rtcId, track);\r\n    if (browser.usesUnifiedPlan() && isInitiator) {\r\n        return this.tpcUtils.addTrack(track, isInitiator);\r\n    }\r\n\r\n    const webrtcStream = track.getOriginalStream();\r\n\r\n    if (webrtcStream) {\r\n        this._addStream(webrtcStream);\r\n\r\n    // It's not ok for a track to not have a WebRTC stream if:\r\n    } else if (!browser.doesVideoMuteByStreamRemove()\r\n                || track.isAudioTrack()\r\n                || (track.isVideoTrack() && !track.isMuted())) {\r\n        logger.error(`${this} no WebRTC stream for: ${track}`);\r\n    }\r\n\r\n    // Muted video tracks do not have WebRTC stream\r\n    if (browser.usesPlanB() && browser.doesVideoMuteByStreamRemove()\r\n            && track.isVideoTrack() && track.isMuted()) {\r\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\r\n\r\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\r\n        const simGroup\r\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\r\n\r\n        if (simGroup) {\r\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\r\n        }\r\n        const fidGroups\r\n            = ssrcInfo.groups.filter(\r\n                groupInfo => groupInfo.semantics === 'FID');\r\n\r\n        if (fidGroups) {\r\n            const rtxSsrcMapping = new Map();\r\n\r\n            fidGroups.forEach(fidGroup => {\r\n                const primarySsrc = fidGroup.ssrcs[0];\r\n                const rtxSsrc = fidGroup.ssrcs[1];\r\n\r\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\r\n            });\r\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\r\n        }\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan() && !browser.usesSdpMungingForSimulcast()) {\r\n        this.tpcUtils.setEncodings(track);\r\n    }\r\n\r\n    // Construct the simulcast stream constraints for the newly added track.\r\n    if (track.isVideoTrack() && track.videoType === VideoType.CAMERA && this.isSimulcastOn()) {\r\n        this.tpcUtils._setSimulcastStreamConstraints(track.getTrack());\r\n    }\r\n};\r\n\r\n/**\r\n * Adds local track as part of the unmute operation.\r\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\r\n * operation\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.addTrackUnmute(track);\r\n    }\r\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\r\n        // Abort\r\n        return Promise.reject('Track not found on the peerconnection');\r\n    }\r\n\r\n    logger.info(`Adding ${track} as unmute to ${this}`);\r\n    const webRtcStream = track.getOriginalStream();\r\n\r\n    if (!webRtcStream) {\r\n        logger.error(\r\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\r\n\r\n        return Promise.reject('Stream not found');\r\n    }\r\n    this._addStream(webRtcStream);\r\n\r\n    return Promise.resolve(true);\r\n};\r\n\r\n/**\r\n * Adds WebRTC media stream to the underlying PeerConnection\r\n * @param {MediaStream} mediaStream\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\r\n    this.peerconnection.addStream(mediaStream);\r\n    this._addedStreams.push(mediaStream);\r\n};\r\n\r\n/**\r\n * Removes WebRTC media stream from the underlying PeerConection\r\n * @param {MediaStream} mediaStream\r\n */\r\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\r\n    this.peerconnection.removeStream(mediaStream);\r\n    this._addedStreams\r\n        = this._addedStreams.filter(stream => stream !== mediaStream);\r\n};\r\n\r\n/**\r\n * This method when called will check if given <tt>localTrack</tt> belongs to\r\n * this TPC (that it has been previously added using {@link addTrack}). If the\r\n * track does not belong an error message will be logged.\r\n * @param {string} methodName the method name that will be logged in an error\r\n * message\r\n * @param {JitsiLocalTrack} localTrack\r\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\r\n * <tt>false</tt> otherwise.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\r\n        methodName,\r\n        localTrack) {\r\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\r\n\r\n    if (!doesBelong) {\r\n        logger.error(\r\n            `${methodName}: ${localTrack} does not belong to ${this}`);\r\n    }\r\n\r\n    return doesBelong;\r\n};\r\n\r\n/**\r\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\r\n * the underlying WebRTC PeerConnection.\r\n * @param {MediaStream} mediaStream\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\r\n    return this._addedStreams.indexOf(mediaStream) > -1;\r\n};\r\n\r\n/**\r\n * Remove local track from this TPC.\r\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\r\n *\r\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\r\n *       The same applies to addTrack.\r\n */\r\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStream',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\r\n\r\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return;\r\n    }\r\n    this.localTracks.delete(localTrack.rtcId);\r\n    this.localSSRCs.delete(localTrack.rtcId);\r\n\r\n    if (webRtcStream) {\r\n        this.peerconnection.removeStream(webRtcStream);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given media type.\r\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\r\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\r\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given MediaStream.\r\n *\r\n * @param {MediaStream} stream - The media stream used for the search.\r\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\r\n    const track = stream.getTracks()[0];\r\n\r\n    if (!track) {\r\n        logger.error('Cannot find sender: no tracks.');\r\n\r\n        return;\r\n    }\r\n\r\n    // Find the right sender (for audio or video)\r\n    return this.peerconnection.getSenders().find(s => s.track === track);\r\n};\r\n\r\n/**\r\n * Returns the receiver corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\r\n    return this.peerconnection.getReceivers().find(r => r.track === track);\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\r\n    return this.peerconnection.getSenders().find(s => s.track === track);\r\n};\r\n\r\n/**\r\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\r\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n * <tt>oldTrack</tt>\r\n *\r\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\r\n * replaced\r\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\r\n * @returns {Promise<boolean>} - If the promise resolves with true,\r\n * renegotiation will be needed. Otherwise no renegotiation is needed.\r\n */\r\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack);\r\n    }\r\n    if (oldTrack) {\r\n        this.removeTrack(oldTrack);\r\n    }\r\n    if (newTrack) {\r\n        this.addTrack(newTrack);\r\n    }\r\n\r\n    return Promise.resolve(true);\r\n};\r\n\r\n/**\r\n * Removes local track as part of the mute operation.\r\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\r\n * the mute operation.\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.removeTrackMute(localTrack);\r\n    }\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStreamMute',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\r\n\r\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return Promise.reject('Track not found in the peerconnection');\r\n    }\r\n    if (webRtcStream) {\r\n        logger.info(\r\n            `Removing ${localTrack} as mute from ${this}`);\r\n        this._removeStream(webRtcStream);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\r\n\r\n    return Promise.reject('Stream not found');\r\n};\r\n\r\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\r\n    this.trace('createDataChannel', label, opts);\r\n\r\n    return this.peerconnection.createDataChannel(label, opts);\r\n};\r\n\r\n/**\r\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\r\n * in the SDP so that simulcast is properly activated.\r\n *\r\n * @param {Object} localSdp the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\r\n        localSdp) {\r\n    let sdpStr = localSdp.sdp;\r\n\r\n    const videoStartIndex = sdpStr.indexOf('m=video');\r\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\r\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n\r\n    if (simStartIndex === -1\r\n        || otherStartIndex === -1\r\n        || otherStartIndex === simStartIndex) {\r\n        return localSdp;\r\n    }\r\n\r\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\r\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\r\n\r\n    sdpStr = sdpStr.replace(simStr, '');\r\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\r\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\r\n    const simStrTrimmed = simStr.trim();\r\n    const sdpTail = sdpStr.slice(otherEndIndex);\r\n\r\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\r\n\r\n    return new RTCSessionDescription({\r\n        type: localSdp.type,\r\n        sdp: sdpStr\r\n    });\r\n};\r\n\r\n/**\r\n * Will adjust audio and video media direction in the given SDP object to\r\n * reflect the current status of the {@link audioTransferActive} and\r\n * {@link videoTransferActive} flags.\r\n * @param {Object} localDescription the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\r\n        localDescription) {\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    let modifiedDirection = false;\r\n    const audioMedia = transformer.selectMedia('audio');\r\n\r\n    if (audioMedia) {\r\n        const desiredAudioDirection\r\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\r\n\r\n        if (audioMedia.direction !== desiredAudioDirection) {\r\n            audioMedia.direction = desiredAudioDirection;\r\n            logger.info(\r\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"audio\" media found int the local description');\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia) {\r\n        const desiredVideoDirection\r\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\r\n\r\n        if (videoMedia.direction !== desiredVideoDirection) {\r\n            videoMedia.direction = desiredVideoDirection;\r\n            logger.info(\r\n                `Adjusted local video direction to ${desiredVideoDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"video\" media found in the local description');\r\n    }\r\n\r\n    if (modifiedDirection) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\r\n    let localSdp = description;\r\n\r\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\r\n\r\n    if (this.options.disableH264 || this.options.preferH264) {\r\n        const parsedSdp = transform.parse(localSdp.sdp);\r\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\r\n\r\n        if (this.options.disableH264) {\r\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\r\n        } else {\r\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\r\n        }\r\n\r\n        localSdp = new RTCSessionDescription({\r\n            type: localSdp.type,\r\n            sdp: transform.write(parsedSdp)\r\n        });\r\n\r\n        this.trace('setLocalDescription::postTransform (H264)',\r\n            dumpSDP(localSdp));\r\n    }\r\n\r\n    if (browser.usesPlanB()) {\r\n        localSdp = this._adjustLocalMediaDirection(localSdp);\r\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\r\n    } else {\r\n\r\n        // if we're using unified plan, transform to it first.\r\n        localSdp = this.interop.toUnifiedPlan(localSdp);\r\n        this.trace(\r\n            'setLocalDescription::postTransform (Unified Plan)',\r\n            dumpSDP(localSdp));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setLocalDescription(localSdp)\r\n            .then(() => {\r\n                this.trace('setLocalDescriptionOnSuccess');\r\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\r\n\r\n                if (localUfrag !== this.localUfrag) {\r\n                    this.localUfrag = localUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setLocalDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n                    err, this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables audio media transmission on this peer connection. When\r\n * disabled the SDP audio media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\r\n    logger.debug(`${this} audio transfer active: ${active}`);\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.setAudioTransferActive(active);\r\n    }\r\n    const changed = this.audioTransferActive !== active;\r\n\r\n    this.audioTransferActive = active;\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sets the degradation preference on the video sender. This setting determines if\r\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\r\n * to 'maintain-resolution' when a desktop track is being shared instead.\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser does not support RTCRtpSender');\r\n\r\n        return;\r\n    }\r\n    const localVideoTrack = Array.from(this.localTracks.values()).find(t => t.isVideoTrack());\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return;\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters.encodings || !parameters.encodings.length) {\r\n        return;\r\n    }\r\n    for (const encoding in parameters.encodings) {\r\n        if (parameters.encodings.hasOwnProperty(encoding)) {\r\n            const preference = localVideoTrack.videoType === VideoType.CAMERA\r\n                ? DEGRADATION_PREFERENCE_CAMERA\r\n                : DEGRADATION_PREFERENCE_DESKTOP;\r\n\r\n            logger.info(`Setting video sender degradation preference on ${this} to ${preference}`);\r\n            parameters.encodings[encoding].degradationPreference = preference;\r\n        }\r\n    }\r\n    videoSender.setParameters(parameters);\r\n};\r\n\r\n/**\r\n * Sets the max bitrate on the RTCRtpSender so that the\r\n * bitrate of the enocder doesn't exceed the configured value.\r\n * This is needed for the desktop share until spec-complaint\r\n * simulcast is implemented.\r\n * @param {JitsiLocalTrack} localTrack - the local track whose\r\n * max bitrate is to be configured.\r\n */\r\nTraceablePeerConnection.prototype.setMaxBitRate = function(localTrack) {\r\n    const trackId = localTrack.track.id;\r\n    const videoType = localTrack.videoType;\r\n\r\n    // No need to set max bitrates on the streams in the following cases.\r\n    // 1. When a 'camera' track is replaced in plan-b mode, since its a new sender.\r\n    // 2. When the config.js option for capping the SS bitrate is not enabled.\r\n    if ((browser.usesPlanB() && !this.options.capScreenshareBitrate)\r\n        || (browser.usesPlanB() && videoType === VideoType.CAMERA)) {\r\n        return;\r\n    }\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\r\n\r\n        return;\r\n    }\r\n    const presenterEnabled = localTrack._originalStream\r\n        && localTrack._originalStream.id !== localTrack.getStreamId();\r\n\r\n    this.peerconnection.getSenders()\r\n        .filter(s => s.track && s.track.id === trackId)\r\n        .forEach(sender => {\r\n            try {\r\n                const parameters = sender.getParameters();\r\n\r\n                if (!parameters.encodings || !parameters.encodings.length) {\r\n                    return;\r\n                }\r\n                logger.debug('Setting max bitrate on video stream');\r\n                for (const encoding in parameters.encodings) {\r\n                    if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                        // On chromium, set a max bitrate of 500 Kbps for screenshare when\r\n                        // capScreenshareBitrate is enabled through config.js and presenter\r\n                        // is not turned on.\r\n                        parameters.encodings[encoding].maxBitrate\r\n                            = browser.usesPlanB()\r\n                                ? presenterEnabled ? MAX_BITRATE : DESKSTOP_SHARE_RATE\r\n\r\n                                // In unified plan, simulcast for SS is on by default.\r\n                                // When simulcast is disabled through a config.js option,\r\n                                // we cap the bitrate on desktop and camera tracks to 2500 Kbps.\r\n                                : this.isSimulcastOn()\r\n                                    ? this.tpcUtils.simulcastEncodings[encoding].maxBitrate\r\n                                    : MAX_BITRATE;\r\n                    }\r\n                }\r\n                sender.setParameters(parameters);\r\n            } catch (err) {\r\n                logger.error('Browser does not support getParameters/setParamters '\r\n                    + 'or setting max bitrate on the encodings: ', err);\r\n            }\r\n        });\r\n};\r\n\r\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\r\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    if (browser.usesPlanB()) {\r\n        // TODO the focus should squeze or explode the remote simulcast\r\n        if (this.isSimulcastOn()) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (simulcast)',\r\n                dumpSDP(description));\r\n        }\r\n\r\n        if (this.options.preferH264) {\r\n            const parsedSdp = transform.parse(description.sdp);\r\n            const videoMLine = parsedSdp.media.find(m => m.type === 'video');\r\n\r\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = new RTCSessionDescription({\r\n                type: description.type,\r\n                sdp: transform.write(parsedSdp)\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = normalizePlanB(description);\r\n    } else {\r\n        const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = this.interop.toUnifiedPlan(description, currentDescription);\r\n        this.trace(\r\n            'setRemoteDescription::postTransform (Unified)',\r\n            dumpSDP(description));\r\n\r\n        if (this.isSimulcastOn()) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description);\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.tpcUtils._insertUnifiedPlanSimulcastReceive(description);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (sim receive)',\r\n                dumpSDP(description));\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.tpcUtils._ensureCorrectOrderOfSsrcs(description);\r\n        }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.trace('setRemoteDescriptionOnSuccess');\r\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\r\n\r\n                if (remoteUfrag !== this.remoteUfrag) {\r\n                    this.remoteUfrag = remoteUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setRemoteDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n                    err,\r\n                    this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the resolution of the video stream that is sent to the peer based on\r\n * the user preferred value. If simulcast is enabled on the peerconection, all the\r\n * simulcast encodings that have a resolution height lower or equal to the value\r\n * provided will remain active. For the non-simulcast case, video constraint is\r\n * applied on the track.\r\n * @param {number} frameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\r\n    // XXX: This is not yet supported on mobile.\r\n    if (browser.isReactNative()) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const newHeight = frameHeight || this.senderVideoMaxHeight;\r\n\r\n    this.senderVideoMaxHeight = newHeight;\r\n    if (!newHeight) {\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = Array.from(this.localTracks.values()).find(t => t.isVideoTrack());\r\n\r\n    if (!localVideoTrack || localVideoTrack.isMuted() || localVideoTrack.videoType !== VideoType.CAMERA) {\r\n        return Promise.resolve();\r\n    }\r\n    const track = localVideoTrack.getTrack();\r\n\r\n    if (this.isSimulcastOn()) {\r\n        let promise = Promise.resolve();\r\n\r\n        // Check if the track constraints have been modified in p2p mode, apply\r\n        // the constraints that were used for creating the track if that is the case.\r\n        const height = localVideoTrack._constraints.height.ideal\r\n            ? localVideoTrack._constraints.height.ideal\r\n            : localVideoTrack._constraints.height;\r\n\r\n        if (track.getSettings().height !== height) {\r\n            promise = track.applyConstraints(localVideoTrack._constraints);\r\n        }\r\n\r\n        return promise\r\n            .then(() => {\r\n                // Determine the encodings that need to stay enabled based on the\r\n                // new frameHeight provided.\r\n                const encodingsEnabledState = this.tpcUtils.simulcastStreamConstraints\r\n                    .map(constraint => constraint.height <= newHeight);\r\n                const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n                if (!videoSender) {\r\n                    return Promise.reject(new Error('RTCRtpSender not found for local video'));\r\n                }\r\n                const parameters = videoSender.getParameters();\r\n\r\n                if (!parameters || !parameters.encodings || !parameters.encodings.length) {\r\n                    return Promise.reject(new Error('RTCRtpSendParameters not found for local video track'));\r\n                }\r\n                logger.debug(`Setting max height of ${newHeight} on local video`);\r\n                for (const encoding in parameters.encodings) {\r\n                    if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                        parameters.encodings[encoding].active = encodingsEnabledState[encoding];\r\n                    }\r\n                }\r\n\r\n                return videoSender.setParameters(parameters).then(() => {\r\n                    localVideoTrack.maxEnabledResolution = newHeight;\r\n                    this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\r\n                });\r\n            });\r\n    }\r\n    logger.debug(`Setting max height of ${newHeight} on local video`);\r\n\r\n    // Do not specify the aspect ratio, let camera pick\r\n    // the best aspect ratio for the given height.\r\n    return track.applyConstraints(\r\n        {\r\n            height: {\r\n                ideal: newHeight\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Enables/disables video media transmission on this peer connection. When\r\n * disabled the SDP video media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\r\n    logger.debug(`${this} video transfer active: ${active}`);\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.setVideoTransferActive(active);\r\n    }\r\n    const changed = this.videoTransferActive !== active;\r\n\r\n    this.videoTransferActive = active;\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sends DTMF tones if possible.\r\n *\r\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\r\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\r\n *\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\r\n    if (!this._dtmfSender) {\r\n        if (this.peerconnection.getSenders) {\r\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\r\n\r\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\r\n        }\r\n\r\n        if (!this._dtmfSender) {\r\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\r\n\r\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\r\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\r\n            }\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\r\n        }\r\n\r\n        if (this._dtmfSender) {\r\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\r\n        }\r\n    }\r\n\r\n    if (this._dtmfSender) {\r\n        if (this._dtmfSender.toneBuffer) {\r\n            this._dtmfTonesQueue.push({\r\n                tones,\r\n                duration,\r\n                interToneGap\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    } else {\r\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\r\n * a single tone.\r\n *\r\n * @param {Object} event - The tonechange event which indicates what characters\r\n * are left to be played for the current tone.\r\n * @private\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype._onToneChange = function(event) {\r\n    // An empty event.tone indicates the current tones have finished playing.\r\n    // Automatically start playing any queued tones on finish.\r\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\r\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    }\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n * the recvonly video stream.\r\n */\r\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\r\n    const newSSRC = SDPUtil.generateSsrc();\r\n\r\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\r\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection forget the current primary video\r\n * SSRC.\r\n */\r\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\r\n    logger.info('Clearing primary video SSRC!');\r\n    this.sdpConsistency.clearVideoSsrcCache();\r\n};\r\n\r\n/**\r\n * Closes underlying WebRTC PeerConnection instance and removes all remote\r\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\r\n * them.\r\n */\r\nTraceablePeerConnection.prototype.close = function() {\r\n    this.trace('stop');\r\n\r\n    // Off SignalingEvents\r\n    this.signalingLayer.off(\r\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\r\n    this.signalingLayer.off(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\r\n\r\n    for (const peerTracks of this.remoteTracks.values()) {\r\n        for (const remoteTrack of peerTracks.values()) {\r\n            this._removeRemoteTrack(remoteTrack);\r\n        }\r\n    }\r\n    this.remoteTracks.clear();\r\n\r\n    this._addedStreams = [];\r\n\r\n    this._dtmfSender = null;\r\n    this._dtmfTonesQueue = [];\r\n\r\n    if (!this.rtc._removePeerConnection(this)) {\r\n        logger.error('RTC._removePeerConnection returned false');\r\n    }\r\n    if (this.statsinterval !== null) {\r\n        window.clearInterval(this.statsinterval);\r\n        this.statsinterval = null;\r\n    }\r\n    logger.info(`Closing ${this}...`);\r\n    this.peerconnection.close();\r\n};\r\n\r\n/**\r\n * Modifies the values of the setup attributes (defined by\r\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\r\n * answer in order to overcome a delay of 1 second in the connection\r\n * establishment between some devices and Videobridge.\r\n *\r\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\r\n * being prepared to respond\r\n * @param {SDP} answer - the SDP to modify\r\n * @private\r\n */\r\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\r\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\r\n        // It looks like Firefox doesn't agree with the fix (at least in its\r\n        // current implementation) because it effectively remains active even\r\n        // after we tell it to become passive. Apart from Firefox which I tested\r\n        // after the fix was deployed, I tested Chrome only. In order to prevent\r\n        // issues with other browsers, limit the fix to known devices for the\r\n        // time being.\r\n        return;\r\n    }\r\n\r\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\r\n    // answerer (as orchestrated by Jicofo). In accord with\r\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\r\n    // are ICE FULL agents, Videobridge will take on the controlling role and\r\n    // WebRTC will take on the controlled role. In accord with\r\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\r\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\r\n    // choose either the setup attribute value of setup:active or\r\n    // setup:passive. Chrome will by default choose setup:active because it is\r\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\r\n    // latency. The case of setup:active allows WebRTC to send a DTLS\r\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\r\n    // Unfortunately, Videobridge will be unable to respond immediately because\r\n    // may not have WebRTC's answer or may have not completed the ICE\r\n    // connectivity establishment. Even more unfortunate is that in the\r\n    // described scenario Chrome's DTLS implementation will insist on\r\n    // retransmitting its ClientHello after a second (the time is in accord\r\n    // with the respective RFC) and will thus cause the whole connection\r\n    // establishment to exceed at least 1 second. To work around Chrome's\r\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\r\n    // default choice of setup:active to setup:passive.\r\n    if (offer && answer\r\n            && offer.media && answer.media\r\n            && offer.media.length === answer.media.length) {\r\n        answer.media.forEach((a, i) => {\r\n            if (SDPUtil.findLine(\r\n                    offer.media[i],\r\n                    'a=setup:actpass',\r\n                    offer.session)) {\r\n                answer.media[i]\r\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\r\n            }\r\n        });\r\n        answer.raw = answer.session + answer.media.join('');\r\n    }\r\n};\r\n\r\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\r\n    return this._createOfferOrAnswer(false /* answer */, constraints);\r\n};\r\n\r\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\r\n    return this._createOfferOrAnswer(true /* offer */, constraints);\r\n};\r\n\r\n/**\r\n * Checks if a camera track has been added to the peerconnection\r\n * @param {TraceablePeerConnection} peerConnection\r\n * @return {boolean} <tt>true</tt> if the peerconnection has\r\n * a camera track for its video source <tt>false</tt> otherwise.\r\n */\r\nfunction hasCameraTrack(peerConnection) {\r\n    return peerConnection.getLocalTracks()\r\n        .some(t => t.videoType === 'camera');\r\n}\r\n\r\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\r\n        isOffer,\r\n        constraints) {\r\n    const logName = isOffer ? 'Offer' : 'Answer';\r\n\r\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\r\n\r\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\r\n        try {\r\n            this.trace(\r\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\r\n\r\n            if (browser.usesPlanB()) {\r\n                // If there are no local video tracks, then a \"recvonly\"\r\n                // SSRC needs to be generated\r\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\r\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\r\n                    this.generateRecvonlySsrc();\r\n                }\r\n\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\r\n                        resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}OnSuccess::postTransform `\r\n                         + '(make primary audio/video ssrcs consistent)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            // configure simulcast for camera tracks always and for\r\n            // desktop tracks only when the testing flag for maxbitrates\r\n            // in config.js is disabled.\r\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\r\n                && (!this.options.capScreenshareBitrate\r\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\r\n                this.trace(\r\n                    `create${logName}`\r\n                        + 'OnSuccess::postTransform (simulcast)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}`\r\n                         + 'OnSuccess::postTransform (rtx modifier)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\r\n            //  details)\r\n            if (!isOffer) {\r\n                const remoteDescription\r\n                    = new SDP(this.remoteDescription.sdp);\r\n                const localDescription = new SDP(resultSdp.sdp);\r\n\r\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\r\n\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: localDescription.raw\r\n                });\r\n            }\r\n\r\n            const ssrcMap = extractSSRCMap(resultSdp);\r\n\r\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\r\n            this._processLocalSSRCsMap(ssrcMap);\r\n\r\n            resolveFn(resultSdp);\r\n        } catch (e) {\r\n            this.trace(`create${logName}OnError`, e);\r\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\r\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\r\n\r\n            rejectFn(e);\r\n        }\r\n    };\r\n\r\n    const handleFailure = (err, rejectFn) => {\r\n        this.trace(`create${logName}OnFailure`, err);\r\n        const eventType\r\n            = isOffer\r\n                ? RTCEvents.CREATE_OFFER_FAILED\r\n                : RTCEvents.CREATE_ANSWER_FAILED;\r\n\r\n        this.eventEmitter.emit(eventType, err, this);\r\n\r\n        rejectFn(err);\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let oaPromise;\r\n\r\n        if (isOffer) {\r\n            oaPromise = this.peerconnection.createOffer(constraints);\r\n        } else {\r\n            oaPromise = this.peerconnection.createAnswer(constraints);\r\n        }\r\n\r\n        oaPromise\r\n            .then(\r\n                sdp => handleSuccess(sdp, resolve, reject),\r\n                error => handleFailure(error, reject));\r\n    });\r\n};\r\n\r\n/**\r\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\r\n * @param {TrackSSRCInfo} ssrcObj\r\n * @return {number|null} the primary SSRC or <tt>null</tt>\r\n */\r\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\r\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\r\n        return ssrcObj.groups[0].ssrcs[0];\r\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\r\n        return ssrcObj.ssrcs[0];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Goes over the SSRC map extracted from the latest local description and tries\r\n * to match them with the local tracks (by MSID). Will update the values\r\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\r\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\r\n    for (const track of this.localTracks.values()) {\r\n        const trackMSID = track.storedMSID;\r\n\r\n        if (ssrcMap.has(trackMSID)) {\r\n            const newSSRC = ssrcMap.get(trackMSID);\r\n\r\n            if (!newSSRC) {\r\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\r\n\r\n                return;\r\n            }\r\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\r\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\r\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\r\n\r\n            // eslint-disable-next-line no-negated-condition\r\n            if (newSSRCNum !== oldSSRCNum) {\r\n                if (oldSSRCNum === null) {\r\n                    logger.info(\r\n                        `Storing new local SSRC for ${track} in ${this}`,\r\n                        newSSRC);\r\n                } else {\r\n                    logger.error(\r\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\r\n                        } with: `, newSSRC);\r\n                }\r\n                this.localSSRCs.set(track.rtcId, newSSRC);\r\n\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\r\n            } else {\r\n                logger.debug(\r\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\r\n                     + `is still up to date in ${this}`);\r\n            }\r\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\r\n            // It is normal to find no SSRCs for a muted video track in\r\n            // the local SDP as the recv-only SSRC is no longer munged in.\r\n            // So log the warning only if it's not a muted video track.\r\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\r\n        }\r\n    }\r\n};\r\n\r\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    this.trace('addIceCandidate', JSON.stringify({\r\n        candidate: candidate.candidate,\r\n        sdpMid: candidate.sdpMid,\r\n        sdpMLineIndex: candidate.sdpMLineIndex,\r\n        usernameFragment: candidate.usernameFragment\r\n    }, null, ' '));\r\n\r\n    return this.peerconnection.addIceCandidate(candidate);\r\n};\r\n\r\n/**\r\n * Obtains call-related stats from the peer connection.\r\n *\r\n * @param {Function} callback - The function to invoke after successfully\r\n * obtaining stats.\r\n * @param {Function} errback - The function to invoke after failing to obtain\r\n * stats.\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\r\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\r\n    // accounting for different getStats apis, making the browser-checking-if\r\n    // unnecessary.\r\n    if (browser.isSafari() || browser.isFirefox() || browser.isReactNative()) {\r\n        // uses the new Promise based getStats\r\n        this.peerconnection.getStats()\r\n            .then(callback)\r\n            .catch(errback || (() => {\r\n\r\n                // Making sure that getStats won't fail if error callback is\r\n                // not passed.\r\n            }));\r\n    } else {\r\n        this.peerconnection.getStats(callback);\r\n    }\r\n};\r\n\r\n/**\r\n * Generates and stores new SSRC info object for given local track.\r\n * The method should be called only for a video track being added to this TPC\r\n * in the muted state (given that the current browser uses this strategy).\r\n * @param {JitsiLocalTrack} track\r\n * @return {TPCSSRCInfo}\r\n */\r\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\r\n    const rtcId = track.rtcId;\r\n    let ssrcInfo = this._getSSRC(rtcId);\r\n\r\n    if (ssrcInfo) {\r\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\r\n    }\r\n\r\n    // configure simulcast for camera tracks always and for\r\n    // desktop tracks only when the testing flag for maxbitrates\r\n    // in config.js is disabled.\r\n    if (this.isSimulcastOn()\r\n        && (!this.options.capScreenshareBitrate\r\n        || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\r\n        ssrcInfo = {\r\n            ssrcs: [],\r\n            groups: []\r\n        };\r\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\r\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\r\n        }\r\n        ssrcInfo.groups.push({\r\n            ssrcs: ssrcInfo.ssrcs.slice(),\r\n            semantics: 'SIM'\r\n        });\r\n    } else {\r\n        ssrcInfo = {\r\n            ssrcs: [ SDPUtil.generateSsrc() ],\r\n            groups: []\r\n        };\r\n    }\r\n    if (!this.options.disableRtx) {\r\n        // Specifically use a for loop here because we'll\r\n        //  be adding to the list we're iterating over, so we\r\n        //  only want to iterate through the items originally\r\n        //  on the list\r\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\r\n\r\n        for (let i = 0; i < currNumSsrcs; ++i) {\r\n            const primarySsrc = ssrcInfo.ssrcs[i];\r\n            const rtxSsrc = SDPUtil.generateSsrc();\r\n\r\n            ssrcInfo.ssrcs.push(rtxSsrc);\r\n            ssrcInfo.groups.push({\r\n                ssrcs: [ primarySsrc, rtxSsrc ],\r\n                semantics: 'FID'\r\n            });\r\n        }\r\n    }\r\n    ssrcInfo.msid = track.storedMSID;\r\n    this.localSSRCs.set(rtcId, ssrcInfo);\r\n\r\n    return ssrcInfo;\r\n};\r\n\r\n/**\r\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\r\n * instance.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.toString = function() {\r\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport SDPUtil from './SDPUtil';\r\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Begin helper functions\r\n */\r\n/**\r\n * Updates or inserts the appropriate rtx information for primarySsrc with\r\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\r\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\r\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\r\n * @param {MLineWrap} mLine\r\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\r\n *  primary ssrc\r\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\r\n */\r\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\r\n    logger.debug(\r\n        `Updating mline to associate ${rtxSsrc}`\r\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\r\n    const primarySsrc = primarySsrcInfo.id;\r\n    const primarySsrcMsid = primarySsrcInfo.msid;\r\n    const primarySsrcCname = primarySsrcInfo.cname;\r\n\r\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\r\n\r\n    if (previousRtxSSRC === rtxSsrc) {\r\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\r\n\r\n        return;\r\n    }\r\n    if (previousRtxSSRC) {\r\n        logger.debug(\r\n            `${primarySsrc} was previously associated with rtx`\r\n            + `${previousRtxSSRC}, removing all references to it`);\r\n\r\n        // Stream already had an rtx ssrc that is different than the one given,\r\n        //  remove all trace of the old one\r\n        mLine.removeSSRC(previousRtxSSRC);\r\n\r\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\r\n        logger.debug(mLine.dumpSSRCGroups());\r\n\r\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\r\n    }\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'cname',\r\n        value: primarySsrcCname\r\n    });\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'msid',\r\n        value: primarySsrcMsid\r\n    });\r\n    mLine.addSSRCGroup({\r\n        semantics: 'FID',\r\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\r\n    });\r\n}\r\n\r\n/**\r\n * End helper functions\r\n */\r\n\r\n/**\r\n * Adds any missing RTX streams for video streams\r\n *  and makes sure that they remain consistent\r\n */\r\nexport default class RtxModifier {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Map of video ssrc to corresponding RTX\r\n         *  ssrc\r\n         */\r\n        this.correspondingRtxSsrcs = new Map();\r\n    }\r\n\r\n    /**\r\n     * Clear the cached map of primary video ssrcs to\r\n     *  their corresponding rtx ssrcs so that they will\r\n     *  not be used for the next call to modifyRtxSsrcs\r\n     */\r\n    clearSsrcCache() {\r\n        this.correspondingRtxSsrcs.clear();\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary video ssrc -> rtx ssrc\r\n     *  mapping to be used in modifyRtxSsrcs\r\n     * @param {Map} ssrcMapping a mapping of primary video\r\n     *  ssrcs to their corresponding rtx ssrcs\r\n     */\r\n    setSsrcCache(ssrcMapping) {\r\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\r\n        this.correspondingRtxSsrcs = ssrcMapping;\r\n    }\r\n\r\n    /**\r\n     * Adds RTX ssrcs for any video ssrcs that don't\r\n     *  already have them.  If the video ssrc has been\r\n     *  seen before, and already had an RTX ssrc generated,\r\n     *  the same RTX ssrc will be used again.\r\n     * @param {string} sdpStr sdp in raw string format\r\n     */\r\n    modifyRtxSsrcs(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        return this.modifyRtxSsrcs2(videoMLine)\r\n            ? sdpTransformer.toRawSDP() : sdpStr;\r\n    }\r\n\r\n    /**\r\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\r\n     *  {@link MLineWrap} instance wrapping video media as an argument.\r\n     * @param {MLineWrap} videoMLine\r\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\r\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\r\n     */\r\n    modifyRtxSsrcs2(videoMLine) {\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return false;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return false;\r\n        }\r\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\r\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\r\n\r\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\r\n            ' making sure all have rtx streams');\r\n        for (const ssrc of primaryVideoSsrcs) {\r\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\r\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\r\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\r\n\r\n            if (correspondingRtxSsrc) {\r\n                logger.debug(\r\n                    'Already have an associated rtx ssrc for'\r\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\r\n            } else {\r\n                logger.debug(\r\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\r\n\r\n                // If there's one in the sdp already for it, we'll just set\r\n                //  that as the corresponding one\r\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\r\n\r\n                if (previousAssociatedRtxStream) {\r\n                    logger.debug(\r\n                        `Rtx stream ${previousAssociatedRtxStream} `\r\n                        + 'already existed in the sdp as an rtx stream for '\r\n                        + `${ssrc}`);\r\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\r\n                } else {\r\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\r\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\r\n                                 + `for ssrc ${ssrc}`);\r\n                }\r\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\r\n                             + `for video ssrc ${ssrc}`);\r\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\r\n            }\r\n            updateAssociatedRtxStream(\r\n                videoMLine,\r\n                {\r\n                    id: ssrc,\r\n                    cname,\r\n                    msid\r\n                },\r\n                correspondingRtxSsrc);\r\n        }\r\n\r\n        // FIXME we're not looking into much details whether the SDP has been\r\n        // modified or not once the precondition requirements are met.\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Strip all rtx streams from the given sdp\r\n     * @param {string} sdpStr sdp in raw string format\r\n     * @returns {string} sdp string with all rtx streams stripped\r\n     */\r\n    stripRtx(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (!videoMLine.containsAnySSRCGroups()) {\r\n            logger.debug('RtxModifier doing nothing, '\r\n              + 'no video ssrcGroups present');\r\n\r\n            return sdpStr;\r\n        }\r\n        const fidGroups = videoMLine.findGroups('FID');\r\n\r\n        // Remove the fid groups from the mline\r\n\r\n        videoMLine.removeGroupsBySemantics('FID');\r\n\r\n        // Get the rtx ssrcs and remove them from the mline\r\n        for (const fidGroup of fidGroups) {\r\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\r\n\r\n            videoMLine.removeSSRC(rtxSsrc);\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    parsePrimarySSRC,\r\n    parseSecondarySSRC,\r\n    SdpTransformWrap\r\n} from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles the work of keeping video ssrcs consistent across multiple\r\n * o/a cycles, making it such that all stream operations can be\r\n * kept local and do not need to be signaled.\r\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\r\n * the primary video stream\r\n */\r\nexport default class SdpConsistency {\r\n    /**\r\n     * Constructor\r\n     * @param {string} logPrefix the log prefix appended to every logged\r\n     * message, currently used to distinguish for which\r\n     * <tt>TraceablePeerConnection</tt> the instance works.\r\n     */\r\n    constructor(logPrefix) {\r\n        this.clearVideoSsrcCache();\r\n        this.logPrefix = logPrefix;\r\n    }\r\n\r\n    /**\r\n     * Clear the cached video primary and primary rtx ssrcs so that\r\n     *  they will not be used for the next call to\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     */\r\n    clearVideoSsrcCache() {\r\n        this.cachedPrimarySsrc = null;\r\n        this.injectRecvOnly = false;\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary ssrc to be used in\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     * @param {number} primarySsrc the primarySsrc to be used\r\n     *  in future calls to makeVideoPrimarySsrcsConsistent\r\n     * @throws Error if <tt>primarySsrc</tt> is not a number\r\n     */\r\n    setPrimarySsrc(primarySsrc) {\r\n        if (typeof primarySsrc !== 'number') {\r\n            throw new Error('Primary SSRC must be a number!');\r\n        }\r\n        this.cachedPrimarySsrc = primarySsrc;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not there is a primary video SSRC cached already.\r\n     * @return {boolean}\r\n     */\r\n    hasPrimarySsrcCached() {\r\n        return Boolean(this.cachedPrimarySsrc);\r\n    }\r\n\r\n    /**\r\n     * Given an sdp string, either:\r\n     *  1) record the primary video and primary rtx ssrcs to be\r\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\r\n     *  2) change the primary and primary rtx ssrcs in the given sdp\r\n     *   to match the ones previously cached\r\n     * @param {string} sdpStr the sdp string to (potentially)\r\n     *  change to make the video ssrcs consistent\r\n     * @returns {string} a (potentially) modified sdp string\r\n     *  with ssrcs consistent with this class' cache\r\n     */\r\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.logPrefix} no 'video' media found in the sdp: `\r\n                    + `${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        if (videoMLine.direction === 'recvonly') {\r\n            // If the mline is recvonly, we'll add the primary\r\n            //  ssrc as a recvonly ssrc\r\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\r\n                videoMLine.addSSRCAttribute({\r\n                    id: this.cachedPrimarySsrc,\r\n                    attribute: 'cname',\r\n                    value: `recvonly-${this.cachedPrimarySsrc}`\r\n                });\r\n            } else {\r\n                logger.info(\r\n                    `${this.logPrefix} no SSRC found for the recvonly video`\r\n                        + 'stream!');\r\n            }\r\n        } else {\r\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\r\n\r\n            if (!newPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency couldn't`\r\n                        + ' parse new primary ssrc');\r\n\r\n                return sdpStr;\r\n            }\r\n            if (this.cachedPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\r\n                        + `${newPrimarySsrc} with cached `\r\n                        + `${this.cachedPrimarySsrc}`);\r\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\r\n                for (const group of videoMLine.ssrcGroups) {\r\n                    if (group.semantics === 'FID') {\r\n                        const primarySsrc = parsePrimarySSRC(group);\r\n                        const rtxSsrc = parseSecondarySSRC(group);\r\n\r\n                        // eslint-disable-next-line max-depth\r\n                        if (primarySsrc === newPrimarySsrc) {\r\n                            group.ssrcs\r\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.cachedPrimarySsrc = newPrimarySsrc;\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\r\n                        + `${this.cachedPrimarySsrc}`);\r\n            }\r\n\r\n            this.injectRecvOnly = true;\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nconst RTCEvents = require('../../service/RTC/RTCEvents');\r\n\r\nlet ttfmTrackerAudioAttached = false;\r\nlet ttfmTrackerVideoAttached = false;\r\n\r\n/**\r\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\r\n * container for every event in the list.\r\n */\r\nconst containerEvents = [\r\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\r\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\r\n];\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiRemoteTrack extends JitsiTrack {\r\n    /**\r\n     * Creates new JitsiRemoteTrack instance.\r\n     * @param {RTC} rtc the RTC service instance.\r\n     * @param {JitsiConference} conference the conference to which this track\r\n     *        belongs to\r\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\r\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\r\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\r\n     *        the new JitsiRemoteTrack\r\n     * @param {MediaType} mediaType the type of the media\r\n     * @param {VideoType} videoType the type of the video if applicable\r\n     * @param {number} ssrc the SSRC number of the Media Stream\r\n     * @param {boolean} muted the initial muted state\r\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\r\n     * P2P session\r\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\r\n     * @constructor\r\n     */\r\n    constructor(\r\n            rtc,\r\n            conference,\r\n            ownerEndpointId,\r\n            stream,\r\n            track,\r\n            mediaType,\r\n            videoType,\r\n            ssrc,\r\n            muted,\r\n            isP2P) {\r\n        super(\r\n            conference,\r\n            stream,\r\n            track,\r\n            () => {\r\n                // Nothing to do if the track is inactive.\r\n            },\r\n            mediaType,\r\n            videoType);\r\n        this.rtc = rtc;\r\n\r\n        // Prevent from mixing up type of SSRC which should be a number\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\r\n        }\r\n        this.ssrc = ssrc;\r\n        this.ownerEndpointId = ownerEndpointId;\r\n        this.muted = muted;\r\n        this.isP2P = isP2P;\r\n\r\n        logger.debug(`New remote track added: ${this}`);\r\n\r\n        // we want to mark whether the track has been ever muted\r\n        // to detect ttfm events for startmuted conferences, as it can\r\n        // significantly increase ttfm values\r\n        this.hasBeenMuted = muted;\r\n\r\n        // Bind 'onmute' and 'onunmute' event handlers\r\n        if (this.rtc && this.track) {\r\n            this._bindTrackHandlers();\r\n        }\r\n        this._containerHandlers = {};\r\n        containerEvents.forEach(event => {\r\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n    /**\r\n     * Attaches the track handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _bindTrackHandlers() {\r\n        this.track.addEventListener('mute', () => this._onTrackMute());\r\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\r\n        this.track.addEventListener('ended', () => {\r\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is muted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackMute() {\r\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is unmuted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackUnmute() {\r\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Sets current muted status and fires an events for the change.\r\n     * @param value the muted status.\r\n     */\r\n    setMute(value) {\r\n        if (this.muted === value) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this.hasBeenMuted = true;\r\n        }\r\n\r\n        // we can have a fake video stream\r\n        if (this.stream) {\r\n            this.stream.muted = value;\r\n        }\r\n\r\n        this.muted = value;\r\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current muted status of the track.\r\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\r\n     * muted and <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        return this.muted;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.ownerEndpointId;\r\n    }\r\n\r\n    /**\r\n     * Return false;\r\n     */\r\n    isLocal() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the synchronization source identifier (SSRC) of this remote\r\n     * track.\r\n     *\r\n     * @returns {number} the SSRC of this remote track.\r\n     */\r\n    getSSRC() {\r\n        return this.ssrc;\r\n    }\r\n\r\n    /**\r\n     * Changes the video type of the track.\r\n     *\r\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\r\n     */\r\n    _setVideoType(type) {\r\n        if (this.videoType === type) {\r\n            return;\r\n        }\r\n        this.videoType = type;\r\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\r\n    }\r\n\r\n    /**\r\n     * Handles track play events.\r\n     */\r\n    _playCallback() {\r\n        const type = this.isVideoTrack() ? 'video' : 'audio';\r\n\r\n        const now = window.performance.now();\r\n\r\n        console.log(`(TIME) Render ${type}:\\t`, now);\r\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\r\n\r\n        // The conference can be started without calling GUM\r\n        // FIXME if there would be a module for connection times this kind\r\n        // of logic (gumDuration or ttfm) should end up there\r\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\r\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\r\n        const gumDuration\r\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\r\n\r\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\r\n        // waits until there are 2 participants to start Jingle sessions.\r\n        const ttfm = now\r\n            - (this.conference.getConnectionTimes()['session.initiate']\r\n                - this.conference.getConnectionTimes()['muc.joined'])\r\n            - gumDuration;\r\n\r\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\r\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\r\n\r\n        Statistics.sendAnalytics(createTtfmEvent(\r\n            {\r\n                'media_type': type,\r\n                muted: this.hasBeenMuted,\r\n                value: ttfm\r\n            }));\r\n\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) {\r\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\r\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\r\n            return;\r\n        }\r\n\r\n        if (this.isAudioTrack()) {\r\n            ttfmTrackerAudioAttached = true;\r\n        }\r\n        if (this.isVideoTrack()) {\r\n            ttfmTrackerVideoAttached = true;\r\n        }\r\n\r\n        container.addEventListener('canplay', this._playCallback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) {\r\n        logger.debug(`Track has been attached to a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.addEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) {\r\n        logger.debug(`Track has been detached from a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.removeEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * An event handler for events triggered by the attached container.\r\n     *\r\n     * @param {string} type - The type of the event.\r\n     */\r\n    _containerEventHandler(type) {\r\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\r\n    }\r\n\r\n    /**\r\n     * Returns a string with a description of the current status of the track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    _getStatus() {\r\n        const { enabled, muted, readyState } = this.track;\r\n\r\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this remote track instance.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\r\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\r\n * description getter. Modifies the SDP, so that it will contain muted local\r\n * video tracks description, even though their underlying {MediaStreamTrack}s\r\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\r\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\r\n * side.\r\n */\r\nexport default class LocalSdpMunger {\r\n\r\n    /**\r\n     * Creates new <tt>LocalSdpMunger</tt> instance.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     */\r\n    constructor(tpc) {\r\n        this.tpc = tpc;\r\n    }\r\n\r\n    /**\r\n     * Makes sure that muted local video tracks associated with the parent\r\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\r\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\r\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\r\n     * removed from the peerconnection).\r\n     *\r\n     * NOTE 1 video track is assumed\r\n     *\r\n     * @param {SdpTransformWrap} transformer the transformer instance which will\r\n     * be used to process the SDP.\r\n     * @return {boolean} <tt>true</tt> if there were any modifications to\r\n     * the SDP wrapped by <tt>transformer</tt>.\r\n     * @private\r\n     */\r\n    _addMutedLocalVideoTracksToSDP(transformer) {\r\n        // Go over each video tracks and check if the SDP has to be changed\r\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\r\n\r\n        if (!localVideos.length) {\r\n            return false;\r\n        } else if (localVideos.length !== 1) {\r\n            logger.error(\r\n                `${this.tpc} there is more than 1 video track ! `\r\n                    + 'Strange things may happen !', localVideos);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.tpc} unable to hack local video track SDP`\r\n                    + '- no \"video\" media');\r\n\r\n            return false;\r\n        }\r\n\r\n        let modified = false;\r\n\r\n        for (const videoTrack of localVideos) {\r\n            const muted = videoTrack.isMuted();\r\n            const mediaStream = videoTrack.getOriginalStream();\r\n\r\n            // During the mute/unmute operation there are periods of time when\r\n            // the track's underlying MediaStream is not added yet to\r\n            // the PeerConnection. The SDP needs to be munged in such case.\r\n            const isInPeerConnection\r\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\r\n            const shouldFakeSdp = muted || !isInPeerConnection;\r\n\r\n            logger.debug(\r\n                `${this.tpc} ${videoTrack} muted: ${\r\n                    muted}, is in PeerConnection: ${\r\n                    isInPeerConnection} => should fake sdp ? : ${\r\n                    shouldFakeSdp}`);\r\n\r\n            if (!shouldFakeSdp) {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            // Inject removed SSRCs\r\n            const requiredSSRCs\r\n                = this.tpc.isSimulcastOn()\r\n                    ? this.tpc.simulcast.ssrcCache\r\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\r\n\r\n            if (!requiredSSRCs.length) {\r\n                logger.error(\r\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\r\n\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            modified = true;\r\n\r\n            // We need to fake sendrecv.\r\n            // NOTE the SDP produced here goes only to Jicofo and is never set\r\n            // as localDescription. That's why\r\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\r\n            videoMLine.direction = 'sendrecv';\r\n\r\n            // Check if the recvonly has MSID\r\n            const primarySSRC = requiredSSRCs[0];\r\n\r\n            // FIXME The cname could come from the stream, but may turn out to\r\n            // be too complex. It is fine to come up with any value, as long as\r\n            // we only care about the actual SSRC values when deciding whether\r\n            // or not an update should be sent.\r\n            const primaryCname = `injected-${primarySSRC}`;\r\n\r\n            for (const ssrcNum of requiredSSRCs) {\r\n                // Remove old attributes\r\n                videoMLine.removeSSRC(ssrcNum);\r\n\r\n                // Inject\r\n                logger.debug(\r\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\r\n                        videoTrack}`);\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'cname',\r\n                    value: primaryCname\r\n                });\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'msid',\r\n                    value: videoTrack.storedMSID\r\n                });\r\n            }\r\n            if (requiredSSRCs.length > 1) {\r\n                const group = {\r\n                    ssrcs: requiredSSRCs.join(' '),\r\n                    semantics: 'SIM'\r\n                };\r\n\r\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\r\n                    // Inject the group\r\n                    logger.debug(\r\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\r\n                        group);\r\n                    videoMLine.addSSRCGroup(group);\r\n                }\r\n            }\r\n\r\n            // Insert RTX\r\n            // FIXME in P2P RTX is used by Chrome regardless of config option\r\n            // status. Because of that 'source-remove'/'source-add'\r\n            // notifications are still sent to remove/add RTX SSRC and FID group\r\n            if (!this.tpc.options.disableRtx) {\r\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\r\n            }\r\n        }\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\r\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\r\n     * sign.\r\n     *\r\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\r\n     * session description which will be modified in place.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _transformMediaIdentifiers(mediaSection) {\r\n        const pcId = this.tpc.id;\r\n\r\n        for (const ssrcLine of mediaSection.ssrcs) {\r\n            switch (ssrcLine.attribute) {\r\n            case 'cname':\r\n            case 'label':\r\n            case 'mslabel':\r\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\r\n                break;\r\n            case 'msid': {\r\n                if (ssrcLine.value) {\r\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\r\n\r\n                    if (streamAndTrackIDs.length === 2) {\r\n                        const streamId = streamAndTrackIDs[0];\r\n                        const trackId = streamAndTrackIDs[1];\r\n\r\n                        ssrcLine.value\r\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\r\n                    } else {\r\n                        logger.warn(\r\n                            'Unable to munge local MSID'\r\n                                + `- weird format detected: ${ssrcLine.value}`);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maybe modifies local description to fake local video tracks SDP when\r\n     * those are muted.\r\n     *\r\n     * @param {object} desc the WebRTC SDP object instance for the local\r\n     * description.\r\n     * @returns {RTCSessionDescription}\r\n     */\r\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\r\n        if (!desc) {\r\n            throw new Error('No local description passed in.');\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(desc.sdp);\r\n\r\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transformer.toRawSDP()\r\n            });\r\n        }\r\n\r\n        return desc;\r\n    }\r\n\r\n    /**\r\n     * This transformation will make sure that stream identifiers are unique\r\n     * across all of the local PeerConnections even if the same stream is used\r\n     * by multiple instances at the same time.\r\n     * Each PeerConnection assigns different SSRCs to the same local\r\n     * MediaStream, but the MSID remains the same as it's used to identify\r\n     * the stream by the WebRTC backend. The transformation will append\r\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\r\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\r\n     *\r\n     * @param {RTCSessionDescription} sessionDesc - The local session\r\n     * description (this instance remains unchanged).\r\n     * @return {RTCSessionDescription} - Transformed local session description\r\n     * (a modified copy of the one given as the input).\r\n     */\r\n    transformStreamIdentifiers(sessionDesc) {\r\n        // FIXME similar check is probably duplicated in all other transformers\r\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\r\n            return sessionDesc;\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\r\n        const audioMLine = transformer.selectMedia('audio');\r\n\r\n        if (audioMLine) {\r\n            this._transformMediaIdentifiers(audioMLine);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (videoMLine) {\r\n            this._transformMediaIdentifiers(videoMLine);\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: sessionDesc.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\n\r\nconst Resolutions = require('../../service/RTC/Resolutions');\r\nconst VideoType = require('../../service/RTC/VideoType');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\r\n * over the data channel.\r\n */\r\nconst STATS_MESSAGE_TYPE = 'stats';\r\n\r\n/**\r\n * See media/engine/simulcast.ss from webrtc.org\r\n */\r\nconst kSimulcastFormats = [\r\n    { width: 1920,\r\n        height: 1080,\r\n        layers: 3,\r\n        max: 5000,\r\n        target: 4000,\r\n        min: 800 },\r\n    { width: 1280,\r\n        height: 720,\r\n        layers: 3,\r\n        max: 2500,\r\n        target: 2500,\r\n        min: 600 },\r\n    { width: 960,\r\n        height: 540,\r\n        layers: 3,\r\n        max: 900,\r\n        target: 900,\r\n        min: 450 },\r\n    { width: 640,\r\n        height: 360,\r\n        layers: 2,\r\n        max: 700,\r\n        target: 500,\r\n        min: 150 },\r\n    { width: 480,\r\n        height: 270,\r\n        layers: 2,\r\n        max: 450,\r\n        target: 350,\r\n        min: 150 },\r\n    { width: 320,\r\n        height: 180,\r\n        layers: 1,\r\n        max: 200,\r\n        target: 150,\r\n        min: 30 }\r\n];\r\n\r\n/**\r\n * The maximum bitrate to use as a measurement against the participant's current\r\n * bitrate. This cap helps in the cases where the participant's bitrate is high\r\n * but not enough to fulfill high targets, such as with 1080p.\r\n */\r\nconst MAX_TARGET_BITRATE = 2500;\r\n\r\n/**\r\n * The initial bitrate for video in kbps.\r\n */\r\nlet startBitrate = 800;\r\n\r\n\r\n/**\r\n * The current cap (in kbps) put on the video stream (or null if there isn't\r\n * a cap).  If there is a cap, we'll take it into account when calculating\r\n * the current quality.\r\n */\r\nlet videoBitrateCap = null;\r\n\r\n/**\r\n * Gets the expected bitrate (in kbps) in perfect network conditions.\r\n * @param simulcast {boolean} whether simulcast is enabled or not.\r\n * @param resolution {Resolution} the resolution.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video started.\r\n */\r\nfunction getTarget(simulcast, resolution, millisSinceStart) {\r\n    // Completely ignore the bitrate in the first 5 seconds, as the first\r\n    // event seems to fire very early and the value is suspicious and causes\r\n    // false positives.\r\n    if (millisSinceStart < 15000) {\r\n        return 1;\r\n    }\r\n\r\n    let target = 0;\r\n    let height = Math.min(resolution.height, resolution.width);\r\n\r\n    if (simulcast) {\r\n        // Find the first format with height no bigger than ours.\r\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\r\n\r\n        if (simulcastFormat) {\r\n            // Sum the target fields from all simulcast layers for the given\r\n            // resolution (e.g. 720p + 360p + 180p).\r\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\r\n                const targetHeight = height;\r\n\r\n                simulcastFormat\r\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\r\n                if (simulcastFormat) {\r\n                    target += simulcastFormat.target;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // See GetMaxDefaultVideoBitrateKbps in\r\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\r\n        const pixels = resolution.width * resolution.height;\r\n\r\n        if (pixels <= 320 * 240) {\r\n            target = 600;\r\n        } else if (pixels <= 640 * 480) {\r\n            target = 1700;\r\n        } else if (pixels <= 960 * 540) {\r\n            target = 2000;\r\n        } else {\r\n            target = 2500;\r\n        }\r\n    }\r\n\r\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\r\n    // of connection quality by 1 second.\r\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\r\n}\r\n\r\n/**\r\n * Gets the bitrate to which GCC would have ramped up in perfect network\r\n * conditions after millisSinceStart milliseconds.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video was enabled.\r\n */\r\nfunction rampUp(millisSinceStart) {\r\n    if (millisSinceStart > 60000) {\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    // According to GCC the send side bandwidth estimation grows with at most\r\n    // 8% per second.\r\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\r\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\r\n}\r\n\r\n/**\r\n * A class which monitors the local statistics coming from the RTC modules, and\r\n * calculates a \"connection quality\" value, in percent, for the media\r\n * connection. A value of 100% indicates a very good network connection, and a\r\n * value of 0% indicates a poor connection.\r\n */\r\nexport default class ConnectionQuality {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param eventEmitter\r\n     * @param options\r\n     */\r\n    constructor(conference, eventEmitter, options) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        /**\r\n         * The owning JitsiConference.\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Holds statistics about the local connection quality.\r\n         */\r\n        this._localStats = {\r\n            connectionQuality: 100,\r\n            jvbRTT: undefined\r\n        };\r\n\r\n        /**\r\n         * The time this._localStats.connectionQuality was last updated.\r\n         */\r\n        this._lastConnectionQualityUpdate = -1;\r\n\r\n        /**\r\n         * Maps a participant ID to an object holding connection quality\r\n         * statistics received from this participant.\r\n         */\r\n        this._remoteStats = {};\r\n\r\n        /**\r\n         * The time that the ICE state last changed to CONNECTED. We use this\r\n         * to calculate how much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeIceConnected = -1;\r\n\r\n        /**\r\n         * The time that local video was unmuted. We use this to calculate how\r\n         * much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeVideoUnmuted = -1;\r\n\r\n        /**\r\n         * The time at which a video bitrate cap was last removed.  We use\r\n         * this to calculate how much time we, as a sender, have had to\r\n         * ramp-up\r\n         */\r\n        this._timeLastBwCapRemoved = -1;\r\n\r\n        // We assume a global startBitrate value for the sake of simplicity.\r\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\r\n            startBitrate = options.config.startBitrate;\r\n        }\r\n\r\n        // TODO: consider ignoring these events and letting the user of\r\n        // lib-jitsi-meet handle these separately.\r\n        conference.on(\r\n            ConferenceEvents.CONNECTION_INTERRUPTED,\r\n            () => {\r\n                this._updateLocalConnectionQuality(0);\r\n                this.eventEmitter.emit(\r\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n                    this._localStats);\r\n                this._broadcastLocalStats();\r\n            });\r\n\r\n        conference.room.addListener(\r\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n            (jingleSession, newState) => {\r\n                if (!jingleSession.isP2P && newState === 'connected') {\r\n                    this._timeIceConnected = window.performance.now();\r\n                }\r\n            });\r\n\r\n        // Listen to DataChannel message from other participants in the\r\n        // conference, and update the _remoteStats field accordingly.\r\n        conference.on(\r\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            (participant, payload) => {\r\n                if (payload.type === STATS_MESSAGE_TYPE) {\r\n                    this._updateRemoteStats(\r\n                        participant.getId(), payload.values);\r\n                }\r\n            });\r\n\r\n        // Listen to local statistics events originating from the RTC module\r\n        // and update the _localStats field.\r\n        // Oh, and by the way, the resolutions of all remote participants are\r\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\r\n        // if one carefully reads the *code* (but not the docs) in\r\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\r\n        // jitsi-meet\r\n        // TODO: We should keep track of the remote resolution in _remoteStats,\r\n        // and notify about changes via separate events.\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._updateLocalStats.bind(this));\r\n\r\n        // Save the last time we were unmuted.\r\n        conference.on(\r\n            ConferenceEvents.TRACK_MUTE_CHANGED,\r\n            track => {\r\n                if (track.isVideoTrack()) {\r\n                    if (track.isMuted()) {\r\n                        this._timeVideoUnmuted = -1;\r\n                    } else {\r\n                        this._maybeUpdateUnmuteTime();\r\n                    }\r\n                }\r\n            });\r\n        conference.on(\r\n            ConferenceEvents.TRACK_ADDED,\r\n            track => {\r\n                if (track.isVideoTrack() && !track.isMuted()) {\r\n                    this._maybeUpdateUnmuteTime();\r\n                }\r\n            });\r\n        conference.rtc.on(\r\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\r\n            track => {\r\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.SERVER_REGION_CHANGED,\r\n            serverRegion => {\r\n                this._localStats.serverRegion = serverRegion;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.PROPERTIES_CHANGED,\r\n            properties => {\r\n                this._localStats.bridgeCount\r\n                    = Number((properties || {})['bridge-count']);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\r\n     * doesn't change it.\r\n     */\r\n    _maybeUpdateUnmuteTime() {\r\n        if (this._timeVideoUnmuted < 0) {\r\n            this._timeVideoUnmuted = window.performance.now();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates a new \"connection quality\" value.\r\n     * @param videoType {VideoType} the type of the video source (camera or\r\n     * a screen capture).\r\n     * @param isMuted {boolean} whether the local video is muted.\r\n     * @param resolutionName {Resolution} the input resolution used by the\r\n     * camera.\r\n     * @returns {*} the newly calculated connection quality.\r\n     */\r\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\r\n\r\n        // resolutionName is an index into Resolutions (where \"720\" is\r\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\r\n        const resolution = Resolutions[resolutionName];\r\n\r\n        let quality = 100;\r\n        let packetLoss;\r\n\r\n        // TODO: take into account packet loss for received streams\r\n\r\n        if (this._localStats.packetLoss) {\r\n            packetLoss = this._localStats.packetLoss.upload;\r\n\r\n            // Ugly Hack Alert (UHA):\r\n            // The packet loss for the upload direction is calculated based on\r\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\r\n            // termination for audio, these reports come from the actual\r\n            // receivers in the conference and therefore the reported packet\r\n            // loss includes loss from the bridge to the receiver.\r\n            // When we are sending video this effect is small, because the\r\n            // number of video packets is much larger than the number of audio\r\n            // packets (and our calculation is based on the total number of\r\n            // received and lost packets).\r\n            // When video is muted, however, the effect might be significant,\r\n            // but we don't know what it is. We do know that it is positive, so\r\n            // as a temporary solution, until RTCP termination is implemented\r\n            // for the audio streams, we relax the packet loss checks here.\r\n            if (isMuted) {\r\n                packetLoss *= 0.5;\r\n            }\r\n        }\r\n\r\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\r\n            || this._timeIceConnected < 0\r\n            || this._timeVideoUnmuted < 0) {\r\n\r\n            // Calculate a value based on packet loss only.\r\n            if (packetLoss === undefined) {\r\n                logger.error('Cannot calculate connection quality, unknown '\r\n                    + 'packet loss.');\r\n                quality = 100;\r\n            } else if (packetLoss <= 2) {\r\n                quality = 100; // Full 5 bars.\r\n            } else if (packetLoss <= 4) {\r\n                quality = 70; // 4 bars\r\n            } else if (packetLoss <= 6) {\r\n                quality = 50; // 3 bars\r\n            } else if (packetLoss <= 8) {\r\n                quality = 30; // 2 bars\r\n            } else if (packetLoss <= 12) {\r\n                quality = 10; // 1 bars\r\n            } else {\r\n                quality = 0; // Still 1 bar, but slower climb-up.\r\n            }\r\n        } else {\r\n            // Calculate a value based on the sending bitrate.\r\n\r\n            // Figure out if simulcast is in use\r\n            const activeTPC = this._conference.getActivePeerConnection();\r\n            const isSimulcastOn\r\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\r\n\r\n            const newVideoBitrateCap\r\n                = activeTPC && activeTPC.bandwidthLimiter\r\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\r\n\r\n            // If we had a cap set but there isn't one now, then it has\r\n            // just been 'lifted', so we should treat this like a new\r\n            // ramp up.\r\n            if (!newVideoBitrateCap && videoBitrateCap) {\r\n                this._timeLastBwCapRemoved = window.performance.now();\r\n\r\n                // Set the start bitrate to whatever we were just capped to\r\n                startBitrate = videoBitrateCap;\r\n            }\r\n            videoBitrateCap = newVideoBitrateCap;\r\n\r\n            // time since sending of video was enabled.\r\n            const millisSinceStart = window.performance.now()\r\n                - Math.max(this._timeVideoUnmuted,\r\n                    this._timeIceConnected,\r\n                    this._timeLastBwCapRemoved);\r\n\r\n            // expected sending bitrate in perfect conditions\r\n            let target\r\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\r\n\r\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\r\n\r\n            if (videoBitrateCap) {\r\n                target = Math.min(target, videoBitrateCap);\r\n            }\r\n\r\n            quality = 100 * this._localStats.bitrate.upload / target;\r\n\r\n            // Whatever the bitrate, drop early if there is significant loss\r\n            if (packetLoss && packetLoss >= 10) {\r\n                quality = Math.min(quality, 30);\r\n            }\r\n        }\r\n\r\n        // Make sure that the quality doesn't climb quickly\r\n        if (this._lastConnectionQualityUpdate > 0) {\r\n            const maxIncreasePerSecond = 2;\r\n            const prevConnectionQuality = this._localStats.connectionQuality;\r\n            const diffSeconds\r\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\r\n                    / 1000;\r\n\r\n            quality\r\n                = Math.min(\r\n                    quality,\r\n                    prevConnectionQuality\r\n                        + (diffSeconds * maxIncreasePerSecond));\r\n        }\r\n\r\n        return Math.min(100, quality);\r\n    }\r\n\r\n    /**\r\n     * Updates the localConnectionQuality value\r\n     * @param values {number} the new value. Should be in [0, 100].\r\n     */\r\n    _updateLocalConnectionQuality(value) {\r\n        this._localStats.connectionQuality = value;\r\n        this._lastConnectionQualityUpdate = window.performance.now();\r\n    }\r\n\r\n    /**\r\n     * Broadcasts the local statistics to all other participants in the\r\n     * conference.\r\n     */\r\n    _broadcastLocalStats() {\r\n        // Send only the data that remote participants care about.\r\n        const data = {\r\n            bitrate: this._localStats.bitrate,\r\n            packetLoss: this._localStats.packetLoss,\r\n            connectionQuality: this._localStats.connectionQuality,\r\n            jvbRTT: this._localStats.jvbRTT,\r\n            serverRegion: this._localStats.serverRegion,\r\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\r\n            avgAudioLevels: this._localStats.localAvgAudioLevels\r\n        };\r\n\r\n        try {\r\n            this._conference.broadcastEndpointMessage({\r\n                type: STATS_MESSAGE_TYPE,\r\n                values: data });\r\n        } catch (e) {\r\n            // We often hit this in the beginning of a call, before the data\r\n            // channel is ready. It is not a big problem, because we will\r\n            // send the statistics again after a few seconds, and the error is\r\n            // already logged elsewhere. So just ignore it.\r\n\r\n            // let errorMsg = \"Failed to broadcast local stats\";\r\n            // logger.error(errorMsg, e);\r\n            // GlobalOnErrorHandler.callErrorHandler(\r\n            //    new Error(errorMsg + \": \" + e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the local statistics\r\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\r\n     * the stats\r\n     * @param data new statistics\r\n     */\r\n    _updateLocalStats(tpc, data) {\r\n        // Update jvbRTT\r\n        if (!tpc.isP2P) {\r\n            const jvbRTT\r\n                = data.transport\r\n                    && data.transport.length && data.transport[0].rtt;\r\n\r\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\r\n        }\r\n\r\n        // Do not continue with processing of other stats if they do not\r\n        // originate from the active peerconnection\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        let key;\r\n        const updateLocalConnectionQuality\r\n            = !this._conference.isConnectionInterrupted();\r\n        const localVideoTrack\r\n            = this._conference.getLocalVideoTrack();\r\n        const videoType\r\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\r\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\r\n        const resolution = localVideoTrack\r\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\r\n\r\n        if (!isMuted) {\r\n            this._maybeUpdateUnmuteTime();\r\n        }\r\n\r\n        // Copy the fields already in 'data'.\r\n        for (key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                this._localStats[key] = data[key];\r\n            }\r\n        }\r\n\r\n        // And re-calculate the connectionQuality field.\r\n        if (updateLocalConnectionQuality) {\r\n            this._updateLocalConnectionQuality(\r\n                this._calculateConnectionQuality(\r\n                    videoType,\r\n                    isMuted,\r\n                    resolution));\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._localStats);\r\n        this._broadcastLocalStats();\r\n    }\r\n\r\n    /**\r\n     * Updates remote statistics\r\n     * @param id the id of the remote participant\r\n     * @param data the statistics received\r\n     */\r\n    _updateRemoteStats(id, data) {\r\n        // Use only the fields we need\r\n        this._remoteStats[id] = {\r\n            bitrate: data.bitrate,\r\n            packetLoss: data.packetLoss,\r\n            connectionQuality: data.connectionQuality,\r\n            jvbRTT: data.jvbRTT,\r\n            serverRegion: data.serverRegion,\r\n            maxEnabledResolution: data.maxEnabledResolution,\r\n            avgAudioLevels: data.avgAudioLevels\r\n        };\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n            id,\r\n            this._remoteStats[id]);\r\n    }\r\n\r\n    /**\r\n     * Returns the local statistics.\r\n     * Exported only for use in jitsi-meet-torture.\r\n     */\r\n    getStats() {\r\n        return this._localStats;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nimport { default as networkInfo, NETWORK_INFO_EVENT } from './NetworkInfo';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Helper class for handling ICE event delay in combination with internet online/offline status check.\r\n */\r\nclass DelayedIceFailedEvent {\r\n    /**\r\n     * A constructor.\r\n     * @param {function} emitIceFailed - Will be called by this class to emit ICE failed conference event.\r\n     * @param {number} delay - The delay for ICE failed in milliseconds since the event occurred on the peerconnection\r\n     * or the internet came back online.\r\n     */\r\n    constructor(emitIceFailed, delay) {\r\n        this._emitIceFailed = emitIceFailed;\r\n        this._delay = delay;\r\n    }\r\n\r\n    /**\r\n     * Starts the event delay and internet status check logic.\r\n     */\r\n    start() {\r\n        this._onlineListener\r\n            = networkInfo.addEventListener(\r\n                NETWORK_INFO_EVENT,\r\n                () => this._maybeSetDelayTimeout());\r\n        this._maybeSetDelayTimeout();\r\n    }\r\n\r\n    /**\r\n     * Cancels the task.\r\n     */\r\n    stop() {\r\n        this._onlineListener && this._onlineListener();\r\n        this._onlineListener = undefined;\r\n        clearTimeout(this._delayTimeout);\r\n    }\r\n\r\n    /**\r\n     * Resets the timer delay if the internet status is online.\r\n     * @private\r\n     */\r\n    _maybeSetDelayTimeout() {\r\n        clearTimeout(this._delayTimeout);\r\n\r\n        if (networkInfo.isOnline()) {\r\n            logger.info(`Will emit ICE failed in ${this._delay}ms`);\r\n            this._delayTimeout = setTimeout(() => this._emitIceFailed(), this._delay);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\r\n *\r\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\r\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\r\n * the internet offline status then the time will start counting after the internet comes back online.\r\n *\r\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\r\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\r\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\r\n */\r\nexport default class IceFailedHandling {\r\n    /**\r\n     * Creates new {@code DelayedIceFailed} task.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n    }\r\n\r\n    /**\r\n     * Starts the task.\r\n     */\r\n    start() {\r\n        if (!this._conference.options.config.enableIceRestart) {\r\n            logger.info('ICE failed, but ICE restarts are disabled');\r\n            this._delayedIceFailedEvent = new DelayedIceFailedEvent(() => {\r\n                this._conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.ICE_FAILED);\r\n            }, 15000);\r\n            this._delayedIceFailedEvent.start();\r\n\r\n            return;\r\n        } else if (!this._conference.xmpp.isPingSupported()) {\r\n            // Let Jicofo know that the JVB's ICE connection has failed\r\n            logger.info('PING not supported - sending ICE failed notification immediately');\r\n            this._conference.jvbJingleSession.sendIceFailedNotification();\r\n\r\n            return;\r\n        }\r\n\r\n        // The 65 seconds are greater than the default Prosody's BOSH\r\n        // timeout of 60. This gives some time for the XMPP connection\r\n        // to recover.\r\n        this._conference.xmpp.ping(65000).then(\r\n            () => {\r\n                if (this._canceled) {\r\n                    return;\r\n                }\r\n\r\n                const jvbConnection = this._conference.jvbJingleSession;\r\n                const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\r\n\r\n                if (!jvbConnection) {\r\n                    logger.warn('Not sending ICE failed - no JVB connection');\r\n                } else if (jvbConnIceState === 'connected') {\r\n                    logger.info('ICE connection restored - not sending ICE failed');\r\n                } else {\r\n                    this._iceFailedTimeout = window.setTimeout(() => {\r\n                        logger.info(`Sending ICE failed - the connection has not recovered: ${jvbConnIceState}`);\r\n                        this._iceFailedTimeout = undefined;\r\n                        jvbConnection.sendIceFailedNotification();\r\n                    }, 2000);\r\n                }\r\n            },\r\n            error => {\r\n                logger.error('PING error/timeout - not sending ICE failed', error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Cancels the task.\r\n     */\r\n    cancel() {\r\n        this._canceled = true;\r\n        window.clearTimeout(this._iceFailedTimeout);\r\n        this._delayedIceFailedEvent && this._delayedIceFailedEvent.stop();\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport browser from '../browser';\r\n\r\nimport * as DetectionEvents from './DetectionEvents';\r\n\r\n// We wait a certain time interval for constant silence input from the current device to account for\r\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\r\n// an audio track is added to the tcr.\r\n// Potential improvement - add this as a configurable parameter.\r\nconst SILENCE_PERIOD_MS = 4000;\r\n\r\n/**\r\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\r\n * state must be constant for a configured amount of time in order for the event to be triggered.\r\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n * @fires DetectionEvents.NO_AUDIO_INPUT\r\n */\r\nexport default class NoAudioSignalDetection extends EventEmitter {\r\n    /**\r\n     * Creates new NoAudioSignalDetection.\r\n     *\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conference = conference;\r\n        this._timeoutTrigger = null;\r\n        this._hasAudioInput = null;\r\n\r\n        if (!browser.supportsReceiverStats()) {\r\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\r\n        }\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Clear the timeout state.\r\n     */\r\n    _clearTriggerTimeout() {\r\n        clearTimeout(this._timeoutTrigger);\r\n        this._timeoutTrigger = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Generated event triggered by a change in the current conference audio input state.\r\n     *\r\n     * @param {*} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n     */\r\n    _handleAudioInputStateChange(audioLevel) {\r\n        // Current audio input state of the active local track in the conference, true for audio input false for no\r\n        // audio input.\r\n        const status = audioLevel !== 0;\r\n\r\n        // If this is the first audio event picked up or the current status is different from the previous trigger\r\n        // the event.\r\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\r\n            this._hasAudioInput = status;\r\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate event triggered by a prolonged period of no audio input.\r\n     *\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.NO_AUDIO_INPUT\r\n     */\r\n    _handleNoAudioInputDetection(audioLevel) {\r\n        if (this._eventFired) {\r\n            return;\r\n        }\r\n\r\n        if (audioLevel === 0 && !this._timeoutTrigger) {\r\n            this._timeoutTrigger = setTimeout(() => {\r\n                this._eventFired = true;\r\n\r\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\r\n            }, SILENCE_PERIOD_MS);\r\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\r\n            this._clearTriggerTimeout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\r\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\r\n     * being reported.\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\r\n     */\r\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        // We are interested in the local audio streams\r\n        if (!isLocal || !this._audioTrack) {\r\n            return;\r\n        }\r\n\r\n        // Get currently active local tracks from the TraceablePeerConnection\r\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\r\n\r\n        // Only target the current active track in the tpc. For some reason audio levels for previous\r\n        // devices are also picked up from the PeerConnection so we filter them out.\r\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\r\n            return;\r\n        }\r\n\r\n        // First handle audio input state change. In case the state changed to no input the no audio input event\r\n        // can try to fire again.\r\n        this._handleAudioInputStateChange(audioLevel);\r\n        this._handleNoAudioInputDetection(audioLevel);\r\n    }\r\n\r\n    /**\r\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\r\n     * Only take into account local audio tracks.\r\n     *\r\n     * @param {JitsiTrack} track - The added JitsiTrack.\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Reset state for the new track.\r\n            this._audioTrack = track;\r\n            this._eventFired = false;\r\n            this._clearTriggerTimeout();\r\n\r\n            // Listen for the audio levels on the newly added audio track\r\n            if (browser.supportsReceiverStats()) {\r\n                track.on(\r\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                    }\r\n                );\r\n                track.on(\r\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                        this._handleAudioInputStateChange(audioLevel);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\n\r\n/**\r\n * The value which we use to say, every sound over this threshold\r\n * is talking on the mic.\r\n * @type {number}\r\n */\r\nconst SPEECH_DETECT_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\r\n * currently used.\r\n * Listens for changes in the audio level changes of the local p2p audio track\r\n * or remote p2p one and fires dominant speaker events to be able to use\r\n * features depending on those events (speaker stats), to make them work without\r\n * the video bridge.\r\n */\r\nexport default class P2PDominantSpeakerDetection {\r\n    /**\r\n     * Creates P2PDominantSpeakerDetection\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this._audioLevel.bind(this));\r\n\r\n        this.myUserID = this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all streams in the conference.\r\n     *\r\n     * @param {String} id - The participant id\r\n     * @param {number} audioLevel - The audio level.\r\n     */\r\n    _audioLevel(id, audioLevel) {\r\n\r\n        // we do not process if p2p is not active\r\n        // or audio level is under certain threshold\r\n        // or if the audio level is for local audio track which is muted\r\n        if (!this.conference.isP2PActive()\r\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\r\n            || (id === this.myUserID\r\n                    && this.conference.getLocalAudioTrack().isMuted())) {\r\n            return;\r\n        }\r\n\r\n        this.conference.rtc.eventEmitter.emit(\r\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n            id);\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\r\n\r\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n/**\r\n * The average value VAD needs to be under over a period of time to be considered noise.\r\n * @type {number}\r\n */\r\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\r\n\r\n/**\r\n * The average values that audio input need to be over to be considered loud.\r\n * @type {number}\r\n */\r\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst VAD_SCORE_TRIGGER = 0.2;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\r\n\r\n/**\r\n * Detect if provided VAD score and PCM data is considered noise.\r\n */\r\nexport default class VADNoiseDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADNoiseDetection</tt>\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Buffer that keeps audio level samples for a period of time.\r\n         */\r\n        this._audioLvlArray = [];\r\n\r\n        /**\r\n         * Current state of the service, if it's not active no processing will occur.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * If the score is above the set threshold fire the event.\r\n     * @returns {void}\r\n     * @fires VAD_NOISY_DEVICE\r\n     */\r\n    _calculateNoisyScore() {\r\n        const scoreAvg = calculateAverage(this._scoreArray);\r\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\r\n\r\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\r\n            this.emit(VAD_NOISY_DEVICE);\r\n\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Record the vad score and average volume in the appropriate buffers.\r\n     *\r\n     * @param {number} vadScore\r\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\r\n     */\r\n    _recordValues(vadScore, avgAudioLvl) {\r\n        this._scoreArray.push(vadScore);\r\n        this._audioLvlArray.push(avgAudioLvl);\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is not muted.\r\n        this._setActiveState(!isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        this._audioLvlArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            // Filter and calculate sample average so we don't have to process one large array at a time.\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n\r\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\r\n\r\n            return;\r\n        }\r\n\r\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\r\n        // noise\r\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n            const avgAudioLvl = calculateAverage(posAudioLevels);\r\n\r\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\r\n                this._processing = true;\r\n                this._recordValues(vadScore.score, avgAudioLvl);\r\n\r\n                // Once the preset timeout executes the final score will be calculated.\r\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage } from '../util/MathUtil';\r\n\r\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n\r\n/**\r\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\r\n * @type {number}\r\n */\r\nconst VAD_AVG_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\r\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\r\n * @type {number}\r\n */\r\nconst VAD_VOICE_LEVEL = 0.9;\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\r\n\r\n/**\r\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\r\n */\r\nexport default class VADTalkMutedDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADTalkMutedDetection</tt>\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Current mute state of the audio track being monitored.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateVADScore = this._calculateVADScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * @returns {void}\r\n     * @fires VAD_TALK_WHILE_MUTED\r\n     */\r\n    _calculateVADScore() {\r\n        const score = calculateAverage(this._scoreArray);\r\n\r\n        if (score > VAD_AVG_THRESHOLD) {\r\n            this.emit(VAD_TALK_WHILE_MUTED);\r\n\r\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\r\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is muted.\r\n        this._setActiveState(isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            return;\r\n        }\r\n\r\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\r\n        // there is no need to check for rogue events.\r\n        if (vadScore.score > VAD_VOICE_LEVEL) {\r\n            this._processing = true;\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            // Start gathering VAD scores for the configured period of time.\r\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\n\r\nimport E2EEContext from './E2EEContext';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\r\n */\r\nexport class E2EEncryption {\r\n    /**\r\n     * A constructor.\r\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\r\n     * @param {Object} options\r\n     * @param {string} options.salt - Salt to be used for key deviation. Check {@link E2EEContext} for more details.\r\n     */\r\n    constructor(conference, { salt }) {\r\n        this.conference = conference;\r\n        this._e2eeCtx = new E2EEContext({ salt });\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            this._onMediaSessionStarted.bind(this));\r\n\r\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\r\n        //  added instead of shenanigans around conference track events and track muted.\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_ADDED,\r\n            track => track.isLocal() && this._onLocalTrackAdded(track));\r\n        this.conference.rtc.on(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n            this._trackMuteChanged.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Setups E2E encryption for the new session.\r\n     * @param {JingleSessionPC} session - the new media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(session) {\r\n        const localTracks = this.conference.getLocalTracks();\r\n\r\n        for (const track of localTracks) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\r\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\r\n     * @private\r\n     */\r\n    _onLocalTrackAdded(track) {\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the key to be used for End-To-End encryption.\r\n     *\r\n     * @param {string} key - the key to be used.\r\n     * @returns {void}\r\n     */\r\n    setKey(key) {\r\n        this._e2eeCtx.setKey(key);\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the receiving side.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _setupReceiverE2EEForTrack(tpc, track) {\r\n        const receiver = tpc.findReceiverForTrack(track.track);\r\n\r\n        if (receiver) {\r\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the sending side.\r\n     *\r\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\r\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\r\n     * @returns {void}\r\n     */\r\n    _setupSenderE2EEForTrack(session, track) {\r\n        const pc = session.peerconnection;\r\n        const sender = pc && pc.findSenderForTrack(track.track);\r\n\r\n        if (sender) {\r\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the sender that is created for the unmuted local video track.\r\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\r\n     * @private\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                this._setupSenderE2EEForTrack(session, track);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport { createWorkerScript } from './Worker';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Flag to set on senders / receivers to avoid setting up the encryption transform\r\n// more than once.\r\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\r\n\r\n/**\r\n * Context encapsulating the cryptography bits required for E2EE.\r\n * This uses the WebRTC Insertable Streams API which is explained in\r\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\r\n * that provides access to the encoded frames and allows them to be transformed.\r\n *\r\n * The encoded frame format is explained below in the _encodeFunction method.\r\n * High level design goals were:\r\n * - do not require changes to existing SFUs and retain (VP8) metadata.\r\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\r\n * - allow for the key to be rotated frequently.\r\n */\r\nexport default class E2EEcontext {\r\n\r\n    /**\r\n     * Build a new E2EE context instance, which will be used in a given conference.\r\n     *\r\n     * @param {string} options.salt - Salt to be used for key deviation.\r\n     *      FIXME: We currently use the MUC room name for this which has the same lifetime\r\n     *      as this context. While not (pseudo)random as recommended in\r\n     *        https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\r\n     *      this is easily available and the same for all participants.\r\n     *      We currently do not enforce a minimum length of 16 bytes either.\r\n     */\r\n    constructor(options) {\r\n        this._options = options;\r\n\r\n        // Initialize the E2EE worker.\r\n        this._worker = new Worker(createWorkerScript(), {\r\n            name: 'E2EE Worker'\r\n        });\r\n        this._worker.onerror = e => logger.onerror(e);\r\n\r\n        // Initialize the salt and convert it once.\r\n        const encoder = new TextEncoder();\r\n\r\n        // Send initial options to worker.\r\n        this._worker.postMessage({\r\n            operation: 'initialize',\r\n            salt: encoder.encode(options.salt)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\r\n     * a frame decoder.\r\n     *\r\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\r\n     * @param {string} kind - The kind of track this receiver belongs to.\r\n     * @param {string} participantId - The participant id that this receiver belongs to.\r\n     */\r\n    handleReceiver(receiver, kind, participantId) {\r\n        if (receiver[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        receiver[kJitsiE2EE] = true;\r\n\r\n        let receiverStreams;\r\n\r\n        if (receiver.createEncodedStreams) {\r\n            receiverStreams = receiver.createEncodedStreams();\r\n        } else {\r\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\r\n                : receiver.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'decode',\r\n            readableStream: receiverStreams.readableStream,\r\n            writableStream: receiverStreams.writableStream,\r\n            participantId\r\n        }, [ receiverStreams.readableStream, receiverStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\r\n     * a frame encoder.\r\n     *\r\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\r\n     * @param {string} kind - The kind of track this sender belongs to.\r\n     * @param {string} participantId - The participant id that this sender belongs to.\r\n     */\r\n    handleSender(sender, kind, participantId) {\r\n        if (sender[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        sender[kJitsiE2EE] = true;\r\n\r\n        let senderStreams;\r\n\r\n        if (sender.createEncodedStreams) {\r\n            senderStreams = sender.createEncodedStreams();\r\n        } else {\r\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\r\n                : sender.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'encode',\r\n            readableStream: senderStreams.readableStream,\r\n            writableStream: senderStreams.writableStream,\r\n            participantId\r\n        }, [ senderStreams.readableStream, senderStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Sets the key to be used for E2EE.\r\n     *\r\n     * @param {string} value - Value to be used as the new key. May be falsy to disable end-to-end encryption.\r\n     */\r\n    setKey(value) {\r\n        let key;\r\n\r\n        if (value) {\r\n            const encoder = new TextEncoder();\r\n\r\n            key = encoder.encode(value);\r\n        } else {\r\n            key = false;\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'setKey',\r\n            key\r\n        });\r\n    }\r\n}\r\n","// Worker for E2EE/Insertable streams. Currently served as an inline blob.\r\nconst code = `\r\n    // Polyfill RTCEncoded(Audio|Video)Frame.getMetadata() (not available in M83, available M84+).\r\n    // The polyfill can not be done on the prototype since its not exposed in workers. Instead,\r\n    // it is done as another transformation to keep it separate.\r\n    function polyFillEncodedFrameMetadata(encodedFrame, controller) {\r\n      if (!encodedFrame.getMetadata) {\r\n        encodedFrame.getMetadata = function() {\r\n          return {\r\n            // TODO: provide a more complete polyfill based on additionalData for video.\r\n            synchronizationSource: this.synchronizationSource,\r\n            contributingSources: this.contributingSources\r\n          };\r\n        };\r\n      }\r\n      controller.enqueue(encodedFrame);\r\n    }\r\n\r\n    // We use a ringbuffer of keys so we can change them and still decode packets that were\r\n    // encrypted with an old key.\r\n    // In the future when we dont rely on a globally shared key we will actually use it. For\r\n    // now set the size to 1 which means there is only a single key. This causes some\r\n    // glitches when changing the key but its ok.\r\n    const keyRingSize = 1;\r\n\r\n    // We use a 96 bit IV for AES GCM. This is signalled in plain together with the\r\n    // packet. See https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\r\n    const ivLength = 12;\r\n\r\n    // We use a 128 bit key for AES GCM.\r\n    const keyGenParameters = {\r\n        name: 'AES-GCM',\r\n        length: 128\r\n    };\r\n\r\n    // We copy the first bytes of the VP8 payload unencrypted.\r\n    // For keyframes this is 10 bytes, for non-keyframes (delta) 3. See\r\n    //   https://tools.ietf.org/html/rfc6386#section-9.1\r\n    // This allows the bridge to continue detecting keyframes (only one byte needed in the JVB)\r\n    // and is also a bit easier for the VP8 decoder (i.e. it generates funny garbage pictures\r\n    // instead of being unable to decode).\r\n    // This is a bit for show and we might want to reduce to 1 unconditionally in the final version.\r\n    //\r\n    // For audio (where frame.type is not set) we do not encrypt the opus TOC byte:\r\n    //   https://tools.ietf.org/html/rfc6716#section-3.1\r\n    const unencryptedBytes = {\r\n        key: 10,\r\n        delta: 3,\r\n        undefined: 1 // frame.type is not set on audio\r\n    };\r\n\r\n    // Salt used in key derivation\r\n    // FIXME: We currently use the MUC room name for this which has the same lifetime\r\n    // as this worker. While not (pseudo)random as recommended in\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\r\n    // this is easily available and the same for all participants.\r\n    // We currently do not enforce a minimum length of 16 bytes either.\r\n    let keySalt;\r\n\r\n    // Raw keyBytes used to derive the key.\r\n    let keyBytes;\r\n\r\n    /**\r\n     * Derives a AES-GCM key from the input using PBKDF2\r\n     * The key length can be configured above and should be either 128 or 256 bits.\r\n     * @param {Uint8Array} keyBytes - Value to derive key from\r\n     * @param {Uint8Array} salt - Salt used in key derivation\r\n     */\r\n    async function deriveKey(keyBytes, salt) {\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\r\n        const material = await crypto.subtle.importKey('raw', keyBytes,\r\n            'PBKDF2', false, [ 'deriveBits', 'deriveKey' ]);\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#PBKDF2\r\n        return crypto.subtle.deriveKey({\r\n            name: 'PBKDF2',\r\n            salt,\r\n            iterations: 100000,\r\n            hash: 'SHA-256'\r\n        }, material, keyGenParameters, false, [ 'encrypt', 'decrypt' ]);\r\n    }\r\n\r\n\r\n    /** Per-participant context holding the cryptographic keys and\r\n     * encode/decode functions\r\n     */\r\n    class Context {\r\n        /**\r\n         * @param {string} id - local muc resourcepart\r\n         */\r\n        constructor(id) {\r\n            // An array (ring) of keys that we use for sending and receiving.\r\n            this._cryptoKeyRing = new Array(keyRingSize);\r\n\r\n            // A pointer to the currently used key.\r\n            this._currentKeyIndex = -1;\r\n\r\n            // We keep track of how many frames we have sent per ssrc.\r\n            // Starts with a random offset similar to the RTP sequence number.\r\n            this._sendCounts = new Map();\r\n\r\n            this._id = id;\r\n        }\r\n\r\n        /**\r\n         * Derives a per-participant key.\r\n         * @param {Uint8Array} keyBytes - Value to derive key from\r\n         * @param {Uint8Array} salt - Salt used in key derivation\r\n         */\r\n        async deriveKey(keyBytes, salt) {\r\n            const encoder = new TextEncoder();\r\n            const idBytes = encoder.encode(this._id);\r\n            // Separate both parts by a null byte to avoid ambiguity attacks.\r\n            const participantSalt = new Uint8Array(salt.byteLength + idBytes.byteLength + 1);\r\n            participantSalt.set(salt);\r\n            participantSalt.set(idBytes, salt.byteLength + 1);\r\n\r\n            return deriveKey(keyBytes, participantSalt);\r\n        }\r\n        /**\r\n         * Sets a key and starts using it for encrypting.\r\n         * @param {CryptoKey} key\r\n         */\r\n        setKey(key) {\r\n            this._currentKeyIndex++;\r\n            this._cryptoKeyRing[this._currentKeyIndex % this._cryptoKeyRing.length] = key;\r\n        }\r\n\r\n        /**\r\n         * Construct the IV used for AES-GCM and sent (in plain) with the packet similar to\r\n         * https://tools.ietf.org/html/rfc7714#section-8.1\r\n         * It concatenates\r\n         * - the 32 bit synchronization source (SSRC) given on the encoded frame,\r\n         * - the 32 bit rtp timestamp given on the encoded frame,\r\n         * - a send counter that is specific to the SSRC. Starts at a random number.\r\n         * The send counter is essentially the pictureId but we currently have to implement this ourselves.\r\n         * There is no XOR with a salt. Note that this IV leaks the SSRC to the receiver but since this is\r\n         * randomly generated and SFUs may not rewrite this is considered acceptable.\r\n         * The SSRC is used to allow demultiplexing multiple streams with the same key, as described in\r\n         *   https://tools.ietf.org/html/rfc3711#section-4.1.1\r\n         * The RTP timestamp is 32 bits and advances by the codec clock rate (90khz for video, 48khz for\r\n         * opus audio) every second. For video it rolls over roughly every 13 hours.\r\n         * The send counter will advance at the frame rate (30fps for video, 50fps for 20ms opus audio)\r\n         * every second. It will take a long time to roll over.\r\n         *\r\n         * See also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\r\n         */\r\n        makeIV(synchronizationSource, timestamp) {\r\n            const iv = new ArrayBuffer(ivLength);\r\n            const ivView = new DataView(iv);\r\n\r\n            // having to keep our own send count (similar to a picture id) is not ideal.\r\n            if (!this._sendCounts.has(synchronizationSource)) {\r\n                // Initialize with a random offset, similar to the RTP sequence number.\r\n                this._sendCounts.set(synchronizationSource, Math.floor(Math.random() * 0xFFFF));\r\n            }\r\n            const sendCount = this._sendCounts.get(synchronizationSource);\r\n\r\n            ivView.setUint32(0, synchronizationSource);\r\n            ivView.setUint32(4, timestamp);\r\n            ivView.setUint32(8, sendCount % 0xFFFF);\r\n\r\n            this._sendCounts.set(synchronizationSource, sendCount + 1);\r\n\r\n            return iv;\r\n        }\r\n\r\n        /**\r\n         * Function that will be injected in a stream and will encrypt the given encoded frames.\r\n         *\r\n         * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\r\n         * @param {TransformStreamDefaultController} controller - TransportStreamController.\r\n         *\r\n         * The packet format is described below. One of the design goals was to not require\r\n         * changes to the SFU which for video requires not encrypting the keyframe bit of VP8\r\n         * as SFUs need to detect a keyframe (framemarking or the generic frame descriptor will\r\n         * solve this eventually). This also \"hides\" that a client is using E2EE a bit.\r\n         *\r\n         * Note that this operates on the full frame, i.e. for VP8 the data described in\r\n         *   https://tools.ietf.org/html/rfc6386#section-9.1\r\n         *\r\n         * The VP8 payload descriptor described in\r\n         *   https://tools.ietf.org/html/rfc7741#section-4.2\r\n         * is part of the RTP packet and not part of the frame and is not controllable by us.\r\n         * This is fine as the SFU keeps having access to it for routing.\r\n         *\r\n         * The encrypted frame is formed as follows:\r\n         * 1) Leave the first (10, 3, 1) bytes unencrypted, depending on the frame type and kind.\r\n         * 2) Form the GCM IV for the frame as described above.\r\n         * 3) Encrypt the rest of the frame using AES-GCM.\r\n         * 4) Allocate space for the encrypted frame.\r\n         * 5) Copy the unencrypted bytes to the start of the encrypted frame.\r\n         * 6) Append the ciphertext to the encrypted frame.\r\n         * 7) Append the IV.\r\n         * 8) Append a single byte for the key identifier. TODO: we don't need all the bits.\r\n         * 9) Enqueue the encrypted frame for sending.\r\n         */\r\n        encodeFunction(encodedFrame, controller) {\r\n            const keyIndex = this._currentKeyIndex % this._cryptoKeyRing.length;\r\n\r\n            if (this._cryptoKeyRing[keyIndex]) {\r\n                const iv = this.makeIV(encodedFrame.getMetadata().synchronizationSource, encodedFrame.timestamp);\r\n\r\n                return crypto.subtle.encrypt({\r\n                    name: 'AES-GCM',\r\n                    iv,\r\n                    additionalData: new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])\r\n                }, this._cryptoKeyRing[keyIndex], new Uint8Array(encodedFrame.data,\r\n                    unencryptedBytes[encodedFrame.type]))\r\n                .then(cipherText => {\r\n                    const newData = new ArrayBuffer(unencryptedBytes[encodedFrame.type] + cipherText.byteLength\r\n                        + iv.byteLength + 1);\r\n                    const newUint8 = new Uint8Array(newData);\r\n\r\n                    newUint8.set(\r\n                        new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])); // copy first bytes.\r\n                    newUint8.set(\r\n                        new Uint8Array(cipherText), unencryptedBytes[encodedFrame.type]); // add ciphertext.\r\n                    newUint8.set(\r\n                        new Uint8Array(iv), unencryptedBytes[encodedFrame.type] + cipherText.byteLength); // append IV.\r\n                    newUint8[unencryptedBytes[encodedFrame.type] + cipherText.byteLength + ivLength]\r\n                        = keyIndex; // set key index.\r\n\r\n                    encodedFrame.data = newData;\r\n\r\n                    return controller.enqueue(encodedFrame);\r\n                }, e => {\r\n                    console.error(e);\r\n\r\n                    // We are not enqueuing the frame here on purpose.\r\n                });\r\n            }\r\n\r\n            /* NOTE WELL:\r\n             * This will send unencrypted data (only protected by DTLS transport encryption) when no key is configured.\r\n             * This is ok for demo purposes but should not be done once this becomes more relied upon.\r\n             */\r\n            controller.enqueue(encodedFrame);\r\n        }\r\n\r\n        /**\r\n         * Function that will be injected in a stream and will decrypt the given encoded frames.\r\n         *\r\n         * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\r\n         * @param {TransformStreamDefaultController} controller - TransportStreamController.\r\n         *\r\n         * The decrypted frame is formed as follows:\r\n         * 1) Extract the key index from the last byte of the encrypted frame.\r\n         *    If there is no key associated with the key index, the frame is enqueued for decoding\r\n         *    and these steps terminate.\r\n         * 2) Determine the frame type in order to look up the number of unencrypted header bytes.\r\n         * 2) Extract the 12-byte IV from its position near the end of the packet.\r\n         *    Note: the IV is treated as opaque and not reconstructed from the input.\r\n         * 3) Decrypt the encrypted frame content after the unencrypted bytes using AES-GCM.\r\n         * 4) Allocate space for the decrypted frame.\r\n         * 5) Copy the unencrypted bytes from the start of the encrypted frame.\r\n         * 6) Append the plaintext to the decrypted frame.\r\n         * 7) Enqueue the decrypted frame for decoding.\r\n         */\r\n        decodeFunction(encodedFrame, controller) {\r\n            const data = new Uint8Array(encodedFrame.data);\r\n            const keyIndex = data[encodedFrame.data.byteLength - 1];\r\n\r\n            if (this._cryptoKeyRing[keyIndex]) {\r\n                const iv = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - ivLength - 1, ivLength);\r\n                const cipherTextStart = unencryptedBytes[encodedFrame.type];\r\n                const cipherTextLength = encodedFrame.data.byteLength - (unencryptedBytes[encodedFrame.type]\r\n                    + ivLength + 1);\r\n\r\n                return crypto.subtle.decrypt({\r\n                    name: 'AES-GCM',\r\n                    iv,\r\n                    additionalData: new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])\r\n                }, this._cryptoKeyRing[keyIndex], new Uint8Array(encodedFrame.data, cipherTextStart, cipherTextLength))\r\n                .then(plainText => {\r\n                    const newData = new ArrayBuffer(unencryptedBytes[encodedFrame.type] + plainText.byteLength);\r\n                    const newUint8 = new Uint8Array(newData);\r\n\r\n                    newUint8.set(new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type]));\r\n                    newUint8.set(new Uint8Array(plainText), unencryptedBytes[encodedFrame.type]);\r\n\r\n                    encodedFrame.data = newData;\r\n\r\n                    return controller.enqueue(encodedFrame);\r\n                }, e => {\r\n                    console.error(e);\r\n\r\n                    // TODO: notify the application about error status.\r\n\r\n                    // TODO: For video we need a better strategy since we do not want to based any\r\n                    // non-error frames on a garbage keyframe.\r\n                    if (encodedFrame.type === undefined) { // audio, replace with silence.\r\n                        // audio, replace with silence.\r\n                        const newData = new ArrayBuffer(3);\r\n                        const newUint8 = new Uint8Array(newData);\r\n\r\n                        newUint8.set([ 0xd8, 0xff, 0xfe ]); // opus silence frame.\r\n                        encodedFrame.data = newData;\r\n                        controller.enqueue(encodedFrame);\r\n                    }\r\n                });\r\n            } else if (keyIndex >= this._cryptoKeyRing.length\r\n                    && this._cryptoKeyRing[this._currentKeyIndex % this._cryptoKeyRing.length]) {\r\n                // If we are encrypting but don't have a key for the remote drop the frame.\r\n                // This is a heuristic since we don't know whether a packet is encrypted,\r\n                // do not have a checksum and do not have signaling for whether a remote participant does\r\n                // encrypt or not.\r\n                return;\r\n            }\r\n\r\n            // TODO: this just passes through to the decoder. Is that ok? If we don't know the key yet\r\n            // we might want to buffer a bit but it is still unclear how to do that (and for how long etc).\r\n            controller.enqueue(encodedFrame);\r\n        }\r\n    }\r\n    const contexts = new Map(); // Map participant id => context\r\n\r\n    onmessage = async event => {\r\n        const { operation } = event.data;\r\n\r\n        if (operation === 'initialize') {\r\n            keySalt = event.data.salt;\r\n        } else if (operation === 'encode') {\r\n            const { readableStream, writableStream, participantId } = event.data;\r\n\r\n            if (!contexts.has(participantId)) {\r\n                contexts.set(participantId, new Context(participantId));\r\n            }\r\n            const context = contexts.get(participantId);\r\n            const transformStream = new TransformStream({\r\n                transform: context.encodeFunction.bind(context)\r\n            });\r\n\r\n            readableStream\r\n                .pipeThrough(new TransformStream({\r\n                  transform: polyFillEncodedFrameMetadata, // M83 polyfill.\r\n                }))\r\n                .pipeThrough(transformStream)\r\n                .pipeTo(writableStream);\r\n            if (keyBytes) {\r\n                context.setKey(await context.deriveKey(keyBytes, keySalt));\r\n            }\r\n        } else if (operation === 'decode') {\r\n            const { readableStream, writableStream, participantId } = event.data;\r\n\r\n            if (!contexts.has(participantId)) {\r\n                contexts.set(participantId, new Context(participantId));\r\n            }\r\n            const context = contexts.get(participantId);\r\n            const transformStream = new TransformStream({\r\n                transform: context.decodeFunction.bind(context)\r\n            });\r\n\r\n            readableStream\r\n                .pipeThrough(new TransformStream({\r\n                  transform: polyFillEncodedFrameMetadata, // M83 polyfill.\r\n                }))\r\n                .pipeThrough(transformStream)\r\n                .pipeTo(writableStream);\r\n            if (keyBytes) {\r\n                context.setKey(await context.deriveKey(keyBytes, keySalt));\r\n            }\r\n        } else if (operation === 'setKey') {\r\n            keyBytes = event.data.key;\r\n            contexts.forEach(async context => {\r\n                if (keyBytes) {\r\n                    context.setKey(await context.deriveKey(keyBytes, keySalt));\r\n                } else {\r\n                    context.setKey(false);\r\n                }\r\n            });\r\n        } else {\r\n            console.error('e2ee worker', operation);\r\n        }\r\n    };\r\n`;\r\n\r\nexport const createWorkerScript = () => URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as E2ePingEvents\r\n    from '../../service/e2eping/E2ePingEvents';\r\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping request.\r\n * @type {string}\r\n */\r\nconst E2E_PING_REQUEST = 'e2e-ping-request';\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping response.\r\n * @type {string}\r\n */\r\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\r\n\r\n/**\r\n * Saves e2e ping related state for a single JitsiParticipant.\r\n */\r\nclass ParticipantWrapper {\r\n    /**\r\n     * Creates a ParticipantWrapper\r\n     * @param {JitsiParticipant} participant - The remote participant that this\r\n     * object wraps.\r\n     * @param {E2ePing} e2eping\r\n     */\r\n    constructor(participant, e2eping) {\r\n        // The JitsiParticipant\r\n        this.participant = participant;\r\n\r\n        // The E2ePing\r\n        this.e2eping = e2eping;\r\n\r\n        // Caches the ID\r\n        this.id = participant.getId();\r\n\r\n        // Recently sent requests\r\n        this.requests = {};\r\n\r\n        // The ID of the last sent request. We just increment it for each new\r\n        // request. Start at 1 so we can consider only thruthy values valid.\r\n        this.lastRequestId = 1;\r\n\r\n        this.clearIntervals = this.clearIntervals.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n        this.handleResponse = this.handleResponse.bind(this);\r\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\r\n        this.sendAnalytics = this.sendAnalytics.bind(this);\r\n\r\n        // If the data channel was already open (this is likely a participant\r\n        // joining an existing conference) send a request immediately.\r\n        if (e2eping.isDataChannelOpen) {\r\n            this.sendRequest();\r\n        }\r\n\r\n        this.pingInterval = window.setInterval(\r\n            this.sendRequest, e2eping.pingIntervalMs);\r\n        this.analyticsInterval = window.setTimeout(\r\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\r\n    }\r\n\r\n    /**\r\n     * Clears the interval which sends pings.\r\n     * @type {*}\r\n     */\r\n    clearIntervals() {\r\n        if (this.pingInterval) {\r\n            window.clearInterval(this.pingInterval);\r\n        }\r\n        if (this.analyticsInterval) {\r\n            window.clearInterval(this.analyticsInterval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the next ping request.\r\n     * @type {*}\r\n     */\r\n    sendRequest() {\r\n        const requestId = this.lastRequestId++;\r\n        const requestMessage = {\r\n            type: E2E_PING_REQUEST,\r\n            id: requestId\r\n        };\r\n\r\n        this.e2eping.sendMessage(requestMessage, this.id);\r\n        this.requests[requestId] = {\r\n            id: requestId,\r\n            timeSent: window.performance.now()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a response from this participant.\r\n     * @type {*}\r\n     */\r\n    handleResponse(response) {\r\n        const request = this.requests[response.id];\r\n\r\n        if (request) {\r\n            request.rtt = window.performance.now() - request.timeSent;\r\n            this.e2eping.eventEmitter.emit(\r\n                E2ePingEvents.E2E_RTT_CHANGED,\r\n                this.participant,\r\n                request.rtt);\r\n        }\r\n\r\n        this.maybeSendAnalytics();\r\n    }\r\n\r\n    /**\r\n     * Goes over the requests, clearing ones which we don't need anymore, and\r\n     * if it finds at least one request with a valid RTT in the last\r\n     * 'analyticsIntervalMs' then sends an analytics event.\r\n     * @type {*}\r\n     */\r\n    maybeSendAnalytics() {\r\n        const now = window.performance.now();\r\n\r\n        // The RTT we'll report is the minimum RTT measured in the last\r\n        // analyticsInterval\r\n        let rtt = Infinity;\r\n        let request, requestId;\r\n\r\n        // It's time to send analytics. Clean up all requests and find the\r\n        for (requestId in this.requests) {\r\n            if (this.requests.hasOwnProperty(requestId)) {\r\n                request = this.requests[requestId];\r\n\r\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\r\n                    // An old request. We don't care about it anymore.\r\n                    delete this.requests[requestId];\r\n                } else if (request.rtt) {\r\n                    rtt = Math.min(rtt, request.rtt);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rtt < Infinity) {\r\n            this.sendAnalytics(rtt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends an analytics event for this participant with the given RTT.\r\n     * @type {*}\r\n     */\r\n    sendAnalytics(rtt) {\r\n        Statistics.sendAnalytics(createE2eRttEvent(\r\n            this.id,\r\n            this.participant.getProperty('region'),\r\n            rtt));\r\n    }\r\n}\r\n\r\n/**\r\n * Implements end-to-end ping (from one conference participant to another) via\r\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\r\n *\r\n * TODO: use a broadcast message instead of individual pings to each remote\r\n * participant.\r\n *\r\n * This class:\r\n * 1. Sends periodic ping requests to all other participants in the\r\n * conference.\r\n * 2. Responds to ping requests from other participants.\r\n * 3. Fires events with the end-to-end RTT to each participant whenever a\r\n * response is received.\r\n * 4. Fires analytics events with the end-to-end RTT periodically.\r\n */\r\nexport default class E2ePing {\r\n    /**\r\n     * @param {JitsiConference} conference - The conference.\r\n     * @param {Function} sendMessage - The function to use to send a message.\r\n     * @param {Object} options\r\n     */\r\n    constructor(conference, options, sendMessage) {\r\n        this.conference = conference;\r\n        this.eventEmitter = conference.eventEmitter;\r\n        this.sendMessage = sendMessage;\r\n\r\n        // The interval at which pings will be sent (<= 0 disables sending).\r\n        this.pingIntervalMs = 10000;\r\n\r\n        // The interval at which analytics events will be sent.\r\n        this.analyticsIntervalMs = 60000;\r\n\r\n        // Maps a participant ID to its ParticipantWrapper\r\n        this.participants = {};\r\n\r\n        // Whether the WebRTC channel has been opened or not.\r\n        this.isDataChannelOpen = false;\r\n\r\n        if (options && options.e2eping) {\r\n            if (typeof options.e2eping.pingInterval === 'number') {\r\n                this.pingIntervalMs = options.e2eping.pingInterval;\r\n            }\r\n            if (typeof options.e2eping.analyticsInterval === 'number') {\r\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\r\n            }\r\n\r\n            // We want to report at most once a ping interval.\r\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\r\n                < this.pingIntervalMs) {\r\n                this.analyticsIntervalMs = this.pingIntervalMs;\r\n            }\r\n        }\r\n        logger.info(\r\n            `Initializing e2e ping; pingInterval=${\r\n                this.pingIntervalMs}, analyticsInterval=${\r\n                this.analyticsIntervalMs}.`);\r\n\r\n        this.participantJoined = this.participantJoined.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n\r\n        this.participantLeft = this.participantLeft.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n\r\n        this.messageReceived = this.messageReceived.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n\r\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the communications channel has been opened\r\n     * and it can now send messages via sendMessage.\r\n     */\r\n    dataChannelOpened() {\r\n        this.isDataChannelOpen = true;\r\n\r\n        // We don't want to wait the whole interval before sending the first\r\n        // request, but we can't send it immediately after the participant joins\r\n        // either, because our data channel might not have initialized.\r\n        // So once the data channel initializes, send requests to everyone.\r\n        // Wait an additional 200ms to give a chance to the remote side (if it\r\n        // also just connected as is the case for the first 2 participants in a\r\n        // conference) to open its data channel.\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                const participantWrapper = this.participants[id];\r\n\r\n                window.setTimeout(participantWrapper.sendRequest, 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a message that was received.\r\n     *\r\n     * @param participant - The message sender.\r\n     * @param payload - The payload of the message.\r\n     */\r\n    messageReceived(participant, payload) {\r\n        // Listen to E2E PING requests and responses from other participants\r\n        // in the conference.\r\n        if (payload.type === E2E_PING_REQUEST) {\r\n            this.handleRequest(participant.getId(), payload);\r\n        } else if (payload.type === E2E_PING_RESPONSE) {\r\n            this.handleResponse(participant.getId(), payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a participant joining the conference. Starts to send ping\r\n     * requests to the participant.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     * @param {JitsiParticipant} participant - The participant that joined.\r\n     */\r\n    participantJoined(id, participant) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            logger.info(\r\n                `Participant wrapper already exists for ${id}. Clearing.`);\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n\r\n        this.participants[id] = new ParticipantWrapper(participant, this);\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving the conference. Stops sending requests.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     */\r\n    participantLeft(id) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping request coming from another participant.\r\n     *\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * request.\r\n     * @param {Object} request - The request.\r\n     */\r\n    handleRequest(participantId, request) {\r\n        // If it's a valid request, just send a response.\r\n        if (request && request.id) {\r\n            const response = {\r\n                type: E2E_PING_RESPONSE,\r\n                id: request.id\r\n            };\r\n\r\n            this.sendMessage(response, participantId);\r\n        } else {\r\n            logger.info(\r\n                `Received an invalid e2e ping request from ${participantId}.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping response coming from another participant\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * response.\r\n     * @param {Object} response - The response.\r\n     */\r\n    handleResponse(participantId, response) {\r\n        const participantWrapper = this.participants[participantId];\r\n\r\n        if (participantWrapper) {\r\n            participantWrapper.handleResponse(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops this E2ePing (i.e. stop sending requests).\r\n     */\r\n    stop() {\r\n        logger.info('Stopping e2eping');\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                this.participants[id].clearIntervals();\r\n            }\r\n        }\r\n\r\n        this.participants = {};\r\n    }\r\n}\r\n\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\r\n * P2P status and the conference participants count. See the event description\r\n * for more info.\r\n */\r\nexport default class Jvb121EventGenerator {\r\n    /**\r\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\r\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\r\n         * the conference is currently in the P2P mode.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._jvb121 = true;\r\n\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\r\n    }\r\n\r\n    /**\r\n     * Checks whether the JVB121 value should be updated and a new event\r\n     * emitted.\r\n     */\r\n    evaluateStatus() {\r\n        const oldStatus = this._jvb121;\r\n        const newStatus\r\n            = !this._conference.isP2PActive()\r\n                && this._conference.getParticipantCount() <= 2;\r\n\r\n        if (oldStatus !== newStatus) {\r\n            this._jvb121 = newStatus;\r\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\r\n\r\n/**\r\n * The class manages send and receive video constraints across media sessions({@link JingleSessionPC}) which belong to\r\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\r\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\r\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\r\n * different.\r\n */\r\nexport class QualityController {\r\n    /**\r\n     * Creates new instance for a given conference.\r\n     *\r\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\r\n     * the quality constraints.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            session => this._onMediaSessionStarted(session));\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n            () => this._propagateSendMaxFrameHeight());\r\n    }\r\n\r\n    /**\r\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\r\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\r\n     * the conference has entered the p2p mode already.\r\n     *\r\n     * @param {JingleSessionPC} mediaSession - the started media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(mediaSession) {\r\n        mediaSession.addListener(\r\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\r\n            session => {\r\n                if (session === this.conference._getActiveMediaSession()) {\r\n                    this._propagateSendMaxFrameHeight();\r\n                }\r\n            });\r\n        this.preferredReceiveMaxFrameHeight\r\n            && mediaSession.setReceiverVideoConstraint(this.preferredReceiveMaxFrameHeight);\r\n\r\n        // Set the degradation preference on the local video track.\r\n        mediaSession.setSenderVideoDegradationPreference();\r\n    }\r\n\r\n    /**\r\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\r\n     * sessions for the reasons mentioned in this class description.\r\n     *\r\n     * @returns {Promise<void[]>}\r\n     * @private\r\n     */\r\n    _propagateSendMaxFrameHeight() {\r\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\r\n        const promises = [];\r\n\r\n        if (!sendMaxFrameHeight) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\r\n        }\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\r\n     * the active media session's receive preference set by the remote party.\r\n     *\r\n     * @returns {number|undefined}\r\n     */\r\n    selectSendMaxFrameHeight() {\r\n        const activeMediaSession = this.conference._getActiveMediaSession();\r\n        const remoteRecvMaxFrameHeight = activeMediaSession && activeMediaSession.getRemoteRecvMaxFrameHeight();\r\n\r\n        if (this.preferredSendMaxFrameHeight && remoteRecvMaxFrameHeight) {\r\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\r\n        } else if (remoteRecvMaxFrameHeight) {\r\n            return remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.preferredSendMaxFrameHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max receive video frame height.\r\n     * @param {number|undefined} maxFrameHeight - the new value.\r\n     */\r\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredReceiveMaxFrameHeight = maxFrameHeight;\r\n\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max send video frame height.\r\n     *\r\n     * @param {number} maxFrameHeight - the new value to set.\r\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\r\n     */\r\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\r\n\r\n        return this._propagateSendMaxFrameHeight();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JibriSession from './JibriSession';\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * A class responsible for starting and stopping recording sessions and emitting\r\n * state updates for them.\r\n */\r\nclass RecordingManager {\r\n    /**\r\n     * Initialize {@code RecordingManager} with other objects that are necessary\r\n     * for starting a recording.\r\n     *\r\n     * @param {ChatRoom} chatRoom - The chat room to handle.\r\n     * @returns {void}\r\n     */\r\n    constructor(chatRoom) {\r\n        /**\r\n         * All known recording sessions from the current conference.\r\n         */\r\n        this._sessions = {};\r\n\r\n        this._chatRoom = chatRoom;\r\n\r\n        this.onPresence = this.onPresence.bind(this);\r\n\r\n        this._chatRoom.eventEmitter.addListener(\r\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\r\n    }\r\n\r\n    /**\r\n     * Finds an existing recording session by session ID.\r\n     *\r\n     * @param {string} sessionID - The session ID associated with the recording.\r\n     * @returns {JibriSession|undefined}\r\n     */\r\n    getSession(sessionID) {\r\n        return this._sessions[sessionID];\r\n    }\r\n\r\n    /**\r\n     * Callback to invoke to parse through a presence update to find recording\r\n     * related updates (from Jibri participant doing the recording and the\r\n     * focus which controls recording).\r\n     *\r\n     * @param {Object} event - The presence data from the pubsub event.\r\n     * @param {Node} event.presence - An XMPP presence update.\r\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\r\n     * from a participant that is trusted but not visible, as would be the case\r\n     * with the Jibri recorder participant.\r\n     * @returns {void}\r\n     */\r\n    onPresence({ fromHiddenDomain, presence }) {\r\n        if (recordingXMLUtils.isFromFocus(presence)) {\r\n            this._handleFocusPresence(presence);\r\n        } else if (fromHiddenDomain) {\r\n            this._handleJibriPresence(presence);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start a recording session.\r\n     *\r\n     * @param {Object} options - Configuration for the recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [optional] options.broadcastId - The channel on which a\r\n     * live stream will occur.\r\n     * @param {string} options.mode - The mode in which recording should be\r\n     * started. Recognized values are \"file\" and \"stream\".\r\n     * @param {string} [optional] options.streamId - The stream key to be used\r\n     * for live stream broadcasting. Required for live streaming.\r\n     * @returns {Promise} A promise for starting a recording, which will pass\r\n     * back the session on success. The promise resolves after receiving an\r\n     * acknowledgment of the start request success or fail.\r\n     */\r\n    startRecording(options) {\r\n        const session = new JibriSession({\r\n            ...options,\r\n            connection: this._chatRoom.connection\r\n        });\r\n\r\n        return session.start({\r\n            appData: options.appData,\r\n            broadcastId: options.broadcastId,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            streamId: options.streamId\r\n        })\r\n            .then(() => {\r\n                // Only store the session and emit if the session has not been\r\n                // added already. This is a workaround for the session getting\r\n                // created due to a presence update to announce a \"pending\"\r\n                // recording being received before JibriSession#start finishes.\r\n                if (!this.getSession(session.getID())) {\r\n                    this._addSession(session);\r\n                    this._emitSessionUpdate(session);\r\n                }\r\n\r\n                return session;\r\n            })\r\n            .catch(error => {\r\n                this._emitSessionUpdate(session);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Stop a recording session.\r\n     *\r\n     * @param {string} sessionID - The ID associated with the recording session\r\n     * to be stopped.\r\n     * @returns {Promise} The promise resolves after receiving an\r\n     * acknowledgment of the stop request success or fail.\r\n     */\r\n    stopRecording(sessionID) {\r\n        const session = this.getSession(sessionID);\r\n\r\n        if (session) {\r\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\r\n        }\r\n\r\n        return Promise.reject(new Error('Could not find session'));\r\n    }\r\n\r\n    /**\r\n     * Stores a reference to the passed in JibriSession.\r\n     *\r\n     * @param {string} session - The JibriSession instance to store.\r\n     * @returns {void}\r\n     */\r\n    _addSession(session) {\r\n        this._sessions[session.getID()] = session;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of a recording session and stores a reference to\r\n     * it.\r\n     *\r\n     * @param {string} sessionID - The session ID of the recording in progress.\r\n     * @param {string} status - The current status of the recording session.\r\n     * @param {string} mode - The recording mode of the session.\r\n     * @returns {JibriSession}\r\n     */\r\n    _createSession(sessionID, status, mode) {\r\n        const session = new JibriSession({\r\n            connection: this._chatRoom.connection,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            mode,\r\n            sessionID,\r\n            status\r\n        });\r\n\r\n        this._addSession(session);\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Notifies listeners of an update to a recording session.\r\n     *\r\n     * @param {JibriSession} session - The session that has been updated.\r\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\r\n     */\r\n    _emitSessionUpdate(session, initiator) {\r\n        this._chatRoom.eventEmitter.emit(\r\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Parses presence to update an existing JibriSession or to create a new\r\n     * JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleFocusPresence(presence) {\r\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\r\n\r\n        // We'll look for an existing session or create one (in case we're a\r\n        // participant joining a call with an existing recording going on).\r\n        let session = this.getSession(sessionID);\r\n\r\n        // Handle the case where a status update is received in presence but\r\n        // the local participant has joined while the JibriSession has already\r\n        // ended.\r\n        if (!session && status === 'off') {\r\n            logger.warn(\r\n                'Ignoring recording presence update',\r\n                'Received a new session with status off.');\r\n\r\n            return;\r\n        }\r\n\r\n        // Jicofo sends updates via presence, and any extension in presence\r\n        // is sent until it is explicitly removed.  It's difficult for\r\n        // Jicofo to know when a presence has been sent once, so it won't\r\n        // remove jibri status extension.  This means we may receive the same\r\n        // status update more than once, so check for that here\r\n        if (session\r\n            && session.getStatus() === status\r\n            && session.getError() === error) {\r\n            logger.warn('Ignoring duplicate presence update: ',\r\n                JSON.stringify(jibriStatus));\r\n\r\n            return;\r\n        }\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, status, recordingMode);\r\n        }\r\n\r\n        session.setStatus(status);\r\n\r\n        if (error) {\r\n            session.setError(error);\r\n        }\r\n\r\n        this._emitSessionUpdate(session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\r\n     * needs to be updated in a JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleJibriPresence(presence) {\r\n        const { liveStreamViewURL, mode, sessionID }\r\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\r\n\r\n        if (!sessionID) {\r\n            logger.warn(\r\n                'Ignoring potential jibri presence due to no session id.');\r\n\r\n            return;\r\n        }\r\n\r\n        let session = this.getSession(sessionID);\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, '', mode);\r\n        }\r\n\r\n        session.setLiveStreamViewURL(liveStreamViewURL);\r\n\r\n        this._emitSessionUpdate(session);\r\n    }\r\n}\r\n\r\nexport default RecordingManager;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\r\n\r\nimport Statistics from './statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Number of local samples that will be used for comparison before and after the remote sample is received.\r\n */\r\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\r\n\r\n/**\r\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\r\n * participant and compares them to detect potential audio problem for a participant.\r\n */\r\nexport default class AudioOutputProblemDetector {\r\n\r\n    /**\r\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\r\n     *\r\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n        this._localAudioLevelCache = {};\r\n        this._reportedParticipants = [];\r\n        this._audioProblemCandidates = {};\r\n        this._numberOfRemoteAudioLevelsReceived = {};\r\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\r\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\r\n        this._clearUserData = this._clearUserData.bind(this);\r\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data received by a remote participant.\r\n     *\r\n     * @param {string} userID - The user id of the participant that sent the data.\r\n     * @param {number} audioLevel - The average audio level value.\r\n     * @returns {void}\r\n     */\r\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\r\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\r\n\r\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\r\n\r\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\r\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\r\n            return;\r\n        }\r\n\r\n        const participant = this._conference.getParticipantById(userID);\r\n\r\n        if (participant) {\r\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\r\n\r\n            if (tracks.length > 0 && participant.isAudioMuted()) {\r\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\r\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\r\n                // zero values for muted track.\r\n                return;\r\n            }\r\n        }\r\n\r\n        const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\r\n            this._audioProblemCandidates[userID] = {\r\n                remoteAudioLevels: avgAudioLevels,\r\n                localAudioLevels: []\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data retrieved by the local stats.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\r\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\r\n     * @returns {void}\r\n     */\r\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        Object.keys(avgAudioLevels).forEach(userID => {\r\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\r\n                return;\r\n            }\r\n\r\n            const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n            if (!Array.isArray(localAudioLevels)) {\r\n                this._localAudioLevelCache[userID] = [ ];\r\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\r\n                localAudioLevels.shift();\r\n            }\r\n\r\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\r\n        });\r\n\r\n\r\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\r\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\r\n\r\n            localAudioLevels.push(avgAudioLevels[userID]);\r\n\r\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\r\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\r\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\r\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\r\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\r\n                        remoteAudioLevels}`);\r\n                    this._reportedParticipants.push(userID);\r\n                    this._clearUserData(userID);\r\n                }\r\n\r\n                delete this._audioProblemCandidates[userID];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears the data stored for a participant.\r\n     *\r\n     * @param {string} userID - The id of the participant.\r\n     * @returns {void}\r\n     */\r\n    _clearUserData(userID) {\r\n        delete this._localAudioLevelCache[userID];\r\n    }\r\n\r\n    /**\r\n     * Disposes the allocated resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    dispose() {\r\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._localAudioLevelCache = undefined;\r\n        this._audioProblemCandidates = undefined;\r\n        this._reportedParticipants = undefined;\r\n        this._numberOfRemoteAudioLevelsReceived = undefined;\r\n        this._conference = undefined;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport * as ConnectionQualityEvents\r\n    from '../../service/connectivity/ConnectionQualityEvents';\r\nimport {\r\n    createRtpStatsEvent,\r\n    createTransportStatsEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nimport Statistics from './statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This will calculate an average for one, named stat and submit it to\r\n * the analytics module when requested. It automatically counts the samples.\r\n */\r\nclass AverageStatReport {\r\n    /**\r\n     * Creates new <tt>AverageStatReport</tt> for given name.\r\n     * @param {string} name that's the name of the event that will be reported\r\n     * to the analytics module.\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.count = 0;\r\n        this.sum = 0;\r\n        this.samples = [];\r\n    }\r\n\r\n    /**\r\n     * Adds the next value that will be included in the average when\r\n     * {@link calculate} is called.\r\n     * @param {number} nextValue\r\n     */\r\n    addNext(nextValue) {\r\n        if (typeof nextValue !== 'number') {\r\n            logger.error(\r\n                `${this.name} - invalid value for idx: ${this.count}`,\r\n                nextValue);\r\n        } else if (!isNaN(nextValue)) {\r\n            this.sum += nextValue;\r\n            this.samples.push(nextValue);\r\n            this.count += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates an average for the samples collected using {@link addNext}.\r\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\r\n     * if no samples were collected.\r\n     */\r\n    calculate() {\r\n        return this.sum / this.count;\r\n    }\r\n\r\n    /**\r\n     * Appends the report to the analytics \"data\" object. The object will be\r\n     * set under <tt>prefix</tt> + {@link this.name} key.\r\n     * @param {Object} report the analytics \"data\" object\r\n     */\r\n    appendReport(report) {\r\n        report[`${this.name}_avg`] = this.calculate();\r\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\r\n    }\r\n\r\n    /**\r\n     * Clears all memory of any samples collected, so that new average can be\r\n     * calculated using this instance.\r\n     */\r\n    reset() {\r\n        this.samples = [];\r\n        this.sum = 0;\r\n        this.count = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Class gathers the stats that are calculated and reported for a\r\n * {@link TraceablePeerConnection} even if it's not currently active. For\r\n * example we want to monitor RTT for the JVB connection while in P2P mode.\r\n */\r\nclass ConnectionAvgStats {\r\n    /**\r\n     * Creates new <tt>ConnectionAvgStats</tt>\r\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\r\n     * @param {boolean} isP2P\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(avgRtpStatsReporter, isP2P, n) {\r\n        /**\r\n         * Is this instance for JVB or P2P connection ?\r\n         * @type {boolean}\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * How many samples are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * Average round trip time reported by the ICE candidate pair.\r\n         * @type {AverageStatReport}\r\n         */\r\n        this._avgRTT = new AverageStatReport('rtt');\r\n\r\n        /**\r\n         * Map stores average RTT to the JVB reported by remote participants.\r\n         * Mapped per participant id {@link JitsiParticipant.getId}.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {Map<string,AverageStatReport>}\r\n         * @private\r\n         */\r\n        this._avgRemoteRTTMap = new Map();\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\r\n\r\n        /**\r\n         * The latest average E2E RTT for the JVB connection only.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._avgEnd2EndRTT = undefined;\r\n\r\n        this._onConnectionStats = (tpc, stats) => {\r\n            if (this.isP2P === tpc.isP2P) {\r\n                this._calculateAvgStats(stats);\r\n            }\r\n        };\r\n\r\n        const conference = avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._onConnectionStats);\r\n\r\n        if (!this.isP2P) {\r\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\r\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n            this._onRemoteStatsUpdated\r\n                = (id, data) => this._processRemoteStats(id, data);\r\n            conference.on(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        if (browser.supportsRTTStatistics()) {\r\n            if (data.transport && data.transport.length) {\r\n                this._avgRTT.addNext(data.transport[0].rtt);\r\n            }\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n            if (browser.supportsRTTStatistics()) {\r\n                const conference = this._avgRtpStatsReporter._conference;\r\n\r\n                const batchReport = {\r\n                    p2p: this.isP2P,\r\n                    'conference_size': conference.getParticipantCount()\r\n                };\r\n\r\n                if (data.transport && data.transport.length) {\r\n                    Object.assign(batchReport, {\r\n                        'local_candidate_type':\r\n                            data.transport[0].localCandidateType,\r\n                        'remote_candidate_type':\r\n                            data.transport[0].remoteCandidateType,\r\n                        'transport_type': data.transport[0].type\r\n                    });\r\n                }\r\n\r\n                this._avgRTT.appendReport(batchReport);\r\n\r\n                if (this.isP2P) {\r\n                    // Report RTT diff only for P2P.\r\n                    const jvbEnd2EndRTT = this\r\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\r\n\r\n                    if (!isNaN(jvbEnd2EndRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['rtt_diff']\r\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\r\n                    }\r\n                } else {\r\n                    // Report end to end RTT only for JVB.\r\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\r\n                    const avgLocalRTT = this._avgRTT.calculate();\r\n\r\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\r\n\r\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\r\n                    }\r\n                }\r\n\r\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n            }\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\r\n     * participants.\r\n     * @return {number|NaN} NaN if not available (not enough data)\r\n     * @private\r\n     */\r\n    _calculateAvgRemoteRTT() {\r\n        let count = 0, sum = 0;\r\n\r\n        // FIXME should we ignore RTT for participant\r\n        // who \"is having connectivity issues\" ?\r\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\r\n            const avg = remoteAvg.calculate();\r\n\r\n            if (!isNaN(avg)) {\r\n                sum += avg;\r\n                count += 1;\r\n                remoteAvg.reset();\r\n            }\r\n        }\r\n\r\n        return sum / count;\r\n    }\r\n\r\n    /**\r\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\r\n     * RTT towards the JVB reported by each participant.\r\n     * @param {string} id {@link JitsiParticipant.getId}\r\n     * @param {go figure in ConnectionQuality.js} data\r\n     * @private\r\n     */\r\n    _processRemoteStats(id, data) {\r\n        const validData = typeof data.jvbRTT === 'number';\r\n        let rttAvg = this._avgRemoteRTTMap.get(id);\r\n\r\n        if (!rttAvg && validData) {\r\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\r\n            this._avgRemoteRTTMap.set(id, rttAvg);\r\n        }\r\n\r\n        if (validData) {\r\n            rttAvg.addNext(data.jvbRTT);\r\n        } else if (rttAvg) {\r\n            this._avgRemoteRTTMap.delete(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgRTT.reset();\r\n        if (this._avgRemoteRTTMap) {\r\n            this._avgRemoteRTTMap.clear();\r\n        }\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dispose() {\r\n\r\n        const conference = this._avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.removeConnectionStatsListener(\r\n            this._onConnectionStats);\r\n        if (!this.isP2P) {\r\n            conference.off(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n            conference.off(\r\n                ConferenceEvents.USER_LEFT,\r\n                this._onUserLeft);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reports average RTP statistics values (arithmetic mean) to the analytics\r\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\r\n * of the P2P vs JVB conference modes and submits the values under different\r\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\r\n * P2P mode resets the data collected so far and averages are calculated from\r\n * scratch.\r\n */\r\nexport default class AvgRTPStatsReporter {\r\n    /**\r\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\r\n     * @param {JitsiConference} conference\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(conference, n) {\r\n        /**\r\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\r\n         * are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        if (n > 0) {\r\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\r\n        } else {\r\n            logger.info('Avg RTP stats reports are disabled.');\r\n\r\n            // Do not initialize\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Average audio upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateUp\r\n            = new AverageStatReport('bitrate_audio_upload');\r\n\r\n        /**\r\n         * Average audio download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateDown\r\n            = new AverageStatReport('bitrate_audio_download');\r\n\r\n        /**\r\n         * Average video upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateUp\r\n            = new AverageStatReport('bitrate_video_upload');\r\n\r\n        /**\r\n         * Average video download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateDown\r\n            = new AverageStatReport('bitrate_video_download');\r\n\r\n        /**\r\n         * Average upload bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthUp\r\n            = new AverageStatReport('bandwidth_upload');\r\n\r\n        /**\r\n         * Average download bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthDown\r\n            = new AverageStatReport('bandwidth_download');\r\n\r\n        /**\r\n         * Average total packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossTotal\r\n            = new AverageStatReport('packet_loss_total');\r\n\r\n        /**\r\n         * Average upload packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossUp\r\n            = new AverageStatReport('packet_loss_upload');\r\n\r\n        /**\r\n         * Average download packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossDown\r\n            = new AverageStatReport('packet_loss_download');\r\n\r\n        /**\r\n         * Average FPS for remote videos\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\r\n\r\n        /**\r\n         * Average FPS for remote screen streaming videos (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenFPS\r\n            = new AverageStatReport('framerate_screen_remote');\r\n\r\n        /**\r\n         * Average FPS for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\r\n\r\n        /**\r\n         * Average FPS for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenFPS\r\n            = new AverageStatReport('framerate_screen_local');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteCameraPixels\r\n            = new AverageStatReport('pixels_remote');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenPixels\r\n            = new AverageStatReport('pixels_screen_remote');\r\n\r\n        /**\r\n         * Average pixels for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalCameraPixels\r\n            = new AverageStatReport('pixels_local');\r\n\r\n        /**\r\n         * Average pixels for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenPixels\r\n            = new AverageStatReport('pixels_screen_local');\r\n\r\n        /**\r\n         * Average connection quality as defined by\r\n         * the {@link ConnectionQuality} module.\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgCQ = new AverageStatReport('connection_quality');\r\n\r\n        this._cachedTransportStats = undefined;\r\n\r\n        this._onLocalStatsUpdated = data => {\r\n            this._calculateAvgStats(data);\r\n            this._maybeSendTransportAnalyticsEvent(data);\r\n        };\r\n        conference.on(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n\r\n        this._onP2PStatusChanged = () => {\r\n            logger.debug('Resetting average stats calculation');\r\n            this._resetAvgStats();\r\n            this.jvbStatsMonitor._resetAvgStats();\r\n            this.p2pStatsMonitor._resetAvgStats();\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n\r\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\r\n            // We want to reset only on the transition from false => true,\r\n            // because otherwise those stats are resetted on JVB <=> P2P\r\n            // transition.\r\n            if (newStatus === true) {\r\n                logger.info('Resetting JVB avg RTP stats');\r\n                this._resetAvgJvbStats();\r\n            }\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n\r\n        this.jvbStatsMonitor\r\n            = new ConnectionAvgStats(this, false /* JVB */, n);\r\n\r\n        this.p2pStatsMonitor\r\n            = new ConnectionAvgStats(this, true /* P2P */, n);\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats reported on\r\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        const isP2P = this._conference.isP2PActive();\r\n        const confSize = this._conference.getParticipantCount();\r\n\r\n        if (!isP2P && confSize < 2) {\r\n\r\n            // There's no point in collecting stats for a JVB conference of 1.\r\n            // That happens for short period of time after everyone leaves\r\n            // the room, until Jicofo terminates the session.\r\n            return;\r\n        }\r\n\r\n        /* Uncomment to figure out stats structure\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                logger.info(`local stat ${key}: `, data[key]);\r\n            }\r\n        } */\r\n\r\n        const bitrate = data.bitrate;\r\n        const bandwidth = data.bandwidth;\r\n        const packetLoss = data.packetLoss;\r\n        const frameRate = data.framerate;\r\n        const resolution = data.resolution;\r\n\r\n        if (!bitrate) {\r\n            logger.error('No \"bitrate\"');\r\n\r\n            return;\r\n        } else if (!bandwidth) {\r\n            logger.error('No \"bandwidth\"');\r\n\r\n            return;\r\n        } else if (!packetLoss) {\r\n            logger.error('No \"packetloss\"');\r\n\r\n            return;\r\n        } else if (!frameRate) {\r\n            logger.error('No \"framerate\"');\r\n\r\n            return;\r\n        } else if (!resolution) {\r\n            logger.error('No resolution');\r\n\r\n            return;\r\n        }\r\n\r\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\r\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\r\n\r\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\r\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\r\n\r\n        if (browser.supportsBandwidthStatistics()) {\r\n            this._avgBandwidthUp.addNext(bandwidth.upload);\r\n            this._avgBandwidthDown.addNext(bandwidth.download);\r\n        }\r\n\r\n        this._avgPacketLossUp.addNext(packetLoss.upload);\r\n        this._avgPacketLossDown.addNext(packetLoss.download);\r\n        this._avgPacketLossTotal.addNext(packetLoss.total);\r\n\r\n        this._avgCQ.addNext(data.connectionQuality);\r\n\r\n        if (frameRate) {\r\n            this._avgRemoteFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.CAMERA));\r\n            this._avgRemoteScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.CAMERA));\r\n            this._avgLocalScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        if (resolution) {\r\n            this._avgRemoteCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.CAMERA));\r\n\r\n            this._avgRemoteScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.CAMERA));\r\n\r\n            this._avgLocalScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n\r\n            const batchReport = {\r\n                p2p: isP2P,\r\n                'conference_size': confSize\r\n            };\r\n\r\n            if (data.transport && data.transport.length) {\r\n                Object.assign(batchReport, {\r\n                    'local_candidate_type':\r\n                        data.transport[0].localCandidateType,\r\n                    'remote_candidate_type':\r\n                        data.transport[0].remoteCandidateType,\r\n                    'transport_type': data.transport[0].type\r\n                });\r\n            }\r\n\r\n            this._avgAudioBitrateUp.appendReport(batchReport);\r\n            this._avgAudioBitrateDown.appendReport(batchReport);\r\n\r\n            this._avgVideoBitrateUp.appendReport(batchReport);\r\n            this._avgVideoBitrateDown.appendReport(batchReport);\r\n\r\n            if (browser.supportsBandwidthStatistics()) {\r\n                this._avgBandwidthUp.appendReport(batchReport);\r\n                this._avgBandwidthDown.appendReport(batchReport);\r\n            }\r\n            this._avgPacketLossUp.appendReport(batchReport);\r\n            this._avgPacketLossDown.appendReport(batchReport);\r\n            this._avgPacketLossTotal.appendReport(batchReport);\r\n\r\n            this._avgRemoteFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\r\n                this._avgRemoteScreenFPS.appendReport(batchReport);\r\n            }\r\n            this._avgLocalFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\r\n                this._avgLocalScreenFPS.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgRemoteCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\r\n                this._avgRemoteScreenPixels.appendReport(batchReport);\r\n            }\r\n            this._avgLocalCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\r\n                this._avgLocalScreenPixels.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgCQ.appendReport(batchReport);\r\n\r\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates average number of pixels for the report\r\n     *\r\n     * @param {map} peerResolutions a map of peer resolutions\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\r\n     * are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\r\n        let peerPixelsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(peerResolutions)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null\r\n                        : this._conference.getParticipantById(peerID);\r\n                const videosResolution = peerResolutions[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosResolution) {\r\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\r\n                        videosResolution, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgPixels)) {\r\n                        peerPixelsSum += peerAvgPixels;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average pixels for either remote or local participant\r\n     * @param {object} videos maps resolution per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local video pixels calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average video pixels of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track =>\r\n                                !track.isMuted()\r\n                                    && track.getSSRC() === ssrc\r\n                                    && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track =>\r\n                            !track.isMuted()\r\n                                && tpc.getLocalSSRC(track) === ssrc\r\n                                && track.videoType === videoType));\r\n        }\r\n\r\n        let peerPixelsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcPixels\r\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\r\n                peerPixelsSum += peerSsrcPixels;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerSsrcCount;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates average FPS for the report\r\n     * @param {go figure} frameRate\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\r\n        let peerFpsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(frameRate)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null : this._conference.getParticipantById(peerID);\r\n                const videosFps = frameRate[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosFps) {\r\n                    const peerAvgFPS\r\n                        = this._calculatePeerAvgVideoFps(\r\n                            videosFps, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgFPS)) {\r\n                        peerFpsSum += peerAvgFPS;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average FPS for either remote or local participant\r\n     * @param {object} videos maps FPS per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local FPS calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average FPS of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track => !track.isMuted()\r\n                                && track.getSSRC() === ssrc\r\n                                && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track => !track.isMuted()\r\n                            && tpc.getLocalSSRC(track) === ssrc\r\n                            && track.videoType === videoType));\r\n        }\r\n\r\n        let peerFpsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcFps = Number(videos[ssrc]);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\r\n                peerFpsSum += peerSsrcFps;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerSsrcCount;\r\n    }\r\n\r\n    /**\r\n     * Sends the 'transport.stats' analytics event whenever we detect that\r\n     * there is a change in the local or remote candidate type on the transport\r\n     * that is currently selected.\r\n     * @param {*} data\r\n     * @private\r\n     */\r\n    _maybeSendTransportAnalyticsEvent(data) {\r\n        if (!data || !data.transport || !data.transport.length) {\r\n            return;\r\n        }\r\n        const transportStats = {\r\n            p2p: data.transport[0].p2p,\r\n            'local_candidate_type': data.transport[0].localCandidateType,\r\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\r\n            'transport_type': data.transport[0].type\r\n        };\r\n\r\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\r\n            this._cachedTransportStats = transportStats;\r\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the stats related to JVB connection. Must not be called when in\r\n     * P2P mode, because then the {@link AverageStatReport} instances are\r\n     * tracking P2P stats. Note that this should never happen unless something\r\n     * is wrong with the P2P and JVB121 events.\r\n     * @private\r\n     */\r\n    _resetAvgJvbStats() {\r\n        this._resetAvgStats();\r\n        this.jvbStatsMonitor._resetAvgStats();\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgAudioBitrateUp.reset();\r\n        this._avgAudioBitrateDown.reset();\r\n\r\n        this._avgVideoBitrateUp.reset();\r\n        this._avgVideoBitrateDown.reset();\r\n\r\n        this._avgBandwidthUp.reset();\r\n        this._avgBandwidthDown.reset();\r\n\r\n        this._avgPacketLossUp.reset();\r\n        this._avgPacketLossDown.reset();\r\n        this._avgPacketLossTotal.reset();\r\n\r\n        this._avgRemoteFPS.reset();\r\n        this._avgRemoteScreenFPS.reset();\r\n        this._avgLocalFPS.reset();\r\n        this._avgLocalScreenFPS.reset();\r\n\r\n        this._avgRemoteCameraPixels.reset();\r\n        this._avgRemoteScreenPixels.reset();\r\n        this._avgLocalCameraPixels.reset();\r\n        this._avgLocalScreenPixels.reset();\r\n\r\n        this._avgCQ.reset();\r\n\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event listeners and stops working.\r\n     */\r\n    dispose() {\r\n        this._conference.off(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n        this._conference.off(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n        this._conference.off(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n        this.jvbStatsMonitor.dispose();\r\n        this.p2pStatsMonitor.dispose();\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport SpeakerStats from './SpeakerStats';\r\n\r\n/**\r\n * A collection for tracking speaker stats. Attaches listeners\r\n * to the conference to automatically update on tracked events.\r\n */\r\nexport default class SpeakerStatsCollector {\r\n    /**\r\n     * Initializes a new SpeakerStatsCollector instance.\r\n     *\r\n     * @constructor\r\n     * @param {JitsiConference} conference - The conference to track.\r\n     * @returns {void}\r\n     */\r\n    constructor(conference) {\r\n        this.stats = {\r\n            users: {\r\n\r\n                // userId: SpeakerStats\r\n            },\r\n            dominantSpeakerId: null\r\n        };\r\n\r\n        const userId = conference.myUserId();\r\n\r\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\r\n            this._onDominantSpeaker.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onUserJoin.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onUserLeave.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n            this._onDisplayNameChange.bind(this));\r\n        if (conference.xmpp) {\r\n            conference.xmpp.addListener(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\r\n                this._updateStats.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to dominant speaker change events by changing its speaker stats\r\n     * models to reflect the current dominant speaker.\r\n     *\r\n     * @param {string} dominantSpeakerId - The user id of the new\r\n     * dominant speaker.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDominantSpeaker(dominantSpeakerId) {\r\n        const oldDominantSpeaker\r\n            = this.stats.users[this.stats.dominantSpeakerId];\r\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\r\n\r\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\r\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\r\n        this.stats.dominantSpeakerId = dominantSpeakerId;\r\n    }\r\n\r\n    /**\r\n     * Reacts to user join events by creating a new SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the new user.\r\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserJoin(userId, participant) {\r\n        if (participant.isHidden()) {\r\n            return;\r\n        }\r\n\r\n        if (!this.stats.users[userId]) {\r\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user leave events by updating the associated user's\r\n     * SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserLeave(userId) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.markAsHasLeft();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user name change events by updating the last known name\r\n     * tracked in the associated SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDisplayNameChange(userId, newName) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.setDisplayName(newName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a copy of the tracked SpeakerStats models.\r\n     *\r\n     * @returns {Object} The keys are the user ids and the values are the\r\n     * associated user's SpeakerStats model.\r\n     * @private\r\n     */\r\n    getStats() {\r\n        return this.stats.users;\r\n    }\r\n\r\n    /**\r\n     * Updates of the current stats is requested, passing the new values.\r\n     *\r\n     * @param {Object} newStats - The new values used to update current one.\r\n     * @private\r\n     */\r\n    _updateStats(newStats) {\r\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\r\n            let speakerStatsToUpdate;\r\n            const newParticipant = this.conference.getParticipantById(userId);\r\n\r\n            // we want to ignore hidden participants\r\n            if (!newParticipant || !newParticipant.isHidden()) {\r\n                if (this.stats.users[userId]) {\r\n                    speakerStatsToUpdate = this.stats.users[userId];\r\n\r\n                    if (!speakerStatsToUpdate.getDisplayName()) {\r\n                        speakerStatsToUpdate\r\n                            .setDisplayName(newStats[userId].displayName);\r\n                    }\r\n                } else {\r\n                    speakerStatsToUpdate = new SpeakerStats(\r\n                        userId, newStats[userId].displayName);\r\n                    this.stats.users[userId] = speakerStatsToUpdate;\r\n                    speakerStatsToUpdate.markAsHasLeft();\r\n                }\r\n            }\r\n\r\n            speakerStatsToUpdate.totalDominantSpeakerTime\r\n                = newStats[userId].totalDominantSpeakerTime;\r\n        }\r\n    }\r\n}\r\n","const AudioRecorder = require('./audioRecorder');\r\nconst SphinxService = require(\r\n    './transcriptionServices/SphinxTranscriptionService');\r\n\r\nconst BEFORE_STATE = 'before';\r\nconst RECORDING_STATE = 'recording';\r\nconst TRANSCRIBING_STATE = 'transcribing';\r\nconst FINISHED_STATE = 'finished';\r\n\r\n// the amount of characters each line in the transcription will have\r\nconst MAXIMUM_SENTENCE_LENGTH = 80;\r\n\r\n/**\r\n * This is the main object for handing the Transcription. It interacts with\r\n * the audioRecorder to record every person in a conference and sends the\r\n * recorder audio to a transcriptionService. The returned speech-to-text result\r\n * will be merged to create a transcript\r\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\r\n */\r\nfunction Transcriber() {\r\n    // the object which can record all audio in the conference\r\n    this.audioRecorder = new AudioRecorder();\r\n\r\n    // this object can send the recorder audio to a speech-to-text service\r\n    this.transcriptionService = new SphinxService();\r\n\r\n    // holds a counter to keep track if merging can start\r\n    this.counter = null;\r\n\r\n    // holds the date when transcription started which makes it possible\r\n    // to calculate the offset between recordings\r\n    this.startTime = null;\r\n\r\n    // will hold the transcription once it is completed\r\n    this.transcription = null;\r\n\r\n    // this will be a method which will be called once the transcription is done\r\n    // with the transcription as parameter\r\n    this.callback = null;\r\n\r\n    // stores all the retrieved speech-to-text results to merge together\r\n    // this value will store an Array<Word> object\r\n    this.results = [];\r\n\r\n    // Stores the current state of the transcription process\r\n    this.state = BEFORE_STATE;\r\n\r\n    // Used in the updateTranscription method to add a new line when the\r\n    // sentence becomes to long\r\n    this.lineLength = 0;\r\n}\r\n\r\n/**\r\n * Method to start the transcription process. It will tell the audioRecorder\r\n * to start storing all audio streams and record the start time for merging\r\n * purposes\r\n */\r\nTranscriber.prototype.start = function start() {\r\n    if (this.state !== BEFORE_STATE) {\r\n        throw new Error(\r\n            `The transcription can only start when it's in the \"${\r\n                BEFORE_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n    this.state = RECORDING_STATE;\r\n    this.audioRecorder.start();\r\n    this.startTime = new Date();\r\n};\r\n\r\n/**\r\n * Method to stop the transcription process. It will tell the audioRecorder to\r\n * stop, and get all the recorded audio to send it to the transcription service\r\n\r\n * @param callback a callback which will receive the transcription\r\n */\r\nTranscriber.prototype.stop = function stop(callback) {\r\n    if (this.state !== RECORDING_STATE) {\r\n        throw new Error(\r\n            `The transcription can only stop when it's in the \"${\r\n                RECORDING_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    // stop the recording\r\n    console.log('stopping recording and sending audio files');\r\n    this.audioRecorder.stop();\r\n\r\n    // and send all recorded audio the the transcription service\r\n    const callBack = blobCallBack.bind(null, this);\r\n\r\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\r\n        this.transcriptionService.send(recordingResult, callBack);\r\n        this.counter++;\r\n    });\r\n\r\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\r\n    this.state = TRANSCRIBING_STATE;\r\n\r\n    // and store the callback for later\r\n    this.callback = callback;\r\n};\r\n\r\n/**\r\n * This method gets the answer from the transcription service, calculates the\r\n * offset and adds is to every Word object. It will also start the merging\r\n * when every send request has been received\r\n *\r\n * note: Make sure to bind this as a Transcription object\r\n * @param {Transcriber} transcriber the transcriber instance\r\n * @param {RecordingResult} answer a RecordingResult object with a defined\r\n * WordArray\r\n */\r\nfunction blobCallBack(transcriber, answer) {\r\n    console.log(\r\n        'retrieved an answer from the transcription service. The answer has an'\r\n            + ` array of length: ${answer.wordArray.length}`);\r\n\r\n    // first add the offset between the start of the transcription and\r\n    // the start of the recording to all start and end times\r\n    if (answer.wordArray.length > 0) {\r\n        let offset = answer.startTime.getUTCMilliseconds()\r\n            - transcriber.startTime.getUTCMilliseconds();\r\n\r\n        // transcriber time will always be earlier\r\n\r\n        if (offset < 0) {\r\n            offset = 0; // presume 0 if it somehow not earlier\r\n        }\r\n\r\n        let array = '[';\r\n\r\n        answer.wordArray.forEach(wordObject => {\r\n            wordObject.begin += offset;\r\n            wordObject.end += offset;\r\n            array += `${wordObject.word},`;\r\n        });\r\n        array += ']';\r\n        console.log(array);\r\n\r\n        // give a name value to the Array object so that the merging can access\r\n        // the name value without having to use the whole recordingResult object\r\n        // in the algorithm\r\n        answer.wordArray.name = answer.name;\r\n    }\r\n\r\n    // then store the array and decrease the counter\r\n    transcriber.results.push(answer.wordArray);\r\n    transcriber.counter--;\r\n    console.log(`current counter: ${transcriber.counter}`);\r\n\r\n    // and check if all results have been received.\r\n    transcriber.maybeMerge();\r\n}\r\n\r\n/**\r\n * this method will check if the counter is zero. If it is, it will call\r\n * the merging method\r\n */\r\nTranscriber.prototype.maybeMerge = function() {\r\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\r\n        // make sure to include the events in the result arrays before\r\n        // merging starts\r\n        this.merge();\r\n    }\r\n};\r\n\r\n/**\r\n * This method will merge all speech-to-text arrays together in one\r\n * readable transcription string\r\n */\r\nTranscriber.prototype.merge = function() {\r\n    console.log(\r\n        `starting merge process!\\n The length of the array: ${\r\n            this.results.length}`);\r\n    this.transcription = '';\r\n\r\n    // the merging algorithm will look over all Word objects who are at pos 0 in\r\n    // every array. It will then select the one closest in time to the\r\n    // previously placed word, while removing the selected word from its array\r\n    // note: words can be skipped the skipped word's begin and end time somehow\r\n    // end up between the closest word start and end time\r\n    const arrays = this.results;\r\n\r\n    // arrays of Word objects\r\n    const potentialWords = []; // array of the first Word objects\r\n    // check if any arrays are already empty and remove them\r\n\r\n    hasPopulatedArrays(arrays);\r\n\r\n    // populate all the potential Words for a first time\r\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\r\n\r\n    // keep adding words to transcription until all arrays are exhausted\r\n    while (hasPopulatedArrays(arrays)) {\r\n        // first select the lowest array;\r\n        let lowestWordArray = arrays[0];\r\n\r\n        arrays.forEach(wordArray => {\r\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\r\n                lowestWordArray = wordArray;\r\n            }\r\n        });\r\n\r\n        // put the word in the transcription\r\n        let wordToAdd = lowestWordArray.shift();\r\n\r\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\r\n\r\n        // keep going until a word in another array has a smaller time\r\n        // or the array is empty\r\n        while (lowestWordArray.length > 0) {\r\n            let foundSmaller = false;\r\n            const wordToCompare = lowestWordArray[0].begin;\r\n\r\n            arrays.forEach(wordArray => {\r\n                if (wordArray[0].begin < wordToCompare) {\r\n                    foundSmaller = true;\r\n                }\r\n            });\r\n\r\n            // add next word if no smaller time has been found\r\n            if (foundSmaller) {\r\n                break;\r\n            }\r\n\r\n            wordToAdd = lowestWordArray.shift();\r\n            this.updateTranscription(wordToAdd, null);\r\n        }\r\n\r\n    }\r\n\r\n    // set the state to finished and do the necessary left-over tasks\r\n    this.state = FINISHED_STATE;\r\n    if (this.callback) {\r\n        this.callback(this.transcription);\r\n    }\r\n};\r\n\r\n/**\r\n * Appends a word object to the transcription. It will make a new line with a\r\n * name if a name is specified\r\n * @param {Word} word the Word object holding the word to append\r\n * @param {String|null} name the name of a new speaker. Null if not applicable\r\n */\r\nTranscriber.prototype.updateTranscription = function(word, name) {\r\n    if (name !== undefined && name !== null) {\r\n        this.transcription += `\\n${name}:`;\r\n        this.lineLength = name.length + 1; // +1 for the semi-colon\r\n    }\r\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\r\n        this.transcription += '\\n    ';\r\n        this.lineLength = 4; // because of the 4 spaces after the new line\r\n    }\r\n    this.transcription += ` ${word.word}`;\r\n    this.lineLength += word.word.length + 1; // +1 for the space\r\n};\r\n\r\n/**\r\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\r\n * All zero-element arrays inside will be removed\r\n * If any non-zero-element arrays are found, the method will return true.\r\n * otherwise it will return false\r\n * @param {Array<Array>} twoDimensionalArray the array to check\r\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\r\n */\r\nfunction hasPopulatedArrays(twoDimensionalArray) {\r\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\r\n        if (twoDimensionalArray[i].length === 0) {\r\n            twoDimensionalArray.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    return twoDimensionalArray.length > 0;\r\n}\r\n\r\n/**\r\n * Push a word to the right location in a sorted array. The array is sorted\r\n * from lowest to highest start time. Every word is stored in an object which\r\n * includes the name of the person saying the word.\r\n *\r\n * @param {Array<Word>} array the sorted array to push to\r\n * @param {Word} word the word to push into the array\r\n */\r\nfunction pushWordToSortedArray(array, word) {\r\n    if (array.length === 0) {\r\n        array.push(word);\r\n    } else {\r\n        if (array[array.length - 1].begin <= word.begin) {\r\n            array.push(word);\r\n\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (word.begin < array[i].begin) {\r\n                array.splice(i, 0, word);\r\n\r\n                return;\r\n            }\r\n        }\r\n        array.push(word); // fail safe\r\n    }\r\n}\r\n\r\n/**\r\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\r\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\r\n * audiostream, it will not be added by the audioRecorder\r\n * @param {JitsiTrack} track the track to give to the audioRecorder\r\n */\r\nTranscriber.prototype.addTrack = function(track) {\r\n    this.audioRecorder.addTrack(track);\r\n};\r\n\r\n/**\r\n * Remove the given track from the auioRecorder\r\n * @param track\r\n */\r\nTranscriber.prototype.removeTrack = function(track) {\r\n    this.audioRecorder.removeTrack(track);\r\n};\r\n\r\n/**\r\n * Will return the created transcription if it's avialable or throw an error\r\n * when it's not done yet\r\n * @returns {String} the transcription as a String\r\n */\r\nTranscriber.prototype.getTranscription = function() {\r\n    if (this.state !== FINISHED_STATE) {\r\n        throw new Error(\r\n            `The transcription can only be retrieved when it's in the \"${\r\n                FINISHED_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    return this.transcription;\r\n};\r\n\r\n/**\r\n * Returns the current state of the transcription process\r\n */\r\nTranscriber.prototype.getState = function() {\r\n    return this.state;\r\n};\r\n\r\n/**\r\n * Resets the state to the \"before\" state, such that it's again possible to\r\n * call the start method\r\n */\r\nTranscriber.prototype.reset = function() {\r\n    this.state = BEFORE_STATE;\r\n    this.counter = null;\r\n    this.transcription = null;\r\n    this.startTime = null;\r\n    this.callback = null;\r\n    this.results = [];\r\n    this.lineLength = 0;\r\n};\r\n\r\nmodule.exports = Transcriber;\r\n","import Statistics from '../statistics/statistics';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\r\n * the versions of conferencing system components in given\r\n * <tt>JitsiConference</tt>.\r\n * @param conference <tt>JitsiConference</tt> instance which will be used to\r\n *        listen for focus presence updates.\r\n * @constructor\r\n */\r\nexport default function ComponentsVersions(conference) {\r\n\r\n    this.versions = {};\r\n\r\n    this.conference = conference;\r\n    this.conference.addCommandListener(\r\n        'versions', this.processVersions.bind(this));\r\n}\r\n\r\nComponentsVersions.prototype.processVersions\r\n    = function(versions, mucResource, mucJid) {\r\n        if (!this.conference._isFocus(mucJid)) {\r\n            logger.warn(\r\n                `Received versions not from the focus user: ${versions}`,\r\n                mucJid);\r\n\r\n            return;\r\n        }\r\n\r\n        const log = [];\r\n\r\n        versions.children.forEach(component => {\r\n\r\n            const name = component.attributes.name;\r\n            const version = component.value;\r\n\r\n            if (this.versions[name] !== version) {\r\n                this.versions[name] = version;\r\n                logger.info(`Got ${name} version: ${version}`);\r\n\r\n                log.push({\r\n                    id: 'component_version',\r\n                    component: name,\r\n                    version\r\n                });\r\n            }\r\n        });\r\n\r\n        // logs versions to stats\r\n        if (log.length > 0) {\r\n            Statistics.sendLog(JSON.stringify(log));\r\n        }\r\n    };\r\n\r\n/**\r\n * Obtains the version of conferencing system component.\r\n * @param componentName the name of the component for which we want to obtain\r\n *        the version.\r\n * @returns {String} which describes the version of the component identified by\r\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\r\n */\r\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\r\n    return this.versions[componentName];\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\r\nimport * as Constants from './VideoSIPGWConstants';\r\n\r\n/**\r\n * Main video SIP GW handler. Stores references of all created sessions.\r\n */\r\nexport default class VideoSIPGW {\r\n\r\n    /**\r\n     * Creates new handler.\r\n     *\r\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\r\n     */\r\n    constructor(chatRoom) {\r\n        this.chatRoom = chatRoom;\r\n        this.eventEmitter = chatRoom.eventEmitter;\r\n        logger.debug('creating VideoSIPGW');\r\n        this.sessions = {};\r\n\r\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\r\n\r\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\r\n        // more than one VideoSIPGW can be created per JitsiConference,\r\n        // so we don't bother to cleanup\r\n        chatRoom.addPresenceListener('jibri-sip-call-state',\r\n            this.handleJibriSIPState.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Handles presence nodes with name: jibri-sip-call-state.\r\n     *\r\n     * @param {Object} node the presence node Object to handle.\r\n     * Object representing part of the presence received over xmpp.\r\n     */\r\n    handleJibriSIPState(node) {\r\n        const attributes = node.attributes;\r\n\r\n        if (!attributes) {\r\n            return;\r\n        }\r\n\r\n        logger.debug('Handle video sip gw state : ', attributes);\r\n\r\n        const newState = attributes.state;\r\n\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        switch (newState) {\r\n        case Constants.STATE_ON:\r\n        case Constants.STATE_OFF:\r\n        case Constants.STATE_PENDING:\r\n        case Constants.STATE_RETRYING:\r\n        case Constants.STATE_FAILED: {\r\n            const address = attributes.sipaddress;\r\n\r\n            if (!address) {\r\n                return;\r\n            }\r\n\r\n            // find the corresponding session and set its state\r\n            const session = this.sessions[address];\r\n\r\n            if (session) {\r\n                session.setState(newState, attributes.failure_reason);\r\n            } else {\r\n                logger.warn('Video SIP GW session not found:', address);\r\n            }\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new session and stores its reference if it does not exist or\r\n     * returns an error otherwise.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use.\r\n     * @param {string} displayName - The display name to use.\r\n     * @returns {JitsiVideoSIPGWSession|Error}\r\n     */\r\n    createVideoSIPGWSession(sipAddress, displayName) {\r\n        if (this.sessions[sipAddress]) {\r\n            logger.warn('There was already a Video SIP GW session for address',\r\n                sipAddress);\r\n\r\n            return new Error(Constants.ERROR_SESSION_EXISTS);\r\n        }\r\n\r\n        const session = new JitsiVideoSIPGWSession(\r\n            sipAddress, displayName, this.chatRoom);\r\n\r\n        session.addStateListener(this.sessionStateChangeListener);\r\n\r\n        this.sessions[sipAddress] = session;\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Listener for session state changed. When a session goes to off or failed\r\n     * we delete its reference.\r\n     *\r\n     * @param {options} event - { address, oldState, newState, displayName }\r\n     */\r\n    sessionStateChanged(event) {\r\n        const address = event.address;\r\n\r\n        if (event.newState === Constants.STATE_OFF\r\n            || event.newState === Constants.STATE_FAILED) {\r\n            const session = this.sessions[address];\r\n\r\n            if (!session) {\r\n                logger.error('Missing Video SIP GW session with address:',\r\n                    address);\r\n\r\n                return;\r\n            }\r\n\r\n            session.removeStateListener(this.sessionStateChangeListener);\r\n            delete this.sessions[address];\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n            event);\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The event name for current sip video session state changed.\r\n * @type {string} event name for sip video session state changed.\r\n */\r\nconst STATE_CHANGED = 'STATE_CHANGED';\r\n\r\n/**\r\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\r\n * When session is in OFF or FAILED stated it cannot be used anymore.\r\n */\r\nexport default class JitsiVideoSIPGWSession extends Listenable {\r\n\r\n    /**\r\n     * Creates new session with the desired sip address and display name.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use when\r\n     * starting the session.\r\n     * @param {string} displayName - The display name to use for\r\n     * that participant.\r\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\r\n     */\r\n    constructor(sipAddress, displayName, chatRoom) {\r\n        super();\r\n\r\n        this.sipAddress = sipAddress;\r\n        this.displayName = displayName;\r\n        this.chatRoom = chatRoom;\r\n\r\n        /*\r\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\r\n         * the session enters this state when it was in STATE_ON and was stopped\r\n         * and such session cannot be used anymore.\r\n         *\r\n         * @type {VideoSIPGWConstants|undefined}\r\n         */\r\n        this.state = undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the current session.\r\n     */\r\n    stop() {\r\n        if (this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\r\n            logger.warn('Video SIP GW session already stopped or failed!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('stop');\r\n    }\r\n\r\n    /**\r\n     * Starts a new session. Sends an iq to the focus.\r\n     */\r\n    start() {\r\n        // if state is off, this session was active for some reason\r\n        // and we should create new one, rather than reusing it\r\n        if (this.state === VideoSIPGWConstants.STATE_ON\r\n            || this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_PENDING\r\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\r\n            logger.warn('Video SIP GW session already started!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('start');\r\n    }\r\n\r\n    /**\r\n     * Changes the state of this session.\r\n     *\r\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\r\n     * @param {string} [optional] failureReason - The reason why a failure state\r\n     * was entered.\r\n     * @returns {void}\r\n     */\r\n    setState(newState, failureReason) {\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        const oldState = this.state;\r\n\r\n        this.state = newState;\r\n        this.eventEmitter.emit(STATE_CHANGED,\r\n            {\r\n                address: this.sipAddress,\r\n                failureReason,\r\n                oldState,\r\n                newState: this.state,\r\n                displayName: this.displayName\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Subscribes the passed listener to the event for state change of this\r\n     * session.\r\n     *\r\n     * @param {Function} listener - The function that will receive the event.\r\n     */\r\n    addStateListener(listener) {\r\n        this.addListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes the passed handler.\r\n     *\r\n     * @param {Function} listener - The function to be removed.\r\n     */\r\n    removeStateListener(listener) {\r\n        this.removeListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Sends a jibri command using an iq.\r\n     *\r\n     * @private\r\n     * @param {string} action - The action to send ('start' or 'stop').\r\n     */\r\n    _sendJibriIQ(action) {\r\n        const attributes = {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            sipaddress: this.sipAddress\r\n        };\r\n\r\n        attributes.displayname = this.displayName;\r\n\r\n        const iq = $iq({\r\n            to: this.chatRoom.focusMucJid,\r\n            type: 'set' })\r\n            .c('jibri', attributes)\r\n            .up();\r\n\r\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\r\n        this.chatRoom.connection.sendIQ(\r\n            iq,\r\n            () => {}, // eslint-disable-line no-empty-function\r\n            error => {\r\n                logger.error(\r\n                    `Failed to ${action} video SIP GW session, error: `, error);\r\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\r\n            });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport Statistics from '../statistics/statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\r\n// i.e. audioLevel > 0.008\r\nconst DETECTION_TIMEOUT = 3000;\r\n\r\n\r\n/**\r\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n *\r\n * @returns Promise<Object> - Object containing information about the found device.\r\n */\r\nexport default function getActiveAudioDevice() {\r\n\r\n    return new Promise(resolve => {\r\n        RTC.enumerateDevices(devices => {\r\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\r\n            const devicePromiseArray = [];\r\n\r\n\r\n            for (const micDevice of audioDevices) {\r\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\r\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\r\n\r\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\r\n                    // that's  why only take p.value[0].\r\n                    const track = tracks[0];\r\n                    const originalStream = track.getOriginalStream();\r\n\r\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\r\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\r\n                        Statistics.stopLocalStats(originalStream);\r\n                    });\r\n\r\n                    return track;\r\n                });\r\n\r\n                devicePromiseArray.push(devicePromise);\r\n            }\r\n\r\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\r\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\r\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\r\n\r\n\r\n                const availableDevices = successfulPromises.map(p => p.value);\r\n                const rejectReasons = rejectedPromises.map(p => p.value);\r\n\r\n                for (const reason of rejectReasons) {\r\n                    logger.error('Failed to acquire audio device with error: ', reason);\r\n                }\r\n\r\n                // Setup event handlers for monitored devices.\r\n                for (const device of availableDevices) {\r\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\r\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\r\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\r\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\r\n                        // no input.\r\n                        if (audioLevel > 0.008) {\r\n                            stopActiveDevices(availableDevices);\r\n                            resolve({ deviceId: device.deviceId,\r\n                                deviceLabel: device.track.label });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\r\n                setTimeout(() => {\r\n                    stopActiveDevices(availableDevices);\r\n                    resolve({\r\n                        deviceId: '',\r\n                        deviceLabel: '' }\r\n                    );\r\n                }, DETECTION_TIMEOUT);\r\n\r\n            });\r\n\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Stop the streams of the provided JitsiLocalTracks.\r\n *\r\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\r\n * @returns {void}\r\n */\r\nfunction stopActiveDevices(deviceList) {\r\n    for (const device of deviceList) {\r\n        device.stopStream();\r\n    }\r\n}\r\n","/* globals $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport RTC from '../RTC/RTC';\r\n\r\nimport ProxyConnectionPC from './ProxyConnectionPC';\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\r\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\r\n * and assumes IQs to be used for communication.\r\n */\r\nexport default class ProxyConnectionService {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionService} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\r\n     * video should be returned as a desktop stream. Defaults to false.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {JitsiConnection} [options.jitsiConnection] - The\r\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\r\n     * the P2P connection.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote video stream has been received and converted to a\r\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out. The arguments passed in are the\r\n     * jid to send the message to and the message\r\n     */\r\n    constructor(options = {}) {\r\n        const {\r\n            jitsiConnection,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        /**\r\n         * Holds a reference to the collection of all callbacks.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this._options = {\r\n            iceConfig: jitsiConnection\r\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\r\n            ...otherOptions\r\n        };\r\n\r\n        /**\r\n         * The active instance of {@code ProxyConnectionService}.\r\n         *\r\n         * @type {ProxyConnectionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onFatalError = this._onFatalError.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a message object regarding a proxy connection to create a new\r\n     * proxy connection or update and existing connection.\r\n     *\r\n     * @param {Object} message - A message object regarding establishing or\r\n     * updating a proxy connection.\r\n     * @param {Object} message.data - An object containing additional message\r\n     * details.\r\n     * @param {string} message.data.iq - The stringified iq which explains how\r\n     * and what to update regarding the proxy connection.\r\n     * @param {string} message.from - The message sender's full jid. Used for\r\n     * sending replies.\r\n     * @returns {void}\r\n     */\r\n    processMessage(message) {\r\n        const peerJid = message.from;\r\n\r\n        if (!peerJid) {\r\n            return;\r\n        }\r\n\r\n        // If a proxy connection has already been established and messages come\r\n        // from another peer jid then those messages should be replied to with\r\n        // a rejection.\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() !== peerJid) {\r\n            this._onFatalError(\r\n                peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'rejected'\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        const iq = this._convertStringToXML(message.data.iq);\r\n        const $jingle = iq && iq.find('jingle');\r\n        const action = $jingle && $jingle.attr('action');\r\n\r\n        if (action === ACTIONS.INITIATE) {\r\n            this._peerConnection = this._createPeerConnection(peerJid, {\r\n                isInitiator: false,\r\n                receiveVideo: true\r\n            });\r\n        }\r\n\r\n        // Truthy check for peer connection added to protect against possibly\r\n        // receiving actions before an ACTIONS.INITIATE.\r\n        if (this._peerConnection) {\r\n            this._peerConnection.processMessage($jingle);\r\n        }\r\n\r\n        // Take additional steps to ensure the peer connection is cleaned up\r\n        // if it is to be closed.\r\n        if (action === ACTIONS.CONNECTION_ERROR\r\n            || action === ACTIONS.UNAVAILABLE\r\n            || action === ACTIONS.TERMINATE) {\r\n            this._selfCloseConnection();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Instantiates and initiates a proxy peer connection.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote client that should\r\n     * receive messages.\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\r\n     * send through to the peer.\r\n     * @returns {void}\r\n     */\r\n    start(peerJid, localTracks = []) {\r\n        this._peerConnection = this._createPeerConnection(peerJid, {\r\n            isInitiator: true,\r\n            receiveVideo: false\r\n        });\r\n\r\n        this._peerConnection.start(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Terminates any active proxy peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.stop();\r\n        }\r\n\r\n        this._peerConnection = null;\r\n    }\r\n\r\n    /**\r\n     * Transforms a stringified xML into a XML wrapped in jQuery.\r\n     *\r\n     * @param {string} xml - The XML in string form.\r\n     * @private\r\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\r\n     * if an error is encountered during transformation.\r\n     */\r\n    _convertStringToXML(xml) {\r\n        try {\r\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\r\n\r\n            return $(xmlDom);\r\n        } catch (e) {\r\n            logger.error('Attempted to convert incorrectly formatted xml');\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote peer with which the\r\n     * {@code ProxyConnectionPC} will be established with.\r\n     * @param {Object} options - Additional defaults to instantiate the\r\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\r\n     * for more details.\r\n     * @private\r\n     * @returns {ProxyConnectionPC}\r\n     */\r\n    _createPeerConnection(peerJid, options = {}) {\r\n        if (!peerJid) {\r\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\r\n        }\r\n\r\n        const pcOptions = {\r\n            iceConfig: this._options.iceConfig,\r\n            onError: this._onFatalError,\r\n            onRemoteStream: this._onRemoteStream,\r\n            onSendMessage: this._onSendMessage,\r\n            peerJid,\r\n            ...options\r\n        };\r\n\r\n        return new ProxyConnectionPC(pcOptions);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when an error occurs that should cause\r\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\r\n     * connected. Sends an error message/reply back to the peer.\r\n     *\r\n     * @param {string} peerJid - The peer jid with which the connection was\r\n     * attempted or started, and to which an iq with error details should be\r\n     * sent.\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onFatalError(peerJid, errorType, details = '') {\r\n        logger.error(\r\n            'Received a proxy connection error', peerJid, errorType, details);\r\n\r\n        const iq = $iq({\r\n            to: peerJid,\r\n            type: 'set'\r\n        })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: errorType\r\n            })\r\n            .c('details')\r\n            .t(details)\r\n            .up();\r\n\r\n        this._onSendMessage(peerJid, iq);\r\n\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() === peerJid) {\r\n            this._selfCloseConnection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\r\n     * has offered a media stream. The stream is converted into a\r\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\r\n     * callback is defined.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\r\n     * for the peer's media stream.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        if (!this._options.onRemoteStream) {\r\n            logger.error('Remote track received without callback.');\r\n            jitsiRemoteTrack.dispose();\r\n\r\n            return;\r\n        }\r\n\r\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\r\n        let videoType;\r\n\r\n        if (isVideo) {\r\n            videoType = this._options.convertVideoToDesktop\r\n                ? VideoType.DESKTOP : VideoType.CAMERA;\r\n        }\r\n\r\n        // Grab the webrtc media stream and pipe it through the same processing\r\n        // that would occur for a locally obtained media stream.\r\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\r\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\r\n            [\r\n                {\r\n                    deviceId:\r\n                        `proxy:${this._peerConnection.getPeerJid()}`,\r\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\r\n                    sourceType: 'proxy',\r\n                    stream: mediaStream,\r\n                    track: mediaStream.getVideoTracks()[0],\r\n                    videoType\r\n                }\r\n            ]);\r\n\r\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\r\n    }\r\n\r\n    /**\r\n     * Formats and forwards a message an iq to be sent to a peer jid.\r\n     *\r\n     * @param {string} peerJid - The jid the iq should be sent to.\r\n     * @param {Object} iq - The iq which would be sent to the peer jid.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(peerJid, iq) {\r\n        if (!this._options.onSendMessage) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const stringifiedIq\r\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\r\n\r\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\r\n        } catch (e) {\r\n            logger.error('Attempted to send an incorrectly formatted iq.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _selfCloseConnection() {\r\n        this.stop();\r\n\r\n        this._options.onConnectionClosed\r\n            && this._options.onConnectionClosed();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\r\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\r\n\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\r\n * an XMPP connection. It is being re-used for consistency with the rest of the\r\n * codebase and to leverage existing peer connection event handling. Also\r\n * this class provides a facade to hide most of the API for\r\n * {@code JingleSessionPC}.\r\n */\r\nexport default class ProxyConnectionPC {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionPC} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {boolean} [options.isInitiator] - If true, the local client should\r\n     * send offers. If false, the local client should send answers. Defaults to\r\n     * false.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote media stream has been received through the peer connection.\r\n     * @param {string} options.peerJid - The jid of the remote client with which\r\n     * the peer connection is being establish and which should receive direct\r\n     * messages regarding peer connection updates.\r\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\r\n     * connection should accept incoming video streams. Defaults to false.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out.\r\n     */\r\n    constructor(options = {}) {\r\n        this._options = {\r\n            iceConfig: {},\r\n            isInitiator: false,\r\n            receiveAudio: false,\r\n            receiveVideo: false,\r\n            ...options\r\n        };\r\n\r\n        /**\r\n         * Instances of {@code JitsiTrack} associated with this instance of\r\n         * {@code ProxyConnectionPC}.\r\n         *\r\n         * @type {Array<JitsiTrack>}\r\n         */\r\n        this._tracks = [];\r\n\r\n        /**\r\n         * The active instance of {@code JingleSessionPC}.\r\n         *\r\n         * @type {JingleSessionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onError = this._onError.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the remote peer with which this peer connection should\r\n     * be established with.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getPeerJid() {\r\n        return this._options.peerJid;\r\n    }\r\n\r\n    /**\r\n     * Updates the peer connection based on the passed in jingle.\r\n     *\r\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\r\n     * describing how the peer connection should be updated.\r\n     * @returns {void}\r\n     */\r\n    processMessage($jingle) {\r\n        switch ($jingle.attr('action')) {\r\n        case ACTIONS.ACCEPT:\r\n            this._onSessionAccept($jingle);\r\n            break;\r\n\r\n        case ACTIONS.INITIATE:\r\n            this._onSessionInitiate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TERMINATE:\r\n            this._onSessionTerminate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TRANSPORT_INFO:\r\n            this._onTransportInfo($jingle);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a peer connection and starts the offer/answer cycle to\r\n     * establish a connection with a remote peer.\r\n     *\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\r\n     * to add to the peer connection.\r\n     * @returns {void}\r\n     */\r\n    start(localTracks = []) {\r\n        if (this._peerConnection) {\r\n            return;\r\n        }\r\n\r\n        this._tracks = this._tracks.concat(localTracks);\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.invite(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Begins the process of disconnecting from a remote peer and cleaning up\r\n     * the peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.terminate();\r\n        }\r\n\r\n        this._onSessionTerminate();\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\r\n     * dependencies of {@code JingleSessionPC}.\r\n     *\r\n     * @private\r\n     * @returns {JingleSessionPC}\r\n     */\r\n    _createPeerConnection() {\r\n        /**\r\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\r\n         * object, which may not be accessible from the caller.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const configStub = {};\r\n\r\n        /**\r\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\r\n         * passed through, which also has the jingle plugin initialized on it.\r\n         * This connection object is used to signal out peer connection updates\r\n         * via iqs, and those updates need to be piped back out to the remote\r\n         * peer.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const connectionStub = {\r\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\r\n            // spot has no signalling it will not be in a meeting where this is used.\r\n            connected: true,\r\n            jingle: {\r\n                terminate: () => { /** no-op */ }\r\n            },\r\n            sendIQ: this._onSendMessage,\r\n\r\n            // Returns empty function, because it does not add any listeners for real\r\n            // eslint-disable-next-line no-empty-function\r\n            addEventListener: () => () => { }\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} can take in a custom ice configuration,\r\n         * depending on the peer connection type, peer-to-peer or other.\r\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\r\n         * connection so the ice configuration is hard-coded with defaults.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const iceConfigStub = {\r\n            iceServers: DEFAULT_STUN_SERVERS,\r\n            ...this._options.iceConfig\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} expects an instance of\r\n         * {@code JitsiConference}, which has an event emitter that is used\r\n         * to signal various connection updates that the local client should\r\n         * act upon. The conference instance is not a dependency of a proxy\r\n         * connection, but the emitted events can be relevant to the proxy\r\n         * connection so the event emitter is stubbed.\r\n         *\r\n         * @param {string} event - The constant for the event type.\r\n         * @type {Function}\r\n         * @returns {void}\r\n         */\r\n        const emitter = event => {\r\n            switch (event) {\r\n            case XMPPEvents.CONNECTION_ICE_FAILED:\r\n            case XMPPEvents.CONNECTION_FAILED:\r\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * {@link JingleSessionPC} expects an instance of\r\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\r\n         * is instantiated outside of the {@code JitsiConference}, so it must be\r\n         * stubbed to prevent errors.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const roomStub = {\r\n            addPresenceListener: () => { /** no-op */ },\r\n            connectionTimes: [],\r\n            eventEmitter: { emit: emitter },\r\n            getMediaPresenceInfo: () => {\r\n                // Errors occur if this function does not return an object\r\n\r\n                return {};\r\n            },\r\n            removePresenceListener: () => { /** no-op */ }\r\n        };\r\n\r\n        /**\r\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\r\n         * @type {Object}\r\n         */\r\n        const conferenceStub = {};\r\n\r\n        /**\r\n         * Create an instance of {@code RTC} as it is required for peer\r\n         * connection creation by {@code JingleSessionPC}. An existing instance\r\n         * of {@code RTC} from elsewhere should not be re-used because it is\r\n         * a stateful grouping of utilities.\r\n         */\r\n        this._rtc = new RTC(conferenceStub, {});\r\n\r\n        /**\r\n         * Add the remote track listener here as {@code JingleSessionPC} has\r\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\r\n         * emitter.\r\n         */\r\n        this._rtc.addListener(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            this._onRemoteStream\r\n        );\r\n\r\n        const peerConnection = new JingleSessionPC(\r\n            undefined, // sid\r\n            undefined, // localJid\r\n            this._options.peerJid, // remoteJid\r\n            connectionStub, // connection\r\n            {\r\n                offerToReceiveAudio: this._options.receiveAudio,\r\n                offerToReceiveVideo: this._options.receiveVideo\r\n            }, // mediaConstraints\r\n            iceConfigStub, // iceConfig\r\n            true, // isP2P\r\n            this._options.isInitiator // isInitiator\r\n        );\r\n\r\n        /**\r\n         * An additional initialize call is necessary to properly set instance\r\n         * variable for calling.\r\n         */\r\n        peerConnection.initialize(roomStub, this._rtc, configStub);\r\n\r\n        return peerConnection;\r\n    }\r\n\r\n    /**\r\n     * Invoked when a connection related issue has been encountered.\r\n     *\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onError(errorType, details = '') {\r\n        this._options.onError(this._options.peerJid, errorType, details);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the peer connection has received a remote media\r\n     * stream.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\r\n     * wrapped in {@code JitsiRemoteTrack}.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        this._tracks.push(jitsiRemoteTrack);\r\n\r\n        this._options.onRemoteStream(jitsiRemoteTrack);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\r\n     * out to the remote peer.\r\n     *\r\n     * @param {XML} iq - The message to signal out.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(iq) {\r\n        this._options.onSendMessage(this._options.peerJid, iq);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to an agreement to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP answer to a previously\r\n     * sent SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionAccept($jingle) {\r\n        if (!this._peerConnection) {\r\n            logger.error('Received an answer when no peer connection exists.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection.setAnswer($jingle);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionInitiate($jingle) {\r\n        if (this._peerConnection) {\r\n            logger.error('Received an offer when an offer was already sent.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.acceptOffer(\r\n            $jingle,\r\n            () => { /** no-op */ },\r\n            () => this._onError(\r\n                this._options.peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'session initiate error'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to disconnect an active proxy\r\n     * connection. Cleans up tracks and the peer connection.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionTerminate() {\r\n        this._tracks.forEach(track => track.dispose());\r\n        this._tracks = [];\r\n\r\n        if (this._peerConnection) {\r\n            this._peerConnection.onTerminated();\r\n        }\r\n\r\n        if (this._rtc) {\r\n            this._rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_ADDED,\r\n                this._onRemoteStream\r\n            );\r\n\r\n            this._rtc.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to ICE candidates from the remote peer.\r\n     * The passed in jingle element should contain an ICE candidate.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTransportInfo($jingle) {\r\n        this._peerConnection.addIceCandidates($jingle);\r\n    }\r\n}\r\n","export default {\r\n    error: {\r\n        BUSY: 'busy',\r\n        ERROR: 'error',\r\n        RESOURCE_CONSTRAINT: 'resource-constraint',\r\n        SERVICE_UNAVAILABLE: 'service-unavailable'\r\n    },\r\n    mode: {\r\n        FILE: 'file',\r\n        STREAM: 'stream'\r\n    },\r\n    status: {\r\n        OFF: 'off',\r\n        ON: 'on',\r\n        PENDING: 'pending'\r\n    }\r\n};\r\n","const AuthUtil = {\r\n    /**\r\n     * Creates the URL pointing to JWT token authentication service. It is\r\n     * formatted from the 'urlPattern' argument which can contain the following\r\n     * constants:\r\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\r\n     * argument to this method.\r\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\r\n     * the role upgrade scenario, where user connects from anonymous domain and\r\n     * then gets upgraded to the moderator by logging-in from the popup window.\r\n     *\r\n     * @param urlPattern a URL pattern pointing to the login service\r\n     * @param roomName the name of the conference room for which the user will\r\n     * be authenticated\r\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\r\n     * upgrade scenario, where the user logs-in from the popup window in order\r\n     * to have the moderator rights granted\r\n     *\r\n     * @returns {string|null} the URL pointing to JWT login service or\r\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\r\n     * constructed.\r\n     */\r\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\r\n        const url = urlPattern;\r\n\r\n        if (typeof url !== 'string') {\r\n            return null;\r\n        }\r\n\r\n        return url.replace('{room}', roomName)\r\n            .replace('{roleUpgrade}', roleUpgrade === true);\r\n    }\r\n};\r\n\r\nmodule.exports = AuthUtil;\r\n","/* global\r\n    __filename\r\n*/\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport { createAudioContext } from './WebAudioUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\r\n * MediaStream.\r\n */\r\nexport default class AudioMixer {\r\n    /**\r\n     * Create AudioMixer instance.\r\n     */\r\n    constructor() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n        this._streamMSSArray = [];\r\n    }\r\n\r\n    /**\r\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\r\n     *\r\n     * @param {MediaStream} stream - MediaStream to be mixed.\r\n     */\r\n    addMediaStream(stream) {\r\n        if (!stream.getAudioTracks()) {\r\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\r\n        }\r\n\r\n        this._streamsToMix.push(stream);\r\n    }\r\n\r\n    /**\r\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\r\n     * it; the resulting mixed MediaStream is returned.\r\n     *\r\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\r\n     * is added.\r\n     */\r\n    start() {\r\n        // If the mixer was already started just return the existing mixed stream.\r\n        if (this._started) {\r\n            return this._mixedMSD.stream;\r\n        }\r\n\r\n        this._audioContext = createAudioContext();\r\n\r\n        if (!this._streamsToMix.length) {\r\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\r\n\r\n            return null;\r\n        }\r\n\r\n        this._started = true;\r\n\r\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\r\n\r\n        for (const stream of this._streamsToMix) {\r\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\r\n\r\n            streamMSS.connect(this._mixedMSD);\r\n\r\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\r\n            this._streamMSSArray.push(streamMSS);\r\n        }\r\n\r\n        return this._mixedMSD.stream;\r\n    }\r\n\r\n    /**\r\n     * Disconnect MediaStreamAudioSourceNode and clear references.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n\r\n        // Clean up created MediaStreamAudioSourceNode.\r\n        for (const streamMSS of this._streamMSSArray) {\r\n            streamMSS.disconnect();\r\n        }\r\n\r\n        this._streamMSSArray = [];\r\n\r\n        if (this._audioContext) {\r\n            this._audioContext = undefined;\r\n        }\r\n    }\r\n}\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            if (!mLine.sources) {\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // check if there is a m-line that is inactive and is of the same media type\n                const inactiveMid = currentDesc.media\n                    .findIndex(cmLine => cmLine.direction\n                        && cmLine.direction === 'inactive'\n                        && cmLine.type === type);\n\n                if (inactiveMid > -1) {\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\n                } else {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = currentDesc.media.length.toString();\n                    newMline.direction = 'sendonly';\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    currentDesc.media.push(newMline);\n                }\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\r\n// library (a.k.a. JitsiMeetJS).\r\nmodule.exports = require('./JitsiMeetJS').default;\r\n","/* global __filename */\r\n\r\nimport Logger from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiConnection from './JitsiConnection';\r\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport JitsiMediaDevices from './JitsiMediaDevices';\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\r\nimport ProxyConnectionService\r\n    from './modules/proxyconnection/ProxyConnectionService';\r\nimport recordingConstants from './modules/recording/recordingConstants';\r\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport AuthUtil from './modules/util/AuthUtil';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport ScriptUtil from './modules/util/ScriptUtil';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport AudioMixer from './modules/webaudio/AudioMixer';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport Resolutions from './service/RTC/Resolutions';\r\nimport * as ConnectionQualityEvents\r\n    from './service/connectivity/ConnectionQualityEvents';\r\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\r\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\r\n\r\nconst logger = Logger.getLogger(__filename);\r\n\r\n/**\r\n * The amount of time to wait until firing\r\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\r\n */\r\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\r\n\r\n/**\r\n * Gets the next lowest desirable resolution to try for a camera. If the given\r\n * resolution is already the lowest acceptable resolution, returns {@code null}.\r\n *\r\n * @param resolution the current resolution\r\n * @return the next lowest resolution from the given one, or {@code null} if it\r\n * is already the lowest acceptable resolution.\r\n */\r\nfunction getLowerResolution(resolution) {\r\n    if (!Resolutions[resolution]) {\r\n        return null;\r\n    }\r\n    const order = Resolutions[resolution].order;\r\n    let res = null;\r\n    let resName = null;\r\n\r\n    Object.keys(Resolutions).forEach(r => {\r\n        const value = Resolutions[r];\r\n\r\n        if (!res || (res.order < value.order && value.order < order)) {\r\n            resName = r;\r\n            res = value;\r\n        }\r\n    });\r\n\r\n    if (resName === resolution) {\r\n        resName = null;\r\n    }\r\n\r\n    return resName;\r\n}\r\n\r\n/**\r\n * Extracts from an 'options' objects with a specific format (TODO what IS the\r\n * format?) the attributes which are to be logged in analytics events.\r\n *\r\n * @param options gum options (???)\r\n * @returns {*} the attributes to attach to analytics events.\r\n */\r\nfunction getAnalyticsAttributesFromOptions(options) {\r\n    const attributes = {\r\n        'audio_requested':\r\n            options.devices.includes('audio'),\r\n        'video_requested':\r\n            options.devices.includes('video'),\r\n        'screen_sharing_requested':\r\n            options.devices.includes('desktop')\r\n    };\r\n\r\n    if (attributes.video_requested) {\r\n        attributes.resolution = options.resolution;\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n/**\r\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\r\n * this module, it's also a global (i.e. attached to {@code window}) namespace\r\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\r\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\r\n * automatically be attached to {@code window} by webpack. Unfortunately,\r\n * webpack's source code does not check whether the global variable has already\r\n * been assigned and overwrites it. Which is OK for the module\r\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\r\n * because it may already contain the values of other projects in the Jitsi Meet\r\n * family. The solution offered here works around webpack by merging all\r\n * existing values of the namespace {@code JitsiMeetJS} into the module\r\n * {@code JitsiMeetJS}.\r\n *\r\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\r\n * exported and may be attached to {@code window} by webpack later on).\r\n * @private\r\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\r\n * value of the namespace {@code JitsiMeetJS} (if any).\r\n */\r\nfunction _mergeNamespaceAndModule(module) {\r\n    return (\r\n        typeof window.JitsiMeetJS === 'object'\r\n            ? Object.assign({}, window.JitsiMeetJS, module)\r\n            : module);\r\n}\r\n\r\n/**\r\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\r\n */\r\nexport default _mergeNamespaceAndModule({\r\n\r\n    version: '{#COMMIT_HASH#}',\r\n\r\n    JitsiConnection,\r\n\r\n    /**\r\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\r\n     * local Jitsi participant without going through a Jitsi conference. It is\r\n     * currently used for room integration development, specifically wireless\r\n     * screensharing. Its API is experimental and will likely change; usage of\r\n     * it is advised against.\r\n     */\r\n    ProxyConnectionService,\r\n\r\n    constants: {\r\n        participantConnectionStatus: ParticipantConnectionStatus,\r\n        recording: recordingConstants,\r\n        sipVideoGW: VideoSIPGWConstants,\r\n        transcriptionStatus: JitsiTranscriptionStatus\r\n    },\r\n    events: {\r\n        conference: JitsiConferenceEvents,\r\n        connection: JitsiConnectionEvents,\r\n        detection: DetectionEvents,\r\n        track: JitsiTrackEvents,\r\n        mediaDevices: JitsiMediaDevicesEvents,\r\n        connectionQuality: ConnectionQualityEvents,\r\n        e2eping: E2ePingEvents\r\n    },\r\n    errors: {\r\n        conference: JitsiConferenceErrors,\r\n        connection: JitsiConnectionErrors,\r\n        track: JitsiTrackErrors\r\n    },\r\n    errorTypes: {\r\n        JitsiTrackError\r\n    },\r\n    logLevels: Logger.levels,\r\n    mediaDevices: JitsiMediaDevices,\r\n    analytics: Statistics.analytics,\r\n    init(options = {}) {\r\n        Statistics.init(options);\r\n\r\n        // Initialize global window.connectionTimes\r\n        // FIXME do not use 'window'\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n\r\n        if (options.enableAnalyticsLogging !== true) {\r\n            logger.warn('Analytics disabled, disposing.');\r\n            this.analytics.dispose();\r\n        }\r\n\r\n        if (options.enableWindowOnErrorHandler) {\r\n            GlobalOnErrorHandler.addHandler(\r\n                this.getGlobalOnErrorHandler.bind(this));\r\n        }\r\n\r\n        // Log deployment-specific information, if available. Defined outside\r\n        // the application by individual deployments\r\n        const aprops = options.deploymentInfo;\r\n\r\n        if (aprops && Object.keys(aprops).length > 0) {\r\n            const logObject = {};\r\n\r\n            for (const attr in aprops) {\r\n                if (aprops.hasOwnProperty(attr)) {\r\n                    logObject[attr] = aprops[attr];\r\n                }\r\n            }\r\n\r\n            logObject.id = 'deployment_info';\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        if (this.version) {\r\n            const logObject = {\r\n                id: 'component_version',\r\n                component: 'lib-jitsi-meet',\r\n                version: this.version\r\n            };\r\n\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        return RTC.init(options);\r\n    },\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return RTC.isDesktopSharingEnabled();\r\n    },\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    isWebRtcSupported() {\r\n        return RTC.isWebRtcSupported();\r\n    },\r\n\r\n    setLogLevel(level) {\r\n        Logger.setLogLevel(level);\r\n    },\r\n\r\n    /**\r\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\r\n     *\r\n     * @param {Logger.levels} level the logging level to be set\r\n     * @param {string} id the logger id to which new logging level will be set.\r\n     * Usually it's the name of the JavaScript source file including the path\r\n     * ex. \"modules/xmpp/ChatRoom.js\"\r\n     */\r\n    setLogLevelById(level, id) {\r\n        Logger.setLogLevelById(level, id);\r\n    },\r\n\r\n    /**\r\n     * Registers new global logger transport to the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.addGlobalTransport\r\n     */\r\n    addGlobalLogTransport(globalTransport) {\r\n        Logger.addGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n     * Removes global logging transport from the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.removeGlobalTransport\r\n     */\r\n    removeGlobalLogTransport(globalTransport) {\r\n        Logger.removeGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    *\r\n    * @param options\r\n    * @see Logger.setGlobalOptions\r\n    */\r\n    setGlobalLogOptions(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n\r\n    /**\r\n     * Creates the media tracks and returns them trough the callback.\r\n     *\r\n     * @param options Object with properties / settings specifying the tracks\r\n     * which should be created. should be created or some additional\r\n     * configurations about resolution for example.\r\n     * @param {Array} options.effects optional effects array for the track\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {intiger} interval - the interval (in ms) for\r\n     * checking whether the desktop sharing extension is installed or not\r\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\r\n     * createLocalTracks will wait and check on every \"interval\" ms for the\r\n     * extension. If the desktop extension is not install and checkAgain()==true\r\n     * createLocalTracks will finish with rejected Promise.\r\n     * @param {Function} listener - The listener will be called to notify the\r\n     * user of lib-jitsi-meet that createLocalTracks is starting external\r\n     * extension installation process.\r\n     * NOTE: If the inline installation process is not possible and external\r\n     * installation is enabled the listener property will be called to notify\r\n     * the start of external installation process. After that createLocalTracks\r\n     * will start to check for the extension on every interval ms until the\r\n     * plugin is installed or until checkAgain return false. If the extension\r\n     * is found createLocalTracks will try to get the desktop sharing track and\r\n     * will finish the execution. If checkAgain returns false, createLocalTracks\r\n     * will finish the execution with rejected Promise.\r\n     *\r\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\r\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\r\n     * @param originalOptions - internal use only, to be able to store the\r\n     * originally requested options.\r\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\r\n     * that returns an array of created JitsiTracks if resolved, or a\r\n     * JitsiConferenceError if rejected.\r\n     */\r\n    createLocalTracks(\r\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\r\n        let promiseFulfilled = false;\r\n\r\n        if (firePermissionPromptIsShownEvent === true) {\r\n            window.setTimeout(() => {\r\n                if (!promiseFulfilled) {\r\n                    JitsiMediaDevices.emitEvent(\r\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\r\n                        browser.getName());\r\n                }\r\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\r\n        }\r\n\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n        window.connectionTimes['obtainPermissions.start']\r\n            = window.performance.now();\r\n\r\n        return RTC.obtainAudioAndVideoPermissions(options)\r\n            .then(tracks => {\r\n                promiseFulfilled = true;\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                Statistics.sendAnalytics(\r\n                    createGetUserMediaEvent(\r\n                        'success',\r\n                        getAnalyticsAttributesFromOptions(options)));\r\n\r\n                if (!RTC.options.disableAudioLevels) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n                        const mStream = track.getOriginalStream();\r\n\r\n                        if (track.getType() === MediaType.AUDIO) {\r\n                            Statistics.startLocalStats(mStream,\r\n                                track.setAudioLevel.bind(track));\r\n                            track.addEventListener(\r\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\r\n                                () => {\r\n                                    Statistics.stopLocalStats(mStream);\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // set real device ids\r\n                const currentlyAvailableMediaDevices\r\n                    = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n                if (currentlyAvailableMediaDevices) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n\r\n                        track._setRealDeviceIdFromDeviceList(\r\n                            currentlyAvailableMediaDevices);\r\n                    }\r\n                }\r\n\r\n                // set the contentHint to \"detail\" for desktop tracks\r\n                // eslint-disable-next-line prefer-const\r\n                for (const track of tracks) {\r\n                    if (track.type === MediaType.VIDEO\r\n                        && track.videoType === 'desktop') {\r\n                        this.setVideoTrackContentHints(track.track, 'detail');\r\n                    }\r\n                }\r\n\r\n                return tracks;\r\n            })\r\n            .catch(error => {\r\n                promiseFulfilled = true;\r\n\r\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\r\n                    && !browser.usesNewGumFlow()) {\r\n                    const oldResolution = options.resolution || '720';\r\n                    const newResolution = getLowerResolution(oldResolution);\r\n\r\n                    if (newResolution !== null) {\r\n                        options.resolution = newResolution;\r\n\r\n                        logger.debug(\r\n                            'Retry createLocalTracks with resolution',\r\n                            newResolution);\r\n\r\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                'old_resolution': oldResolution,\r\n                                'new_resolution': newResolution,\r\n                                reason: 'unsupported resolution'\r\n                            }));\r\n\r\n                        return this.createLocalTracks(\r\n                            options,\r\n                            undefined,\r\n                            originalOptions || Object.assign({}, options));\r\n                    }\r\n\r\n                    // We tried everything. If there is a mandatory device id,\r\n                    // remove it and let gum find a device to use.\r\n                    if (originalOptions\r\n                        && error.gum.constraints\r\n                        && error.gum.constraints.video\r\n                        && error.gum.constraints.video.mandatory\r\n                        && error.gum.constraints.video.mandatory.sourceId) {\r\n                        originalOptions.cameraDeviceId = undefined;\r\n\r\n                        return this.createLocalTracks(originalOptions);\r\n                    }\r\n                }\r\n\r\n                if (error.name\r\n                        === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\r\n                    // User cancelled action is not really an error, so only\r\n                    // log it as an event to avoid having conference classified\r\n                    // as partially failed\r\n                    const logObject = {\r\n                        id: 'screensharing_user_canceled',\r\n                        message: error.message\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                reason: 'extension install user canceled'\r\n                            }));\r\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\r\n                    // logs not found devices with just application log to cs\r\n                    const logObject = {\r\n                        id: 'usermedia_missing_device',\r\n                        status: error.gum.devices\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = 'device not found';\r\n                    attributes.devices = error.gum.devices.join('.');\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                } else {\r\n                    // Report gUM failed to the stats\r\n                    Statistics.sendGetUserMediaFailed(error);\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = error.name;\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                }\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\r\n     * order to obtain VAD scores for individual PCM audio samples.\r\n     * @param {string} localAudioDeviceId - The target local audio device.\r\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\r\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\r\n     * longer calls, lowers values mean more calls but shorter.\r\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\r\n     * to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * i.e. (16KHz, 44.1 KHz etc.)\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>}\r\n     */\r\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\r\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\r\n    },\r\n\r\n    /**\r\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\r\n     * user to mix multiple MediaStreams into a single one.\r\n     *\r\n     * @returns {AudioMixer}\r\n     */\r\n    createAudioMixer() {\r\n        return new AudioMixer();\r\n    },\r\n\r\n    /**\r\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n     *\r\n     * @returns Promise<Object> - Object containing information about the found device.\r\n     */\r\n    getActiveAudioDevice() {\r\n        return getActiveAudioDevice();\r\n    },\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\r\n     */\r\n    isDeviceListAvailable() {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceListAvailable();\r\n    },\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     *\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     * {@code undefined} or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\r\n    },\r\n\r\n\r\n    /**\r\n     * Checks if the current environment supports having multiple audio\r\n     * input devices in use simultaneously.\r\n     *\r\n     * @returns {boolean} True if multiple audio input devices can be used.\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return this.mediaDevices.isMultipleAudioInputSupported();\r\n    },\r\n\r\n    /**\r\n     * Checks if local tracks can collect stats and collection is enabled.\r\n     *\r\n     * @param {boolean} True if stats are being collected for local tracks.\r\n     */\r\n    isCollectingLocalStats() {\r\n        return Statistics.audioLevelsEnabled\r\n            && LocalStatsCollector.isLocalStatsSupported();\r\n    },\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     *\r\n     * @param {function} callback\r\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\r\n     */\r\n    enumerateDevices(callback) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\r\n        this.mediaDevices.enumerateDevices(callback);\r\n    },\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * @returns function that can be used to be attached to window.onerror and\r\n     * if options.enableWindowOnErrorHandler is enabled returns\r\n     * the function used by the lib.\r\n     * (function(message, source, lineno, colno, error)).\r\n     */\r\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\r\n        logger.error(\r\n            `UnhandledError: ${message}`,\r\n            `Script: ${source}`,\r\n            `Line: ${lineno}`,\r\n            `Column: ${colno}`,\r\n            'StackTrace: ', error);\r\n        Statistics.reportGlobalError(error);\r\n    },\r\n\r\n    /**\r\n     * Informs lib-jitsi-meet about the current network status.\r\n     *\r\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\r\n     * otherwise.\r\n     */\r\n    setNetworkInfo({ isOnline }) {\r\n        NetworkInfo.updateNetworkInfo({ isOnline });\r\n    },\r\n\r\n    /**\r\n     * Set the contentHint on the transmitted stream track to indicate\r\n     * charaterstics in the video stream, which informs PeerConnection\r\n     * on how to encode the track (to prefer motion or individual frame detail)\r\n     * @param {MediaStreamTrack} track - the track that is transmitted\r\n     * @param {String} hint - contentHint value that needs to be set on the track\r\n     */\r\n    setVideoTrackContentHints(track, hint) {\r\n        if ('contentHint' in track) {\r\n            track.contentHint = hint;\r\n            if (track.contentHint !== hint) {\r\n                logger.debug('Invalid video track contentHint');\r\n            }\r\n        } else {\r\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\r\n        }\r\n    },\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Represents a hub/namespace for utility functionality which may be of\r\n     * interest to lib-jitsi-meet clients.\r\n     */\r\n    util: {\r\n        AuthUtil,\r\n        ScriptUtil,\r\n        browser\r\n    }\r\n});\r\n","/* Copyright @ 2016-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require('./Logger.js');\r\n\r\n/**\r\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\r\n * and thus can be added as global transport in order to capture all the logs.\r\n *\r\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\r\n * a message and stores them in a queue in order to batch log entries. There are\r\n * time and size limit constraints which determine how often batch entries are\r\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\r\n * will use the <tt>logStorage</tt> object given as an argument to save\r\n * the batch log entry.\r\n *\r\n * @param {Object} logStorage an object which allows to store the logs collected\r\n * @param {function(string|object[])} logStorage.storeLogs a method called when\r\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\r\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\r\n * item is an object it means that it's an aggregated message. That is a message\r\n * which is the same as the previous one and it's representation has\r\n * the following format:\r\n * {\r\n *   {string} text: 'the text of some duplicated message'\r\n *   {number} count: 3 // how many times the message appeared in a row\r\n * }\r\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\r\n * the sequence of \"A\". Which means that even if the next message \"C\" is\r\n * the same as \"A\" it will start a new aggregated message \"C\".\r\n * @param {function()} logStorage.isReady a method which should return\r\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\r\n * time storage is not ready log batches will be cached and stored on the next\r\n * occasion (flush or interval timeout).\r\n *\r\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\r\n * @param {number} options.maxEntryLength the size limit for a single log entry\r\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\r\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\r\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\r\n * storage becomes ready. Note that the \"is ready\" condition is checked every\r\n * <tt>options.storeInterval</tt> milliseconds.\r\n * @param {number} options.storeInterval how often the logs should be stored in\r\n * case <tt>maxEntryLength</tt> was not exceeded.\r\n * @param {boolean} options.stringifyObjects indicates whether or not object\r\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\r\n * message is composed. Note that objects logged on the error log level are\r\n * always stringified.\r\n *\r\n * @constructor\r\n */\r\nfunction LogCollector(logStorage, options) {\r\n    this.logStorage = logStorage;\r\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\r\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\r\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\r\n    // Bind the log method for each level to the corresponding method name\r\n    // in order to implement \"global log transport\" object.\r\n    Object.keys(Logger.levels).forEach(\r\n    function (logLevel) {\r\n        var methodName = Logger.levels[logLevel];\r\n        this[methodName] = function () {\r\n            this._log.apply(this, arguments);\r\n        }.bind(this, logLevel);\r\n    }.bind(this));\r\n    /**\r\n     * The ID of store logs interval if one is currently scheduled or\r\n     * <tt>null</tt> otherwise.\r\n     * @type {number|null}\r\n     */\r\n    this.storeLogsIntervalID = null;\r\n    /**\r\n     * The log messages that are to be batched into log entry when\r\n     * {@link LogCollector._flush} method is called.\r\n     * @type {string[]}\r\n     */\r\n    this.queue = [];\r\n    /**\r\n     * The total length of all messages currently stored in the {@link queue}.\r\n     * @type {number}\r\n     */\r\n    this.totalLen = 0;\r\n    /**\r\n     * An array used to temporarily store log batches, before the storage gets\r\n     * ready.\r\n     * @type {string[]}\r\n     */\r\n    this.outputCache = [];\r\n}\r\n\r\n/**\r\n * Method called inside of {@link formatLogMessage} in order to covert an\r\n * <tt>Object</tt> argument to string. The conversion will happen when either\r\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\r\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\r\n * returns \"[object with circular refs?]\" instead of an object if it fails.\r\n *\r\n * @param {object} someObject the <tt>object</tt> to be stringified.\r\n *\r\n * @return {string} the result of <tt>JSON.stringify</tt> or\r\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.stringify = function (someObject) {\r\n    try {\r\n        return JSON.stringify(someObject);\r\n    } catch (error) {\r\n        return '[object with circular refs?]';\r\n    }\r\n};\r\n\r\n/**\r\n * Formats log entry for the given logging level and arguments passed to the\r\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\r\n * arguments have to be captured using JS built-in 'arguments' variable.\r\n *\r\n * @param {Logger.levels} logLevel provides the logging level of the message to\r\n * be logged.\r\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\r\n *\r\n * @return {string|null} a non-empty string representation of the log entry\r\n * crafted from the log arguments. If the return value is <tt>null</tt> then\r\n * the message wil be discarded by this <tt>LogCollector</tt>.\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.formatLogMessage = function (\r\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\r\n    var msg = '';\r\n    for (var i = 1, len = arguments.length; i < len; i++) {\r\n        var arg = arguments[i];\r\n        // objects logged on error level are always converted to JSON\r\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\r\n            typeof arg === 'object') {\r\n            arg = this.stringify(arg);\r\n        }\r\n        msg += arg;\r\n        if (i !== len - 1) {\r\n            msg += ' ';\r\n        }\r\n    }\r\n    return msg.length ? msg : null;\r\n};\r\n\r\n/**\r\n * The log method bound to each of the logging levels in order to implement\r\n * \"global log transport\" object.\r\n *\r\n * @private\r\n */\r\nLogCollector.prototype._log = function() {\r\n\r\n    // var logLevel = arguments[0]; first argument is the log level\r\n    var timestamp = arguments[1];\r\n    var msg = this.formatLogMessage.apply(this, arguments);\r\n    if (msg) {\r\n        // The same as the previous message aggregation logic\r\n        var prevMessage = this.queue[this.queue.length - 1];\r\n        var prevMessageText = prevMessage && prevMessage.text;\r\n        if (prevMessageText === msg) {\r\n            prevMessage.count += 1;\r\n        } else {\r\n            this.queue.push({\r\n                text: msg,\r\n                timestamp: timestamp,\r\n                count: 1\r\n            });\r\n            this.totalLen += msg.length;\r\n        }\r\n    }\r\n\r\n    if (this.totalLen >= this.maxEntryLength) {\r\n        this._flush(true /* force */, true /* reschedule */);\r\n    }\r\n};\r\n\r\n/**\r\n * Starts periodical \"store logs\" task which will be triggered at the interval\r\n * specified in the constructor options.\r\n */\r\nLogCollector.prototype.start = function () {\r\n    this._reschedulePublishInterval();\r\n};\r\n\r\n/**\r\n * Reschedules the periodical \"store logs\" task which will store the next batch\r\n * log entry in the storage.\r\n * @private\r\n */\r\nLogCollector.prototype._reschedulePublishInterval = function () {\r\n    if (this.storeLogsIntervalID) {\r\n        window.clearTimeout(this.storeLogsIntervalID);\r\n        this.storeLogsIntervalID = null;\r\n    }\r\n    // It's actually a timeout, because it is rescheduled on every flush\r\n    this.storeLogsIntervalID = window.setTimeout(\r\n        this._flush.bind(\r\n            this, false /* do not force */, true /* reschedule */),\r\n        this.storeInterval);\r\n};\r\n\r\n/**\r\n * Call this method to flush the log entry buffer and store it in the log\r\n * storage immediately (given that the storage is ready).\r\n */\r\nLogCollector.prototype.flush = function() {\r\n    this._flush(\r\n        false /* do not force, as it will not be stored anyway */,\r\n        true /* reschedule next update */ );\r\n};\r\n\r\n/**\r\n * Stores the next batch log entry in the log storage.\r\n * @param {boolean} force enforce current logs batch to be stored or cached if\r\n * there is anything to be logged, but the storage is not ready yet. One of\r\n * legitimate reasons to force is when the logs length exceeds size limit which\r\n * could result in truncation.\r\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\r\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\r\n * task cycle.\r\n * @private\r\n */\r\nLogCollector.prototype._flush = function(force, reschedule) {\r\n    // Publish only if there's anything to be logged\r\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\r\n        //FIXME avoid truncating\r\n        // right now we don't care if the message size is \"slightly\" exceeded\r\n        if (this.logStorage.isReady()) {\r\n            // Sends all cached logs\r\n            if (this.outputCache.length) {\r\n                this.outputCache.forEach(\r\n                    function (cachedQueue) {\r\n                        this.logStorage.storeLogs(cachedQueue);\r\n                    }.bind(this)\r\n                );\r\n                // Clear the cache\r\n                this.outputCache = [];\r\n            }\r\n            // Send current batch\r\n            this.logStorage.storeLogs(this.queue);\r\n        } else {\r\n            this.outputCache.push(this.queue);\r\n        }\r\n\r\n        this.queue = [];\r\n        this.totalLen = 0;\r\n    }\r\n\r\n    if (reschedule) {\r\n        this._reschedulePublishInterval();\r\n    }\r\n};\r\n\r\n/**\r\n * Stops the periodical \"store logs\" task and immediately stores any pending\r\n * log entries as a batch.\r\n */\r\nLogCollector.prototype.stop = function() {\r\n    // Flush and stop publishing logs\r\n    this._flush(false /* do not force */, false /* do not reschedule */);\r\n};\r\n\r\nmodule.exports = LogCollector;\r\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\r\n    LOCAL_JID: 'local'\r\n};\r\n\r\nmodule.exports = Constants;\r\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Make sure that we ALWAYS add the conference flag to the remote\n        // description: That flag is deprecated but, as of this writing\n        // (09/2019), it's still used in jitsi-meet to enable legacy simulcast\n        // when screen-sharing (https://cs.chromium.org/chromium/src/third_party/webrtc/media/base/media_channel.h?rcl=f2773b54647633d5725fa25dea883f99dd1b400c&l=838).\n        //\n        // We've observed the following chain of events that almost always\n        // results in connectivity issues at the receiver:\n        //\n        // 1. The user joins a call with startVideoMuted=true, so there's no\n        //    jitsi track created.\n        // 2. The user enables screen-sharing. At this point we do a\n        //    renegotiation (which starts with an sRD); the ssrcCache is empty,\n        //    so the conference flag is not added to the remote description SDP.\n        // 3. The next step of the re-negotiation is to set the answer, so\n        //    mungeLocalDescription is called, and because now we have a track\n        //    due to the user enabling screen-sharing, it enables simulcast.\n        // 4. sLD is called with simulcast ssrcs, but the sRD call of step 2\n        //    didn't add the conference flag in the SDP, so the screen-sharing\n        //    is without simulcast.\n        // 5. Any subsequent re-negotiation (for example, due to a participant\n        //    joining/leaving the call) will enable simulcast and this switch\n        //    almost always results in a broken stream at the receiver.\n        if (!self.options.usesUnifiedPlan) {\n            assertGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\r\n\r\n/**\r\n * This object stores variables needed around the recording of an audio stream\r\n * and passing this recording along with additional information along to\r\n * different processes\r\n * @param blob the recording audio stream as a single blob\r\n * @param name the name of the person of the audio stream\r\n * @param startTime the time in UTC when recording of the audiostream started\r\n * @param wordArray the recorder audio stream transcribed as an array of Word\r\n *                  objects\r\n */\r\nconst RecordingResult = function(blob, name, startTime, wordArray) {\r\n    this.blob = blob;\r\n    this.name = name;\r\n    this.startTime = startTime;\r\n    this.wordArray = wordArray;\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = RecordingResult;\r\n","/* global config */\r\n\r\nconst Word = require('../word');\r\n\r\nconst audioRecorder = require('./../audioRecorder');\r\nconst TranscriptionService = require('./AbstractTranscriptionService');\r\n\r\n/**\r\n * Implements a TranscriptionService for a Sphinx4 http server\r\n */\r\nconst SphinxService = function() {\r\n    // set the correct url\r\n    this.url = getURL();\r\n};\r\n\r\n/**\r\n * Subclass of AbstractTranscriptionService\r\n */\r\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\r\n\r\n/**\r\n * Set the right constructor\r\n */\r\nSphinxService.constructor = SphinxService;\r\n\r\n/**\r\n * Overrides the sendRequest method from AbstractTranscriptionService\r\n * it will send the audio stream the a Sphinx4 server to get the transcription\r\n *\r\n * @param audioFileBlob the recorder audio stream an a single Blob\r\n * @param callback the callback function retrieving the server response\r\n */\r\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\r\n    console.log(`sending an audio file  to ${this.url}`);\r\n    console.log(`the audio file being sent: ${audioFileBlob}`);\r\n    const request = new XMLHttpRequest();\r\n\r\n    request.onreadystatechange = function() {\r\n        if (request.readyState === XMLHttpRequest.DONE\r\n            && request.status === 200) {\r\n            callback(request.responseText);\r\n        } else if (request.readyState === XMLHttpRequest.DONE) {\r\n            throw new Error(\r\n                `unable to accept response from sphinx server. status: ${\r\n                    request.status}`);\r\n        }\r\n\r\n        // if not ready no point to throw an error\r\n    };\r\n    request.open('POST', this.url);\r\n    request.setRequestHeader('Content-Type',\r\n        audioRecorder.determineCorrectFileType());\r\n    request.send(audioFileBlob);\r\n    console.log(`send ${audioFileBlob}`);\r\n};\r\n\r\n/**\r\n * Overrides the formatResponse method from AbstractTranscriptionService\r\n * It will parse the answer from the server in the expected format\r\n *\r\n * @param response the JSON body retrieved from the Sphinx4 server\r\n */\r\nSphinxService.prototype.formatResponse = function(response) {\r\n    const result = JSON.parse(response).objects;\r\n\r\n    // make sure to delete the session id object, which is always\r\n    // the first value in the JSON array\r\n\r\n    result.shift();\r\n    const array = [];\r\n\r\n    result.forEach(\r\n        word =>\r\n            word.filler\r\n                || array.push(new Word(word.word, word.start, word.end)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * checks wether the reply is empty, or doesn't contain a correct JSON object\r\n * @param response the server response\r\n * @return {boolean} whether the response is valid\r\n */\r\nSphinxService.prototype.verify = function(response) {\r\n    console.log(`response from server:${response.toString()}`);\r\n\r\n    // test if server responded with a string object\r\n    if (typeof response !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    // test if the string can be parsed into valid JSON\r\n    let json;\r\n\r\n    try {\r\n        json = JSON.parse(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n        return false;\r\n    }\r\n\r\n    // check if the JSON has a \"objects\" value\r\n    if (json.objects === undefined) {\r\n        return false;\r\n    }\r\n\r\n    // get the \"objects\" value and check for a session ID\r\n    const array = json.objects;\r\n\r\n    if (!(array[0] && array[0]['session-id'])) {\r\n        return false;\r\n    }\r\n\r\n    // everything seems to be in order\r\n    return true;\r\n};\r\n\r\n/**\r\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\r\n * it will throw an error\r\n *\r\n * @returns {string} the URL to the sphinx4 server\r\n */\r\nfunction getURL() {\r\n    const message = 'config does not contain an url to a Sphinx4 https server';\r\n\r\n    if (config.sphinxURL === undefined) {\r\n        console.log(message);\r\n    } else {\r\n        const toReturn = config.sphinxURL;\r\n\r\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\r\n            return toReturn;\r\n        }\r\n        console.log(message);\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = SphinxService;\r\n","/**\r\n * An object representing a transcribed word, with some additional information\r\n * @param word the word\r\n * @param begin the time the word was started being uttered\r\n * @param end the time the word stopped being uttered\r\n */\r\nconst Word = function(word, begin, end) {\r\n    this.word = word;\r\n    this.begin = begin;\r\n    this.end = end;\r\n};\r\n\r\n/**\r\n * Get the string representation of the word\r\n * @returns {*} the word as a string\r\n */\r\nWord.prototype.getWord = function() {\r\n    return this.word;\r\n};\r\n\r\n/**\r\n * Get the time the word started being uttered\r\n * @returns {*} the start time as an integer\r\n */\r\nWord.prototype.getBeginTime = function() {\r\n    return this.begin;\r\n};\r\n\r\n/**\r\n * Get the time the word stopped being uttered\r\n * @returns {*} the end time as an integer\r\n */\r\nWord.prototype.getEndTime = function() {\r\n    return this.end;\r\n};\r\n\r\nmodule.exports = Word;\r\n","/**\r\n * Abstract class representing an interface to implement a speech-to-text\r\n * service on.\r\n */\r\nconst TranscriptionService = function() {\r\n    throw new Error('TranscriptionService is abstract and cannot be'\r\n        + 'created');\r\n};\r\n\r\n/**\r\n * This method can be used to send the recorder audio stream and\r\n * retrieve the answer from the transcription service from the callback\r\n *\r\n * @param {RecordingResult} recordingResult a recordingResult object which\r\n * includes the recorded audio stream as a blob\r\n * @param {Function} callback  which will retrieve the a RecordingResult with\r\n *        the answer as a WordArray\r\n */\r\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\r\n    this.sendRequest(recordingResult.blob, response => {\r\n        if (this.verify(response)) {\r\n            recordingResult.wordArray = this.formatResponse(response);\r\n        } else {\r\n            console.log('the retrieved response from the server is not valid!');\r\n            recordingResult.wordArray = [];\r\n        }\r\n        callback(recordingResult);\r\n    });\r\n};\r\n\r\n/**\r\n * Abstract method which will rend the recorder audio stream to the implemented\r\n * transcription service and will retrieve an answer, which will be\r\n * called on the given callback method\r\n *\r\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\r\n * @param {function} callback function which will retrieve the answer\r\n *                            from the service\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\r\n    throw new Error('TranscriptionService.sendRequest is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will parse the output from the implemented\r\n * transcription service to the expected format\r\n *\r\n * The transcriber class expect an array of word objects, where each word\r\n * object is one transcribed word by the service.\r\n *\r\n * The expected output of this method is an array of word objects, in\r\n * the correct order. That is, the first object in the array is the first word\r\n * being said, and the last word in the array is the last word being said\r\n *\r\n * @param response the answer from the speech-to-text server which needs to be\r\n *                 formatted\r\n * @return {Array<Word>} an array of Word objects\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.formatResponse = function(response) {\r\n    throw new Error('TranscriptionService.format is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will verify that the response from the server is valid\r\n *\r\n * @param response the response from the server\r\n * @return {boolean} true if response is valid, false otherwise\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.verify = function(response) {\r\n    throw new Error('TranscriptionService.verify is abstract');\r\n};\r\n\r\nmodule.exports = TranscriptionService;\r\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        cb(modifiedEvent);\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  const {navigator} = window;\n\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (navigator.mediaDevices &&\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n    result.browser = 'edge';\n    result.version = extractVersion(navigator.userAgent,\n        /Edge\\/(\\d+).(\\d+)$/, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const browserDetails = utils.detectBrowser(window);\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const addIceCandidateNullSupported =\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!addIceCandidateNullSupported && !arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions. Native support planned for Chrome M77.\n      if (browserDetails.version < 78 &&\n        arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\nexport function fixNegotiationNeeded(window) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (pc.signalingState !== 'stable') {\n      return;\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  const shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\n  };\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window) {\n  if (!('getDisplayMedia' in window.navigator)) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    window.navigator.getDisplayMedia.bind(window.navigator);\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nimport {filterIceServers} from './filtericeservers';\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (window.RTCIceGatherer) {\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\n        return args;\n      };\n    }\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\n        return args;\n      };\n    }\n    // this adds an additional event listener to MediaStrackTrack that signals\n    // when a tracks enabled property was changed. Workaround for a bug in\n    // addStream, see below. No longer required in 15025+\n    if (browserDetails.version < 15025) {\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\n          window.MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n        set(value) {\n          origMSTEnabled.set.call(this, value);\n          const ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n  }\n\n  // ORTC defines the DTMF sender a bit different.\n  // https://github.com/w3c/ortc/issues/714\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = new window.RTCDtmfSender(this);\n          } else if (this.track.kind === 'video') {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n  // Edge currently only implements the RTCDtmfSender, not the\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n    window.RTCDTMFSender = window.RTCDtmfSender;\n  }\n\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\n      browserDetails.version);\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\n    if (config && config.iceServers) {\n      config.iceServers = filterIceServers(config.iceServers,\n        browserDetails.version);\n      utils.log('ICE servers after filtering:', config.iceServers);\n    }\n    return new RTCPeerConnectionShim(config);\n  };\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\n}\n\nexport function shimReplaceTrack(window) {\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n  if (window.RTCRtpSender &&\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\n    window.RTCRtpSender.prototype.replaceTrack =\n        window.RTCRtpSender.prototype.setTrack;\n  }\n}\n","/*\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nexport function filterIceServers(iceServers, edgeVersion) {\n  let hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(server => {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n      }\n      const isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(url => {\n        // filter STUN unconditionally.\n        if (url.indexOf('stun:') === 0) {\n          return false;\n        }\n\n        const validTurn = url.startsWith('turn') &&\n            !url.startsWith('turn:[') &&\n            url.includes('transport=udp');\n        if (validTurn && !hasTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return validTurn && !hasTurn;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window) {\n  const browserDetails = utils.detectBrowser(window);\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  // as well as ignoring {sdpMid, candidate: \"\"}\n  if (browserDetails.version < 68) {\n    const nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      if (arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params)) {\n            params.encodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(\n              sender.setParameters(params)\n              .catch(() => {})\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track) {\n        const stream = arguments[1];\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (!this._localStreams.includes(stream)) {\n            this._localStreams.push(stream);\n          }\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in window.RTCPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeAllowExtmapMixed(window) {\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter = adapterFactory({window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimEdge: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n      chromeShim.shimGetStats(window);\n      chromeShim.shimSenderReceiverGetStats(window);\n      chromeShim.fixNegotiationNeeded(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n      firefoxShim.shimRemoveStream(window);\n      firefoxShim.shimSenderGetStats(window);\n      firefoxShim.shimReceiverGetStats(window);\n      firefoxShim.shimRTCDataChannel(window);\n      firefoxShim.shimAddTransceiver(window);\n      firefoxShim.shimCreateOffer(window);\n      firefoxShim.shimCreateAnswer(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimGetDisplayMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCreateOfferLegacy(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}